// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: testgen.proto
#ifndef GRPC_testgen_2eproto__INCLUDED
#define GRPC_testgen_2eproto__INCLUDED

#include "testgen.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace testsgen {

class TestsGenService final {
 public:
  static constexpr char const* service_full_name() {
    return "testsgen.TestsGenService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Handshake(::grpc::ClientContext* context, const ::testsgen::VersionInfo& request, ::testsgen::VersionInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::VersionInfo>> AsyncHandshake(::grpc::ClientContext* context, const ::testsgen::VersionInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::VersionInfo>>(AsyncHandshakeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::VersionInfo>> PrepareAsyncHandshake(::grpc::ClientContext* context, const ::testsgen::VersionInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::VersionInfo>>(PrepareAsyncHandshakeRaw(context, request, cq));
    }
    virtual ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::testsgen::HeartbeatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::HeartbeatResponse>> AsyncHeartbeat(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::HeartbeatResponse>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::HeartbeatResponse>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::HeartbeatResponse>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::LogEntry>> OpenLogChannel(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::LogEntry>>(OpenLogChannelRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::LogEntry>> AsyncOpenLogChannel(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::LogEntry>>(AsyncOpenLogChannelRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::LogEntry>> PrepareAsyncOpenLogChannel(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::LogEntry>>(PrepareAsyncOpenLogChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseLogChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::testsgen::DummyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>> AsyncCloseLogChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>>(AsyncCloseLogChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>> PrepareAsyncCloseLogChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>>(PrepareAsyncCloseLogChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::LogEntry>> OpenGTestChannel(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::LogEntry>>(OpenGTestChannelRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::LogEntry>> AsyncOpenGTestChannel(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::LogEntry>>(AsyncOpenGTestChannelRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::LogEntry>> PrepareAsyncOpenGTestChannel(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::LogEntry>>(PrepareAsyncOpenGTestChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseGTestChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::testsgen::DummyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>> AsyncCloseGTestChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>>(AsyncCloseGTestChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>> PrepareAsyncCloseGTestChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>>(PrepareAsyncCloseGTestChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisterClient(::grpc::ClientContext* context, const ::testsgen::RegisterClientRequest& request, ::testsgen::DummyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>> AsyncRegisterClient(::grpc::ClientContext* context, const ::testsgen::RegisterClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>>(AsyncRegisterClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>> PrepareAsyncRegisterClient(::grpc::ClientContext* context, const ::testsgen::RegisterClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>>(PrepareAsyncRegisterClientRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFunctionReturnType(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::testsgen::FunctionTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::FunctionTypeResponse>> AsyncGetFunctionReturnType(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::FunctionTypeResponse>>(AsyncGetFunctionReturnTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::FunctionTypeResponse>> PrepareAsyncGetFunctionReturnType(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::FunctionTypeResponse>>(PrepareAsyncGetFunctionReturnTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>> GenerateSnippetTests(::grpc::ClientContext* context, const ::testsgen::SnippetRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>>(GenerateSnippetTestsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>> AsyncGenerateSnippetTests(::grpc::ClientContext* context, const ::testsgen::SnippetRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>>(AsyncGenerateSnippetTestsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>> PrepareAsyncGenerateSnippetTests(::grpc::ClientContext* context, const ::testsgen::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>>(PrepareAsyncGenerateSnippetTestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>> GenerateProjectTests(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>>(GenerateProjectTestsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>> AsyncGenerateProjectTests(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>>(AsyncGenerateProjectTestsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>> PrepareAsyncGenerateProjectTests(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>>(PrepareAsyncGenerateProjectTestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>> GenerateFileTests(::grpc::ClientContext* context, const ::testsgen::FileRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>>(GenerateFileTestsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>> AsyncGenerateFileTests(::grpc::ClientContext* context, const ::testsgen::FileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>>(AsyncGenerateFileTestsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>> PrepareAsyncGenerateFileTests(::grpc::ClientContext* context, const ::testsgen::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>>(PrepareAsyncGenerateFileTestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>> GenerateFunctionTests(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>>(GenerateFunctionTestsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>> AsyncGenerateFunctionTests(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>>(AsyncGenerateFunctionTestsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>> PrepareAsyncGenerateFunctionTests(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>>(PrepareAsyncGenerateFunctionTestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>> GenerateClassTests(::grpc::ClientContext* context, const ::testsgen::ClassRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>>(GenerateClassTestsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>> AsyncGenerateClassTests(::grpc::ClientContext* context, const ::testsgen::ClassRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>>(AsyncGenerateClassTestsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>> PrepareAsyncGenerateClassTests(::grpc::ClientContext* context, const ::testsgen::ClassRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>>(PrepareAsyncGenerateClassTestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>> GenerateFolderTests(::grpc::ClientContext* context, const ::testsgen::FolderRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>>(GenerateFolderTestsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>> AsyncGenerateFolderTests(::grpc::ClientContext* context, const ::testsgen::FolderRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>>(AsyncGenerateFolderTestsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>> PrepareAsyncGenerateFolderTests(::grpc::ClientContext* context, const ::testsgen::FolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>>(PrepareAsyncGenerateFolderTestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>> GenerateLineTests(::grpc::ClientContext* context, const ::testsgen::LineRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>>(GenerateLineTestsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>> AsyncGenerateLineTests(::grpc::ClientContext* context, const ::testsgen::LineRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>>(AsyncGenerateLineTestsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>> PrepareAsyncGenerateLineTests(::grpc::ClientContext* context, const ::testsgen::LineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>>(PrepareAsyncGenerateLineTestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>> GenerateAssertionFailTests(::grpc::ClientContext* context, const ::testsgen::AssertionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>>(GenerateAssertionFailTestsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>> AsyncGenerateAssertionFailTests(::grpc::ClientContext* context, const ::testsgen::AssertionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>>(AsyncGenerateAssertionFailTestsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>> PrepareAsyncGenerateAssertionFailTests(::grpc::ClientContext* context, const ::testsgen::AssertionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>>(PrepareAsyncGenerateAssertionFailTestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>> GeneratePredicateTests(::grpc::ClientContext* context, const ::testsgen::PredicateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>>(GeneratePredicateTestsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>> AsyncGeneratePredicateTests(::grpc::ClientContext* context, const ::testsgen::PredicateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>>(AsyncGeneratePredicateTestsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>> PrepareAsyncGeneratePredicateTests(::grpc::ClientContext* context, const ::testsgen::PredicateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>>(PrepareAsyncGeneratePredicateTestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::CoverageAndResultsResponse>> CreateTestsCoverageAndResult(::grpc::ClientContext* context, const ::testsgen::CoverageAndResultsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::CoverageAndResultsResponse>>(CreateTestsCoverageAndResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::CoverageAndResultsResponse>> AsyncCreateTestsCoverageAndResult(::grpc::ClientContext* context, const ::testsgen::CoverageAndResultsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::CoverageAndResultsResponse>>(AsyncCreateTestsCoverageAndResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::CoverageAndResultsResponse>> PrepareAsyncCreateTestsCoverageAndResult(::grpc::ClientContext* context, const ::testsgen::CoverageAndResultsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::CoverageAndResultsResponse>>(PrepareAsyncCreateTestsCoverageAndResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::StubsResponse>> GenerateProjectStubs(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::StubsResponse>>(GenerateProjectStubsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::StubsResponse>> AsyncGenerateProjectStubs(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::StubsResponse>>(AsyncGenerateProjectStubsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::StubsResponse>> PrepareAsyncGenerateProjectStubs(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::StubsResponse>>(PrepareAsyncGenerateProjectStubsRaw(context, request, cq));
    }
    virtual ::grpc::Status PrintModulesContent(::grpc::ClientContext* context, const ::testsgen::ProjectContext& request, ::testsgen::DummyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>> AsyncPrintModulesContent(::grpc::ClientContext* context, const ::testsgen::ProjectContext& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>>(AsyncPrintModulesContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>> PrepareAsyncPrintModulesContent(::grpc::ClientContext* context, const ::testsgen::ProjectContext& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>>(PrepareAsyncPrintModulesContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::ProjectConfigResponse>> ConfigureProject(::grpc::ClientContext* context, const ::testsgen::ProjectConfigRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::testsgen::ProjectConfigResponse>>(ConfigureProjectRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::ProjectConfigResponse>> AsyncConfigureProject(::grpc::ClientContext* context, const ::testsgen::ProjectConfigRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::ProjectConfigResponse>>(AsyncConfigureProjectRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::ProjectConfigResponse>> PrepareAsyncConfigureProject(::grpc::ClientContext* context, const ::testsgen::ProjectConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::testsgen::ProjectConfigResponse>>(PrepareAsyncConfigureProjectRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSourceCode(::grpc::ClientContext* context, const ::testsgen::SourceInfo& request, ::testsgen::SourceCode* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::SourceCode>> AsyncGetSourceCode(::grpc::ClientContext* context, const ::testsgen::SourceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::SourceCode>>(AsyncGetSourceCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::SourceCode>> PrepareAsyncGetSourceCode(::grpc::ClientContext* context, const ::testsgen::SourceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::SourceCode>>(PrepareAsyncGetSourceCodeRaw(context, request, cq));
    }
    virtual ::grpc::Status GetProjectTargets(::grpc::ClientContext* context, const ::testsgen::ProjectTargetsRequest& request, ::testsgen::ProjectTargetsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::ProjectTargetsResponse>> AsyncGetProjectTargets(::grpc::ClientContext* context, const ::testsgen::ProjectTargetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::ProjectTargetsResponse>>(AsyncGetProjectTargetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::ProjectTargetsResponse>> PrepareAsyncGetProjectTargets(::grpc::ClientContext* context, const ::testsgen::ProjectTargetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::ProjectTargetsResponse>>(PrepareAsyncGetProjectTargetsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFileTargets(::grpc::ClientContext* context, const ::testsgen::FileTargetsRequest& request, ::testsgen::FileTargetsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::FileTargetsResponse>> AsyncGetFileTargets(::grpc::ClientContext* context, const ::testsgen::FileTargetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::FileTargetsResponse>>(AsyncGetFileTargetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::FileTargetsResponse>> PrepareAsyncGetFileTargets(::grpc::ClientContext* context, const ::testsgen::FileTargetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::FileTargetsResponse>>(PrepareAsyncGetFileTargetsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Handshake(::grpc::ClientContext* context, const ::testsgen::VersionInfo* request, ::testsgen::VersionInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Handshake(::grpc::ClientContext* context, const ::testsgen::VersionInfo* request, ::testsgen::VersionInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Heartbeat(::grpc::ClientContext* context, const ::testsgen::DummyRequest* request, ::testsgen::HeartbeatResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Heartbeat(::grpc::ClientContext* context, const ::testsgen::DummyRequest* request, ::testsgen::HeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OpenLogChannel(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest* request, ::grpc::ClientReadReactor< ::testsgen::LogEntry>* reactor) = 0;
      virtual void CloseLogChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest* request, ::testsgen::DummyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseLogChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest* request, ::testsgen::DummyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OpenGTestChannel(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest* request, ::grpc::ClientReadReactor< ::testsgen::LogEntry>* reactor) = 0;
      virtual void CloseGTestChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest* request, ::testsgen::DummyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseGTestChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest* request, ::testsgen::DummyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RegisterClient(::grpc::ClientContext* context, const ::testsgen::RegisterClientRequest* request, ::testsgen::DummyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterClient(::grpc::ClientContext* context, const ::testsgen::RegisterClientRequest* request, ::testsgen::DummyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetFunctionReturnType(::grpc::ClientContext* context, const ::testsgen::FunctionRequest* request, ::testsgen::FunctionTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFunctionReturnType(::grpc::ClientContext* context, const ::testsgen::FunctionRequest* request, ::testsgen::FunctionTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GenerateSnippetTests(::grpc::ClientContext* context, const ::testsgen::SnippetRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) = 0;
      virtual void GenerateProjectTests(::grpc::ClientContext* context, const ::testsgen::ProjectRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) = 0;
      virtual void GenerateFileTests(::grpc::ClientContext* context, const ::testsgen::FileRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) = 0;
      virtual void GenerateFunctionTests(::grpc::ClientContext* context, const ::testsgen::FunctionRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) = 0;
      virtual void GenerateClassTests(::grpc::ClientContext* context, const ::testsgen::ClassRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) = 0;
      virtual void GenerateFolderTests(::grpc::ClientContext* context, const ::testsgen::FolderRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) = 0;
      virtual void GenerateLineTests(::grpc::ClientContext* context, const ::testsgen::LineRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) = 0;
      virtual void GenerateAssertionFailTests(::grpc::ClientContext* context, const ::testsgen::AssertionRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) = 0;
      virtual void GeneratePredicateTests(::grpc::ClientContext* context, const ::testsgen::PredicateRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) = 0;
      virtual void CreateTestsCoverageAndResult(::grpc::ClientContext* context, const ::testsgen::CoverageAndResultsRequest* request, ::grpc::ClientReadReactor< ::testsgen::CoverageAndResultsResponse>* reactor) = 0;
      virtual void GenerateProjectStubs(::grpc::ClientContext* context, const ::testsgen::ProjectRequest* request, ::grpc::ClientReadReactor< ::testsgen::StubsResponse>* reactor) = 0;
      virtual void PrintModulesContent(::grpc::ClientContext* context, const ::testsgen::ProjectContext* request, ::testsgen::DummyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PrintModulesContent(::grpc::ClientContext* context, const ::testsgen::ProjectContext* request, ::testsgen::DummyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ConfigureProject(::grpc::ClientContext* context, const ::testsgen::ProjectConfigRequest* request, ::grpc::ClientReadReactor< ::testsgen::ProjectConfigResponse>* reactor) = 0;
      virtual void GetSourceCode(::grpc::ClientContext* context, const ::testsgen::SourceInfo* request, ::testsgen::SourceCode* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSourceCode(::grpc::ClientContext* context, const ::testsgen::SourceInfo* request, ::testsgen::SourceCode* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetProjectTargets(::grpc::ClientContext* context, const ::testsgen::ProjectTargetsRequest* request, ::testsgen::ProjectTargetsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProjectTargets(::grpc::ClientContext* context, const ::testsgen::ProjectTargetsRequest* request, ::testsgen::ProjectTargetsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetFileTargets(::grpc::ClientContext* context, const ::testsgen::FileTargetsRequest* request, ::testsgen::FileTargetsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFileTargets(::grpc::ClientContext* context, const ::testsgen::FileTargetsRequest* request, ::testsgen::FileTargetsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::VersionInfo>* AsyncHandshakeRaw(::grpc::ClientContext* context, const ::testsgen::VersionInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::VersionInfo>* PrepareAsyncHandshakeRaw(::grpc::ClientContext* context, const ::testsgen::VersionInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::HeartbeatResponse>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::HeartbeatResponse>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::testsgen::LogEntry>* OpenLogChannelRaw(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::LogEntry>* AsyncOpenLogChannelRaw(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::LogEntry>* PrepareAsyncOpenLogChannelRaw(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>* AsyncCloseLogChannelRaw(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>* PrepareAsyncCloseLogChannelRaw(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::testsgen::LogEntry>* OpenGTestChannelRaw(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::LogEntry>* AsyncOpenGTestChannelRaw(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::LogEntry>* PrepareAsyncOpenGTestChannelRaw(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>* AsyncCloseGTestChannelRaw(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>* PrepareAsyncCloseGTestChannelRaw(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>* AsyncRegisterClientRaw(::grpc::ClientContext* context, const ::testsgen::RegisterClientRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>* PrepareAsyncRegisterClientRaw(::grpc::ClientContext* context, const ::testsgen::RegisterClientRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::FunctionTypeResponse>* AsyncGetFunctionReturnTypeRaw(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::FunctionTypeResponse>* PrepareAsyncGetFunctionReturnTypeRaw(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>* GenerateSnippetTestsRaw(::grpc::ClientContext* context, const ::testsgen::SnippetRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>* AsyncGenerateSnippetTestsRaw(::grpc::ClientContext* context, const ::testsgen::SnippetRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>* PrepareAsyncGenerateSnippetTestsRaw(::grpc::ClientContext* context, const ::testsgen::SnippetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>* GenerateProjectTestsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>* AsyncGenerateProjectTestsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>* PrepareAsyncGenerateProjectTestsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>* GenerateFileTestsRaw(::grpc::ClientContext* context, const ::testsgen::FileRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>* AsyncGenerateFileTestsRaw(::grpc::ClientContext* context, const ::testsgen::FileRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>* PrepareAsyncGenerateFileTestsRaw(::grpc::ClientContext* context, const ::testsgen::FileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>* GenerateFunctionTestsRaw(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>* AsyncGenerateFunctionTestsRaw(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>* PrepareAsyncGenerateFunctionTestsRaw(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>* GenerateClassTestsRaw(::grpc::ClientContext* context, const ::testsgen::ClassRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>* AsyncGenerateClassTestsRaw(::grpc::ClientContext* context, const ::testsgen::ClassRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>* PrepareAsyncGenerateClassTestsRaw(::grpc::ClientContext* context, const ::testsgen::ClassRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>* GenerateFolderTestsRaw(::grpc::ClientContext* context, const ::testsgen::FolderRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>* AsyncGenerateFolderTestsRaw(::grpc::ClientContext* context, const ::testsgen::FolderRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>* PrepareAsyncGenerateFolderTestsRaw(::grpc::ClientContext* context, const ::testsgen::FolderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>* GenerateLineTestsRaw(::grpc::ClientContext* context, const ::testsgen::LineRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>* AsyncGenerateLineTestsRaw(::grpc::ClientContext* context, const ::testsgen::LineRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>* PrepareAsyncGenerateLineTestsRaw(::grpc::ClientContext* context, const ::testsgen::LineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>* GenerateAssertionFailTestsRaw(::grpc::ClientContext* context, const ::testsgen::AssertionRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>* AsyncGenerateAssertionFailTestsRaw(::grpc::ClientContext* context, const ::testsgen::AssertionRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>* PrepareAsyncGenerateAssertionFailTestsRaw(::grpc::ClientContext* context, const ::testsgen::AssertionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::testsgen::TestsResponse>* GeneratePredicateTestsRaw(::grpc::ClientContext* context, const ::testsgen::PredicateRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>* AsyncGeneratePredicateTestsRaw(::grpc::ClientContext* context, const ::testsgen::PredicateRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::TestsResponse>* PrepareAsyncGeneratePredicateTestsRaw(::grpc::ClientContext* context, const ::testsgen::PredicateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::testsgen::CoverageAndResultsResponse>* CreateTestsCoverageAndResultRaw(::grpc::ClientContext* context, const ::testsgen::CoverageAndResultsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::CoverageAndResultsResponse>* AsyncCreateTestsCoverageAndResultRaw(::grpc::ClientContext* context, const ::testsgen::CoverageAndResultsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::CoverageAndResultsResponse>* PrepareAsyncCreateTestsCoverageAndResultRaw(::grpc::ClientContext* context, const ::testsgen::CoverageAndResultsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::testsgen::StubsResponse>* GenerateProjectStubsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::StubsResponse>* AsyncGenerateProjectStubsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::StubsResponse>* PrepareAsyncGenerateProjectStubsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>* AsyncPrintModulesContentRaw(::grpc::ClientContext* context, const ::testsgen::ProjectContext& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::DummyResponse>* PrepareAsyncPrintModulesContentRaw(::grpc::ClientContext* context, const ::testsgen::ProjectContext& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::testsgen::ProjectConfigResponse>* ConfigureProjectRaw(::grpc::ClientContext* context, const ::testsgen::ProjectConfigRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::ProjectConfigResponse>* AsyncConfigureProjectRaw(::grpc::ClientContext* context, const ::testsgen::ProjectConfigRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::testsgen::ProjectConfigResponse>* PrepareAsyncConfigureProjectRaw(::grpc::ClientContext* context, const ::testsgen::ProjectConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::SourceCode>* AsyncGetSourceCodeRaw(::grpc::ClientContext* context, const ::testsgen::SourceInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::SourceCode>* PrepareAsyncGetSourceCodeRaw(::grpc::ClientContext* context, const ::testsgen::SourceInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::ProjectTargetsResponse>* AsyncGetProjectTargetsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectTargetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::ProjectTargetsResponse>* PrepareAsyncGetProjectTargetsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectTargetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::FileTargetsResponse>* AsyncGetFileTargetsRaw(::grpc::ClientContext* context, const ::testsgen::FileTargetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testsgen::FileTargetsResponse>* PrepareAsyncGetFileTargetsRaw(::grpc::ClientContext* context, const ::testsgen::FileTargetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Handshake(::grpc::ClientContext* context, const ::testsgen::VersionInfo& request, ::testsgen::VersionInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::VersionInfo>> AsyncHandshake(::grpc::ClientContext* context, const ::testsgen::VersionInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::VersionInfo>>(AsyncHandshakeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::VersionInfo>> PrepareAsyncHandshake(::grpc::ClientContext* context, const ::testsgen::VersionInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::VersionInfo>>(PrepareAsyncHandshakeRaw(context, request, cq));
    }
    ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::testsgen::HeartbeatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::HeartbeatResponse>> AsyncHeartbeat(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::HeartbeatResponse>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::HeartbeatResponse>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::HeartbeatResponse>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::testsgen::LogEntry>> OpenLogChannel(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::testsgen::LogEntry>>(OpenLogChannelRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::LogEntry>> AsyncOpenLogChannel(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::LogEntry>>(AsyncOpenLogChannelRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::LogEntry>> PrepareAsyncOpenLogChannel(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::LogEntry>>(PrepareAsyncOpenLogChannelRaw(context, request, cq));
    }
    ::grpc::Status CloseLogChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::testsgen::DummyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>> AsyncCloseLogChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>>(AsyncCloseLogChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>> PrepareAsyncCloseLogChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>>(PrepareAsyncCloseLogChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::testsgen::LogEntry>> OpenGTestChannel(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::testsgen::LogEntry>>(OpenGTestChannelRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::LogEntry>> AsyncOpenGTestChannel(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::LogEntry>>(AsyncOpenGTestChannelRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::LogEntry>> PrepareAsyncOpenGTestChannel(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::LogEntry>>(PrepareAsyncOpenGTestChannelRaw(context, request, cq));
    }
    ::grpc::Status CloseGTestChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::testsgen::DummyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>> AsyncCloseGTestChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>>(AsyncCloseGTestChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>> PrepareAsyncCloseGTestChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>>(PrepareAsyncCloseGTestChannelRaw(context, request, cq));
    }
    ::grpc::Status RegisterClient(::grpc::ClientContext* context, const ::testsgen::RegisterClientRequest& request, ::testsgen::DummyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>> AsyncRegisterClient(::grpc::ClientContext* context, const ::testsgen::RegisterClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>>(AsyncRegisterClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>> PrepareAsyncRegisterClient(::grpc::ClientContext* context, const ::testsgen::RegisterClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>>(PrepareAsyncRegisterClientRaw(context, request, cq));
    }
    ::grpc::Status GetFunctionReturnType(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::testsgen::FunctionTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::FunctionTypeResponse>> AsyncGetFunctionReturnType(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::FunctionTypeResponse>>(AsyncGetFunctionReturnTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::FunctionTypeResponse>> PrepareAsyncGetFunctionReturnType(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::FunctionTypeResponse>>(PrepareAsyncGetFunctionReturnTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::testsgen::TestsResponse>> GenerateSnippetTests(::grpc::ClientContext* context, const ::testsgen::SnippetRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::testsgen::TestsResponse>>(GenerateSnippetTestsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>> AsyncGenerateSnippetTests(::grpc::ClientContext* context, const ::testsgen::SnippetRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>>(AsyncGenerateSnippetTestsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>> PrepareAsyncGenerateSnippetTests(::grpc::ClientContext* context, const ::testsgen::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>>(PrepareAsyncGenerateSnippetTestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::testsgen::TestsResponse>> GenerateProjectTests(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::testsgen::TestsResponse>>(GenerateProjectTestsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>> AsyncGenerateProjectTests(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>>(AsyncGenerateProjectTestsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>> PrepareAsyncGenerateProjectTests(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>>(PrepareAsyncGenerateProjectTestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::testsgen::TestsResponse>> GenerateFileTests(::grpc::ClientContext* context, const ::testsgen::FileRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::testsgen::TestsResponse>>(GenerateFileTestsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>> AsyncGenerateFileTests(::grpc::ClientContext* context, const ::testsgen::FileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>>(AsyncGenerateFileTestsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>> PrepareAsyncGenerateFileTests(::grpc::ClientContext* context, const ::testsgen::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>>(PrepareAsyncGenerateFileTestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::testsgen::TestsResponse>> GenerateFunctionTests(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::testsgen::TestsResponse>>(GenerateFunctionTestsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>> AsyncGenerateFunctionTests(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>>(AsyncGenerateFunctionTestsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>> PrepareAsyncGenerateFunctionTests(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>>(PrepareAsyncGenerateFunctionTestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::testsgen::TestsResponse>> GenerateClassTests(::grpc::ClientContext* context, const ::testsgen::ClassRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::testsgen::TestsResponse>>(GenerateClassTestsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>> AsyncGenerateClassTests(::grpc::ClientContext* context, const ::testsgen::ClassRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>>(AsyncGenerateClassTestsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>> PrepareAsyncGenerateClassTests(::grpc::ClientContext* context, const ::testsgen::ClassRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>>(PrepareAsyncGenerateClassTestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::testsgen::TestsResponse>> GenerateFolderTests(::grpc::ClientContext* context, const ::testsgen::FolderRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::testsgen::TestsResponse>>(GenerateFolderTestsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>> AsyncGenerateFolderTests(::grpc::ClientContext* context, const ::testsgen::FolderRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>>(AsyncGenerateFolderTestsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>> PrepareAsyncGenerateFolderTests(::grpc::ClientContext* context, const ::testsgen::FolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>>(PrepareAsyncGenerateFolderTestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::testsgen::TestsResponse>> GenerateLineTests(::grpc::ClientContext* context, const ::testsgen::LineRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::testsgen::TestsResponse>>(GenerateLineTestsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>> AsyncGenerateLineTests(::grpc::ClientContext* context, const ::testsgen::LineRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>>(AsyncGenerateLineTestsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>> PrepareAsyncGenerateLineTests(::grpc::ClientContext* context, const ::testsgen::LineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>>(PrepareAsyncGenerateLineTestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::testsgen::TestsResponse>> GenerateAssertionFailTests(::grpc::ClientContext* context, const ::testsgen::AssertionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::testsgen::TestsResponse>>(GenerateAssertionFailTestsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>> AsyncGenerateAssertionFailTests(::grpc::ClientContext* context, const ::testsgen::AssertionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>>(AsyncGenerateAssertionFailTestsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>> PrepareAsyncGenerateAssertionFailTests(::grpc::ClientContext* context, const ::testsgen::AssertionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>>(PrepareAsyncGenerateAssertionFailTestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::testsgen::TestsResponse>> GeneratePredicateTests(::grpc::ClientContext* context, const ::testsgen::PredicateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::testsgen::TestsResponse>>(GeneratePredicateTestsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>> AsyncGeneratePredicateTests(::grpc::ClientContext* context, const ::testsgen::PredicateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>>(AsyncGeneratePredicateTestsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>> PrepareAsyncGeneratePredicateTests(::grpc::ClientContext* context, const ::testsgen::PredicateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>>(PrepareAsyncGeneratePredicateTestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::testsgen::CoverageAndResultsResponse>> CreateTestsCoverageAndResult(::grpc::ClientContext* context, const ::testsgen::CoverageAndResultsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::testsgen::CoverageAndResultsResponse>>(CreateTestsCoverageAndResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::CoverageAndResultsResponse>> AsyncCreateTestsCoverageAndResult(::grpc::ClientContext* context, const ::testsgen::CoverageAndResultsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::CoverageAndResultsResponse>>(AsyncCreateTestsCoverageAndResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::CoverageAndResultsResponse>> PrepareAsyncCreateTestsCoverageAndResult(::grpc::ClientContext* context, const ::testsgen::CoverageAndResultsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::CoverageAndResultsResponse>>(PrepareAsyncCreateTestsCoverageAndResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::testsgen::StubsResponse>> GenerateProjectStubs(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::testsgen::StubsResponse>>(GenerateProjectStubsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::StubsResponse>> AsyncGenerateProjectStubs(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::StubsResponse>>(AsyncGenerateProjectStubsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::StubsResponse>> PrepareAsyncGenerateProjectStubs(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::StubsResponse>>(PrepareAsyncGenerateProjectStubsRaw(context, request, cq));
    }
    ::grpc::Status PrintModulesContent(::grpc::ClientContext* context, const ::testsgen::ProjectContext& request, ::testsgen::DummyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>> AsyncPrintModulesContent(::grpc::ClientContext* context, const ::testsgen::ProjectContext& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>>(AsyncPrintModulesContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>> PrepareAsyncPrintModulesContent(::grpc::ClientContext* context, const ::testsgen::ProjectContext& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>>(PrepareAsyncPrintModulesContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::testsgen::ProjectConfigResponse>> ConfigureProject(::grpc::ClientContext* context, const ::testsgen::ProjectConfigRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::testsgen::ProjectConfigResponse>>(ConfigureProjectRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::ProjectConfigResponse>> AsyncConfigureProject(::grpc::ClientContext* context, const ::testsgen::ProjectConfigRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::ProjectConfigResponse>>(AsyncConfigureProjectRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::ProjectConfigResponse>> PrepareAsyncConfigureProject(::grpc::ClientContext* context, const ::testsgen::ProjectConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::testsgen::ProjectConfigResponse>>(PrepareAsyncConfigureProjectRaw(context, request, cq));
    }
    ::grpc::Status GetSourceCode(::grpc::ClientContext* context, const ::testsgen::SourceInfo& request, ::testsgen::SourceCode* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::SourceCode>> AsyncGetSourceCode(::grpc::ClientContext* context, const ::testsgen::SourceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::SourceCode>>(AsyncGetSourceCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::SourceCode>> PrepareAsyncGetSourceCode(::grpc::ClientContext* context, const ::testsgen::SourceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::SourceCode>>(PrepareAsyncGetSourceCodeRaw(context, request, cq));
    }
    ::grpc::Status GetProjectTargets(::grpc::ClientContext* context, const ::testsgen::ProjectTargetsRequest& request, ::testsgen::ProjectTargetsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::ProjectTargetsResponse>> AsyncGetProjectTargets(::grpc::ClientContext* context, const ::testsgen::ProjectTargetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::ProjectTargetsResponse>>(AsyncGetProjectTargetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::ProjectTargetsResponse>> PrepareAsyncGetProjectTargets(::grpc::ClientContext* context, const ::testsgen::ProjectTargetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::ProjectTargetsResponse>>(PrepareAsyncGetProjectTargetsRaw(context, request, cq));
    }
    ::grpc::Status GetFileTargets(::grpc::ClientContext* context, const ::testsgen::FileTargetsRequest& request, ::testsgen::FileTargetsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::FileTargetsResponse>> AsyncGetFileTargets(::grpc::ClientContext* context, const ::testsgen::FileTargetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::FileTargetsResponse>>(AsyncGetFileTargetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::FileTargetsResponse>> PrepareAsyncGetFileTargets(::grpc::ClientContext* context, const ::testsgen::FileTargetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testsgen::FileTargetsResponse>>(PrepareAsyncGetFileTargetsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Handshake(::grpc::ClientContext* context, const ::testsgen::VersionInfo* request, ::testsgen::VersionInfo* response, std::function<void(::grpc::Status)>) override;
      void Handshake(::grpc::ClientContext* context, const ::testsgen::VersionInfo* request, ::testsgen::VersionInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Heartbeat(::grpc::ClientContext* context, const ::testsgen::DummyRequest* request, ::testsgen::HeartbeatResponse* response, std::function<void(::grpc::Status)>) override;
      void Heartbeat(::grpc::ClientContext* context, const ::testsgen::DummyRequest* request, ::testsgen::HeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OpenLogChannel(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest* request, ::grpc::ClientReadReactor< ::testsgen::LogEntry>* reactor) override;
      void CloseLogChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest* request, ::testsgen::DummyResponse* response, std::function<void(::grpc::Status)>) override;
      void CloseLogChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest* request, ::testsgen::DummyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OpenGTestChannel(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest* request, ::grpc::ClientReadReactor< ::testsgen::LogEntry>* reactor) override;
      void CloseGTestChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest* request, ::testsgen::DummyResponse* response, std::function<void(::grpc::Status)>) override;
      void CloseGTestChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest* request, ::testsgen::DummyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterClient(::grpc::ClientContext* context, const ::testsgen::RegisterClientRequest* request, ::testsgen::DummyResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterClient(::grpc::ClientContext* context, const ::testsgen::RegisterClientRequest* request, ::testsgen::DummyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFunctionReturnType(::grpc::ClientContext* context, const ::testsgen::FunctionRequest* request, ::testsgen::FunctionTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetFunctionReturnType(::grpc::ClientContext* context, const ::testsgen::FunctionRequest* request, ::testsgen::FunctionTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GenerateSnippetTests(::grpc::ClientContext* context, const ::testsgen::SnippetRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) override;
      void GenerateProjectTests(::grpc::ClientContext* context, const ::testsgen::ProjectRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) override;
      void GenerateFileTests(::grpc::ClientContext* context, const ::testsgen::FileRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) override;
      void GenerateFunctionTests(::grpc::ClientContext* context, const ::testsgen::FunctionRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) override;
      void GenerateClassTests(::grpc::ClientContext* context, const ::testsgen::ClassRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) override;
      void GenerateFolderTests(::grpc::ClientContext* context, const ::testsgen::FolderRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) override;
      void GenerateLineTests(::grpc::ClientContext* context, const ::testsgen::LineRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) override;
      void GenerateAssertionFailTests(::grpc::ClientContext* context, const ::testsgen::AssertionRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) override;
      void GeneratePredicateTests(::grpc::ClientContext* context, const ::testsgen::PredicateRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) override;
      void CreateTestsCoverageAndResult(::grpc::ClientContext* context, const ::testsgen::CoverageAndResultsRequest* request, ::grpc::ClientReadReactor< ::testsgen::CoverageAndResultsResponse>* reactor) override;
      void GenerateProjectStubs(::grpc::ClientContext* context, const ::testsgen::ProjectRequest* request, ::grpc::ClientReadReactor< ::testsgen::StubsResponse>* reactor) override;
      void PrintModulesContent(::grpc::ClientContext* context, const ::testsgen::ProjectContext* request, ::testsgen::DummyResponse* response, std::function<void(::grpc::Status)>) override;
      void PrintModulesContent(::grpc::ClientContext* context, const ::testsgen::ProjectContext* request, ::testsgen::DummyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ConfigureProject(::grpc::ClientContext* context, const ::testsgen::ProjectConfigRequest* request, ::grpc::ClientReadReactor< ::testsgen::ProjectConfigResponse>* reactor) override;
      void GetSourceCode(::grpc::ClientContext* context, const ::testsgen::SourceInfo* request, ::testsgen::SourceCode* response, std::function<void(::grpc::Status)>) override;
      void GetSourceCode(::grpc::ClientContext* context, const ::testsgen::SourceInfo* request, ::testsgen::SourceCode* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetProjectTargets(::grpc::ClientContext* context, const ::testsgen::ProjectTargetsRequest* request, ::testsgen::ProjectTargetsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetProjectTargets(::grpc::ClientContext* context, const ::testsgen::ProjectTargetsRequest* request, ::testsgen::ProjectTargetsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFileTargets(::grpc::ClientContext* context, const ::testsgen::FileTargetsRequest* request, ::testsgen::FileTargetsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetFileTargets(::grpc::ClientContext* context, const ::testsgen::FileTargetsRequest* request, ::testsgen::FileTargetsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::testsgen::VersionInfo>* AsyncHandshakeRaw(::grpc::ClientContext* context, const ::testsgen::VersionInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testsgen::VersionInfo>* PrepareAsyncHandshakeRaw(::grpc::ClientContext* context, const ::testsgen::VersionInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testsgen::HeartbeatResponse>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testsgen::HeartbeatResponse>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::testsgen::LogEntry>* OpenLogChannelRaw(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request) override;
    ::grpc::ClientAsyncReader< ::testsgen::LogEntry>* AsyncOpenLogChannelRaw(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::testsgen::LogEntry>* PrepareAsyncOpenLogChannelRaw(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>* AsyncCloseLogChannelRaw(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>* PrepareAsyncCloseLogChannelRaw(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::testsgen::LogEntry>* OpenGTestChannelRaw(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request) override;
    ::grpc::ClientAsyncReader< ::testsgen::LogEntry>* AsyncOpenGTestChannelRaw(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::testsgen::LogEntry>* PrepareAsyncOpenGTestChannelRaw(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>* AsyncCloseGTestChannelRaw(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>* PrepareAsyncCloseGTestChannelRaw(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>* AsyncRegisterClientRaw(::grpc::ClientContext* context, const ::testsgen::RegisterClientRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>* PrepareAsyncRegisterClientRaw(::grpc::ClientContext* context, const ::testsgen::RegisterClientRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testsgen::FunctionTypeResponse>* AsyncGetFunctionReturnTypeRaw(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testsgen::FunctionTypeResponse>* PrepareAsyncGetFunctionReturnTypeRaw(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::testsgen::TestsResponse>* GenerateSnippetTestsRaw(::grpc::ClientContext* context, const ::testsgen::SnippetRequest& request) override;
    ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* AsyncGenerateSnippetTestsRaw(::grpc::ClientContext* context, const ::testsgen::SnippetRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* PrepareAsyncGenerateSnippetTestsRaw(::grpc::ClientContext* context, const ::testsgen::SnippetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::testsgen::TestsResponse>* GenerateProjectTestsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request) override;
    ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* AsyncGenerateProjectTestsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* PrepareAsyncGenerateProjectTestsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::testsgen::TestsResponse>* GenerateFileTestsRaw(::grpc::ClientContext* context, const ::testsgen::FileRequest& request) override;
    ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* AsyncGenerateFileTestsRaw(::grpc::ClientContext* context, const ::testsgen::FileRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* PrepareAsyncGenerateFileTestsRaw(::grpc::ClientContext* context, const ::testsgen::FileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::testsgen::TestsResponse>* GenerateFunctionTestsRaw(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request) override;
    ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* AsyncGenerateFunctionTestsRaw(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* PrepareAsyncGenerateFunctionTestsRaw(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::testsgen::TestsResponse>* GenerateClassTestsRaw(::grpc::ClientContext* context, const ::testsgen::ClassRequest& request) override;
    ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* AsyncGenerateClassTestsRaw(::grpc::ClientContext* context, const ::testsgen::ClassRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* PrepareAsyncGenerateClassTestsRaw(::grpc::ClientContext* context, const ::testsgen::ClassRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::testsgen::TestsResponse>* GenerateFolderTestsRaw(::grpc::ClientContext* context, const ::testsgen::FolderRequest& request) override;
    ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* AsyncGenerateFolderTestsRaw(::grpc::ClientContext* context, const ::testsgen::FolderRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* PrepareAsyncGenerateFolderTestsRaw(::grpc::ClientContext* context, const ::testsgen::FolderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::testsgen::TestsResponse>* GenerateLineTestsRaw(::grpc::ClientContext* context, const ::testsgen::LineRequest& request) override;
    ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* AsyncGenerateLineTestsRaw(::grpc::ClientContext* context, const ::testsgen::LineRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* PrepareAsyncGenerateLineTestsRaw(::grpc::ClientContext* context, const ::testsgen::LineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::testsgen::TestsResponse>* GenerateAssertionFailTestsRaw(::grpc::ClientContext* context, const ::testsgen::AssertionRequest& request) override;
    ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* AsyncGenerateAssertionFailTestsRaw(::grpc::ClientContext* context, const ::testsgen::AssertionRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* PrepareAsyncGenerateAssertionFailTestsRaw(::grpc::ClientContext* context, const ::testsgen::AssertionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::testsgen::TestsResponse>* GeneratePredicateTestsRaw(::grpc::ClientContext* context, const ::testsgen::PredicateRequest& request) override;
    ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* AsyncGeneratePredicateTestsRaw(::grpc::ClientContext* context, const ::testsgen::PredicateRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* PrepareAsyncGeneratePredicateTestsRaw(::grpc::ClientContext* context, const ::testsgen::PredicateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::testsgen::CoverageAndResultsResponse>* CreateTestsCoverageAndResultRaw(::grpc::ClientContext* context, const ::testsgen::CoverageAndResultsRequest& request) override;
    ::grpc::ClientAsyncReader< ::testsgen::CoverageAndResultsResponse>* AsyncCreateTestsCoverageAndResultRaw(::grpc::ClientContext* context, const ::testsgen::CoverageAndResultsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::testsgen::CoverageAndResultsResponse>* PrepareAsyncCreateTestsCoverageAndResultRaw(::grpc::ClientContext* context, const ::testsgen::CoverageAndResultsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::testsgen::StubsResponse>* GenerateProjectStubsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request) override;
    ::grpc::ClientAsyncReader< ::testsgen::StubsResponse>* AsyncGenerateProjectStubsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::testsgen::StubsResponse>* PrepareAsyncGenerateProjectStubsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>* AsyncPrintModulesContentRaw(::grpc::ClientContext* context, const ::testsgen::ProjectContext& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>* PrepareAsyncPrintModulesContentRaw(::grpc::ClientContext* context, const ::testsgen::ProjectContext& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::testsgen::ProjectConfigResponse>* ConfigureProjectRaw(::grpc::ClientContext* context, const ::testsgen::ProjectConfigRequest& request) override;
    ::grpc::ClientAsyncReader< ::testsgen::ProjectConfigResponse>* AsyncConfigureProjectRaw(::grpc::ClientContext* context, const ::testsgen::ProjectConfigRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::testsgen::ProjectConfigResponse>* PrepareAsyncConfigureProjectRaw(::grpc::ClientContext* context, const ::testsgen::ProjectConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testsgen::SourceCode>* AsyncGetSourceCodeRaw(::grpc::ClientContext* context, const ::testsgen::SourceInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testsgen::SourceCode>* PrepareAsyncGetSourceCodeRaw(::grpc::ClientContext* context, const ::testsgen::SourceInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testsgen::ProjectTargetsResponse>* AsyncGetProjectTargetsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectTargetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testsgen::ProjectTargetsResponse>* PrepareAsyncGetProjectTargetsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectTargetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testsgen::FileTargetsResponse>* AsyncGetFileTargetsRaw(::grpc::ClientContext* context, const ::testsgen::FileTargetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testsgen::FileTargetsResponse>* PrepareAsyncGetFileTargetsRaw(::grpc::ClientContext* context, const ::testsgen::FileTargetsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Handshake_;
    const ::grpc::internal::RpcMethod rpcmethod_Heartbeat_;
    const ::grpc::internal::RpcMethod rpcmethod_OpenLogChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseLogChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_OpenGTestChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseGTestChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterClient_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFunctionReturnType_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateSnippetTests_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateProjectTests_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateFileTests_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateFunctionTests_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateClassTests_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateFolderTests_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateLineTests_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateAssertionFailTests_;
    const ::grpc::internal::RpcMethod rpcmethod_GeneratePredicateTests_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateTestsCoverageAndResult_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateProjectStubs_;
    const ::grpc::internal::RpcMethod rpcmethod_PrintModulesContent_;
    const ::grpc::internal::RpcMethod rpcmethod_ConfigureProject_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSourceCode_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProjectTargets_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFileTargets_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Handshake(::grpc::ServerContext* context, const ::testsgen::VersionInfo* request, ::testsgen::VersionInfo* response);
    virtual ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::testsgen::DummyRequest* request, ::testsgen::HeartbeatResponse* response);
    virtual ::grpc::Status OpenLogChannel(::grpc::ServerContext* context, const ::testsgen::LogChannelRequest* request, ::grpc::ServerWriter< ::testsgen::LogEntry>* writer);
    virtual ::grpc::Status CloseLogChannel(::grpc::ServerContext* context, const ::testsgen::DummyRequest* request, ::testsgen::DummyResponse* response);
    virtual ::grpc::Status OpenGTestChannel(::grpc::ServerContext* context, const ::testsgen::LogChannelRequest* request, ::grpc::ServerWriter< ::testsgen::LogEntry>* writer);
    virtual ::grpc::Status CloseGTestChannel(::grpc::ServerContext* context, const ::testsgen::DummyRequest* request, ::testsgen::DummyResponse* response);
    virtual ::grpc::Status RegisterClient(::grpc::ServerContext* context, const ::testsgen::RegisterClientRequest* request, ::testsgen::DummyResponse* response);
    virtual ::grpc::Status GetFunctionReturnType(::grpc::ServerContext* context, const ::testsgen::FunctionRequest* request, ::testsgen::FunctionTypeResponse* response);
    virtual ::grpc::Status GenerateSnippetTests(::grpc::ServerContext* context, const ::testsgen::SnippetRequest* request, ::grpc::ServerWriter< ::testsgen::TestsResponse>* writer);
    virtual ::grpc::Status GenerateProjectTests(::grpc::ServerContext* context, const ::testsgen::ProjectRequest* request, ::grpc::ServerWriter< ::testsgen::TestsResponse>* writer);
    virtual ::grpc::Status GenerateFileTests(::grpc::ServerContext* context, const ::testsgen::FileRequest* request, ::grpc::ServerWriter< ::testsgen::TestsResponse>* writer);
    virtual ::grpc::Status GenerateFunctionTests(::grpc::ServerContext* context, const ::testsgen::FunctionRequest* request, ::grpc::ServerWriter< ::testsgen::TestsResponse>* writer);
    virtual ::grpc::Status GenerateClassTests(::grpc::ServerContext* context, const ::testsgen::ClassRequest* request, ::grpc::ServerWriter< ::testsgen::TestsResponse>* writer);
    virtual ::grpc::Status GenerateFolderTests(::grpc::ServerContext* context, const ::testsgen::FolderRequest* request, ::grpc::ServerWriter< ::testsgen::TestsResponse>* writer);
    virtual ::grpc::Status GenerateLineTests(::grpc::ServerContext* context, const ::testsgen::LineRequest* request, ::grpc::ServerWriter< ::testsgen::TestsResponse>* writer);
    virtual ::grpc::Status GenerateAssertionFailTests(::grpc::ServerContext* context, const ::testsgen::AssertionRequest* request, ::grpc::ServerWriter< ::testsgen::TestsResponse>* writer);
    virtual ::grpc::Status GeneratePredicateTests(::grpc::ServerContext* context, const ::testsgen::PredicateRequest* request, ::grpc::ServerWriter< ::testsgen::TestsResponse>* writer);
    virtual ::grpc::Status CreateTestsCoverageAndResult(::grpc::ServerContext* context, const ::testsgen::CoverageAndResultsRequest* request, ::grpc::ServerWriter< ::testsgen::CoverageAndResultsResponse>* writer);
    virtual ::grpc::Status GenerateProjectStubs(::grpc::ServerContext* context, const ::testsgen::ProjectRequest* request, ::grpc::ServerWriter< ::testsgen::StubsResponse>* writer);
    virtual ::grpc::Status PrintModulesContent(::grpc::ServerContext* context, const ::testsgen::ProjectContext* request, ::testsgen::DummyResponse* response);
    virtual ::grpc::Status ConfigureProject(::grpc::ServerContext* context, const ::testsgen::ProjectConfigRequest* request, ::grpc::ServerWriter< ::testsgen::ProjectConfigResponse>* writer);
    virtual ::grpc::Status GetSourceCode(::grpc::ServerContext* context, const ::testsgen::SourceInfo* request, ::testsgen::SourceCode* response);
    virtual ::grpc::Status GetProjectTargets(::grpc::ServerContext* context, const ::testsgen::ProjectTargetsRequest* request, ::testsgen::ProjectTargetsResponse* response);
    virtual ::grpc::Status GetFileTargets(::grpc::ServerContext* context, const ::testsgen::FileTargetsRequest* request, ::testsgen::FileTargetsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Handshake() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::testsgen::VersionInfo* /*request*/, ::testsgen::VersionInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandshake(::grpc::ServerContext* context, ::testsgen::VersionInfo* request, ::grpc::ServerAsyncResponseWriter< ::testsgen::VersionInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Heartbeat() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::testsgen::DummyRequest* request, ::grpc::ServerAsyncResponseWriter< ::testsgen::HeartbeatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenLogChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OpenLogChannel() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_OpenLogChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenLogChannel(::grpc::ServerContext* /*context*/, const ::testsgen::LogChannelRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::LogEntry>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenLogChannel(::grpc::ServerContext* context, ::testsgen::LogChannelRequest* request, ::grpc::ServerAsyncWriter< ::testsgen::LogEntry>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseLogChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseLogChannel() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CloseLogChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseLogChannel(::grpc::ServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseLogChannel(::grpc::ServerContext* context, ::testsgen::DummyRequest* request, ::grpc::ServerAsyncResponseWriter< ::testsgen::DummyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenGTestChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OpenGTestChannel() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_OpenGTestChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenGTestChannel(::grpc::ServerContext* /*context*/, const ::testsgen::LogChannelRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::LogEntry>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenGTestChannel(::grpc::ServerContext* context, ::testsgen::LogChannelRequest* request, ::grpc::ServerAsyncWriter< ::testsgen::LogEntry>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseGTestChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseGTestChannel() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CloseGTestChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseGTestChannel(::grpc::ServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseGTestChannel(::grpc::ServerContext* context, ::testsgen::DummyRequest* request, ::grpc::ServerAsyncResponseWriter< ::testsgen::DummyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterClient() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* /*context*/, const ::testsgen::RegisterClientRequest* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterClient(::grpc::ServerContext* context, ::testsgen::RegisterClientRequest* request, ::grpc::ServerAsyncResponseWriter< ::testsgen::DummyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFunctionReturnType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFunctionReturnType() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetFunctionReturnType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFunctionReturnType(::grpc::ServerContext* /*context*/, const ::testsgen::FunctionRequest* /*request*/, ::testsgen::FunctionTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFunctionReturnType(::grpc::ServerContext* context, ::testsgen::FunctionRequest* request, ::grpc::ServerAsyncResponseWriter< ::testsgen::FunctionTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateSnippetTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenerateSnippetTests() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GenerateSnippetTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateSnippetTests(::grpc::ServerContext* /*context*/, const ::testsgen::SnippetRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateSnippetTests(::grpc::ServerContext* context, ::testsgen::SnippetRequest* request, ::grpc::ServerAsyncWriter< ::testsgen::TestsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateProjectTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenerateProjectTests() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GenerateProjectTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateProjectTests(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateProjectTests(::grpc::ServerContext* context, ::testsgen::ProjectRequest* request, ::grpc::ServerAsyncWriter< ::testsgen::TestsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateFileTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenerateFileTests() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GenerateFileTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateFileTests(::grpc::ServerContext* /*context*/, const ::testsgen::FileRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateFileTests(::grpc::ServerContext* context, ::testsgen::FileRequest* request, ::grpc::ServerAsyncWriter< ::testsgen::TestsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(10, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateFunctionTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenerateFunctionTests() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GenerateFunctionTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateFunctionTests(::grpc::ServerContext* /*context*/, const ::testsgen::FunctionRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateFunctionTests(::grpc::ServerContext* context, ::testsgen::FunctionRequest* request, ::grpc::ServerAsyncWriter< ::testsgen::TestsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(11, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateClassTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenerateClassTests() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GenerateClassTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateClassTests(::grpc::ServerContext* /*context*/, const ::testsgen::ClassRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateClassTests(::grpc::ServerContext* context, ::testsgen::ClassRequest* request, ::grpc::ServerAsyncWriter< ::testsgen::TestsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(12, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateFolderTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenerateFolderTests() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GenerateFolderTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateFolderTests(::grpc::ServerContext* /*context*/, const ::testsgen::FolderRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateFolderTests(::grpc::ServerContext* context, ::testsgen::FolderRequest* request, ::grpc::ServerAsyncWriter< ::testsgen::TestsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(13, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateLineTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenerateLineTests() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GenerateLineTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateLineTests(::grpc::ServerContext* /*context*/, const ::testsgen::LineRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateLineTests(::grpc::ServerContext* context, ::testsgen::LineRequest* request, ::grpc::ServerAsyncWriter< ::testsgen::TestsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(14, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateAssertionFailTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenerateAssertionFailTests() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GenerateAssertionFailTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAssertionFailTests(::grpc::ServerContext* /*context*/, const ::testsgen::AssertionRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateAssertionFailTests(::grpc::ServerContext* context, ::testsgen::AssertionRequest* request, ::grpc::ServerAsyncWriter< ::testsgen::TestsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(15, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GeneratePredicateTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GeneratePredicateTests() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GeneratePredicateTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneratePredicateTests(::grpc::ServerContext* /*context*/, const ::testsgen::PredicateRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGeneratePredicateTests(::grpc::ServerContext* context, ::testsgen::PredicateRequest* request, ::grpc::ServerAsyncWriter< ::testsgen::TestsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(16, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTestsCoverageAndResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateTestsCoverageAndResult() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_CreateTestsCoverageAndResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTestsCoverageAndResult(::grpc::ServerContext* /*context*/, const ::testsgen::CoverageAndResultsRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::CoverageAndResultsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTestsCoverageAndResult(::grpc::ServerContext* context, ::testsgen::CoverageAndResultsRequest* request, ::grpc::ServerAsyncWriter< ::testsgen::CoverageAndResultsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(17, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateProjectStubs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenerateProjectStubs() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_GenerateProjectStubs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateProjectStubs(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::StubsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateProjectStubs(::grpc::ServerContext* context, ::testsgen::ProjectRequest* request, ::grpc::ServerAsyncWriter< ::testsgen::StubsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(18, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PrintModulesContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PrintModulesContent() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_PrintModulesContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintModulesContent(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectContext* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrintModulesContent(::grpc::ServerContext* context, ::testsgen::ProjectContext* request, ::grpc::ServerAsyncResponseWriter< ::testsgen::DummyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConfigureProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConfigureProject() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_ConfigureProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureProject(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectConfigRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::ProjectConfigResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfigureProject(::grpc::ServerContext* context, ::testsgen::ProjectConfigRequest* request, ::grpc::ServerAsyncWriter< ::testsgen::ProjectConfigResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(20, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSourceCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSourceCode() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_GetSourceCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSourceCode(::grpc::ServerContext* /*context*/, const ::testsgen::SourceInfo* /*request*/, ::testsgen::SourceCode* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSourceCode(::grpc::ServerContext* context, ::testsgen::SourceInfo* request, ::grpc::ServerAsyncResponseWriter< ::testsgen::SourceCode>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProjectTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProjectTargets() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_GetProjectTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProjectTargets(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectTargetsRequest* /*request*/, ::testsgen::ProjectTargetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProjectTargets(::grpc::ServerContext* context, ::testsgen::ProjectTargetsRequest* request, ::grpc::ServerAsyncResponseWriter< ::testsgen::ProjectTargetsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFileTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFileTargets() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_GetFileTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileTargets(::grpc::ServerContext* /*context*/, const ::testsgen::FileTargetsRequest* /*request*/, ::testsgen::FileTargetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileTargets(::grpc::ServerContext* context, ::testsgen::FileTargetsRequest* request, ::grpc::ServerAsyncResponseWriter< ::testsgen::FileTargetsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Handshake<WithAsyncMethod_Heartbeat<WithAsyncMethod_OpenLogChannel<WithAsyncMethod_CloseLogChannel<WithAsyncMethod_OpenGTestChannel<WithAsyncMethod_CloseGTestChannel<WithAsyncMethod_RegisterClient<WithAsyncMethod_GetFunctionReturnType<WithAsyncMethod_GenerateSnippetTests<WithAsyncMethod_GenerateProjectTests<WithAsyncMethod_GenerateFileTests<WithAsyncMethod_GenerateFunctionTests<WithAsyncMethod_GenerateClassTests<WithAsyncMethod_GenerateFolderTests<WithAsyncMethod_GenerateLineTests<WithAsyncMethod_GenerateAssertionFailTests<WithAsyncMethod_GeneratePredicateTests<WithAsyncMethod_CreateTestsCoverageAndResult<WithAsyncMethod_GenerateProjectStubs<WithAsyncMethod_PrintModulesContent<WithAsyncMethod_ConfigureProject<WithAsyncMethod_GetSourceCode<WithAsyncMethod_GetProjectTargets<WithAsyncMethod_GetFileTargets<Service > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Handshake() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::testsgen::VersionInfo, ::testsgen::VersionInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::VersionInfo* request, ::testsgen::VersionInfo* response) { return this->Handshake(context, request, response); }));}
    void SetMessageAllocatorFor_Handshake(
        ::grpc::MessageAllocator< ::testsgen::VersionInfo, ::testsgen::VersionInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::testsgen::VersionInfo, ::testsgen::VersionInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::testsgen::VersionInfo* /*request*/, ::testsgen::VersionInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Handshake(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::VersionInfo* /*request*/, ::testsgen::VersionInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Heartbeat() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::testsgen::DummyRequest, ::testsgen::HeartbeatResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::DummyRequest* request, ::testsgen::HeartbeatResponse* response) { return this->Heartbeat(context, request, response); }));}
    void SetMessageAllocatorFor_Heartbeat(
        ::grpc::MessageAllocator< ::testsgen::DummyRequest, ::testsgen::HeartbeatResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::testsgen::DummyRequest, ::testsgen::HeartbeatResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::HeartbeatResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OpenLogChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OpenLogChannel() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::testsgen::LogChannelRequest, ::testsgen::LogEntry>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::LogChannelRequest* request) { return this->OpenLogChannel(context, request); }));
    }
    ~WithCallbackMethod_OpenLogChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenLogChannel(::grpc::ServerContext* /*context*/, const ::testsgen::LogChannelRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::LogEntry>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::testsgen::LogEntry>* OpenLogChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::LogChannelRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CloseLogChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CloseLogChannel() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::testsgen::DummyRequest, ::testsgen::DummyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::DummyRequest* request, ::testsgen::DummyResponse* response) { return this->CloseLogChannel(context, request, response); }));}
    void SetMessageAllocatorFor_CloseLogChannel(
        ::grpc::MessageAllocator< ::testsgen::DummyRequest, ::testsgen::DummyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::testsgen::DummyRequest, ::testsgen::DummyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CloseLogChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseLogChannel(::grpc::ServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseLogChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::DummyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OpenGTestChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OpenGTestChannel() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::testsgen::LogChannelRequest, ::testsgen::LogEntry>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::LogChannelRequest* request) { return this->OpenGTestChannel(context, request); }));
    }
    ~WithCallbackMethod_OpenGTestChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenGTestChannel(::grpc::ServerContext* /*context*/, const ::testsgen::LogChannelRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::LogEntry>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::testsgen::LogEntry>* OpenGTestChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::LogChannelRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CloseGTestChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CloseGTestChannel() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::testsgen::DummyRequest, ::testsgen::DummyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::DummyRequest* request, ::testsgen::DummyResponse* response) { return this->CloseGTestChannel(context, request, response); }));}
    void SetMessageAllocatorFor_CloseGTestChannel(
        ::grpc::MessageAllocator< ::testsgen::DummyRequest, ::testsgen::DummyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::testsgen::DummyRequest, ::testsgen::DummyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CloseGTestChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseGTestChannel(::grpc::ServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseGTestChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::DummyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterClient() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::testsgen::RegisterClientRequest, ::testsgen::DummyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::RegisterClientRequest* request, ::testsgen::DummyResponse* response) { return this->RegisterClient(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterClient(
        ::grpc::MessageAllocator< ::testsgen::RegisterClientRequest, ::testsgen::DummyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::testsgen::RegisterClientRequest, ::testsgen::DummyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* /*context*/, const ::testsgen::RegisterClientRequest* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterClient(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::RegisterClientRequest* /*request*/, ::testsgen::DummyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFunctionReturnType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFunctionReturnType() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::testsgen::FunctionRequest, ::testsgen::FunctionTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::FunctionRequest* request, ::testsgen::FunctionTypeResponse* response) { return this->GetFunctionReturnType(context, request, response); }));}
    void SetMessageAllocatorFor_GetFunctionReturnType(
        ::grpc::MessageAllocator< ::testsgen::FunctionRequest, ::testsgen::FunctionTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::testsgen::FunctionRequest, ::testsgen::FunctionTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFunctionReturnType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFunctionReturnType(::grpc::ServerContext* /*context*/, const ::testsgen::FunctionRequest* /*request*/, ::testsgen::FunctionTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFunctionReturnType(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::FunctionRequest* /*request*/, ::testsgen::FunctionTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GenerateSnippetTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GenerateSnippetTests() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::testsgen::SnippetRequest, ::testsgen::TestsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::SnippetRequest* request) { return this->GenerateSnippetTests(context, request); }));
    }
    ~WithCallbackMethod_GenerateSnippetTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateSnippetTests(::grpc::ServerContext* /*context*/, const ::testsgen::SnippetRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::testsgen::TestsResponse>* GenerateSnippetTests(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::SnippetRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GenerateProjectTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GenerateProjectTests() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackServerStreamingHandler< ::testsgen::ProjectRequest, ::testsgen::TestsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::ProjectRequest* request) { return this->GenerateProjectTests(context, request); }));
    }
    ~WithCallbackMethod_GenerateProjectTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateProjectTests(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::testsgen::TestsResponse>* GenerateProjectTests(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::ProjectRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GenerateFileTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GenerateFileTests() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackServerStreamingHandler< ::testsgen::FileRequest, ::testsgen::TestsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::FileRequest* request) { return this->GenerateFileTests(context, request); }));
    }
    ~WithCallbackMethod_GenerateFileTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateFileTests(::grpc::ServerContext* /*context*/, const ::testsgen::FileRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::testsgen::TestsResponse>* GenerateFileTests(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::FileRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GenerateFunctionTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GenerateFunctionTests() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackServerStreamingHandler< ::testsgen::FunctionRequest, ::testsgen::TestsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::FunctionRequest* request) { return this->GenerateFunctionTests(context, request); }));
    }
    ~WithCallbackMethod_GenerateFunctionTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateFunctionTests(::grpc::ServerContext* /*context*/, const ::testsgen::FunctionRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::testsgen::TestsResponse>* GenerateFunctionTests(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::FunctionRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GenerateClassTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GenerateClassTests() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackServerStreamingHandler< ::testsgen::ClassRequest, ::testsgen::TestsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::ClassRequest* request) { return this->GenerateClassTests(context, request); }));
    }
    ~WithCallbackMethod_GenerateClassTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateClassTests(::grpc::ServerContext* /*context*/, const ::testsgen::ClassRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::testsgen::TestsResponse>* GenerateClassTests(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::ClassRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GenerateFolderTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GenerateFolderTests() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackServerStreamingHandler< ::testsgen::FolderRequest, ::testsgen::TestsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::FolderRequest* request) { return this->GenerateFolderTests(context, request); }));
    }
    ~WithCallbackMethod_GenerateFolderTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateFolderTests(::grpc::ServerContext* /*context*/, const ::testsgen::FolderRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::testsgen::TestsResponse>* GenerateFolderTests(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::FolderRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GenerateLineTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GenerateLineTests() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackServerStreamingHandler< ::testsgen::LineRequest, ::testsgen::TestsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::LineRequest* request) { return this->GenerateLineTests(context, request); }));
    }
    ~WithCallbackMethod_GenerateLineTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateLineTests(::grpc::ServerContext* /*context*/, const ::testsgen::LineRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::testsgen::TestsResponse>* GenerateLineTests(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::LineRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GenerateAssertionFailTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GenerateAssertionFailTests() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackServerStreamingHandler< ::testsgen::AssertionRequest, ::testsgen::TestsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::AssertionRequest* request) { return this->GenerateAssertionFailTests(context, request); }));
    }
    ~WithCallbackMethod_GenerateAssertionFailTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAssertionFailTests(::grpc::ServerContext* /*context*/, const ::testsgen::AssertionRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::testsgen::TestsResponse>* GenerateAssertionFailTests(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::AssertionRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GeneratePredicateTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GeneratePredicateTests() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackServerStreamingHandler< ::testsgen::PredicateRequest, ::testsgen::TestsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::PredicateRequest* request) { return this->GeneratePredicateTests(context, request); }));
    }
    ~WithCallbackMethod_GeneratePredicateTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneratePredicateTests(::grpc::ServerContext* /*context*/, const ::testsgen::PredicateRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::testsgen::TestsResponse>* GeneratePredicateTests(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::PredicateRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateTestsCoverageAndResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateTestsCoverageAndResult() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackServerStreamingHandler< ::testsgen::CoverageAndResultsRequest, ::testsgen::CoverageAndResultsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::CoverageAndResultsRequest* request) { return this->CreateTestsCoverageAndResult(context, request); }));
    }
    ~WithCallbackMethod_CreateTestsCoverageAndResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTestsCoverageAndResult(::grpc::ServerContext* /*context*/, const ::testsgen::CoverageAndResultsRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::CoverageAndResultsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::testsgen::CoverageAndResultsResponse>* CreateTestsCoverageAndResult(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::CoverageAndResultsRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GenerateProjectStubs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GenerateProjectStubs() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackServerStreamingHandler< ::testsgen::ProjectRequest, ::testsgen::StubsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::ProjectRequest* request) { return this->GenerateProjectStubs(context, request); }));
    }
    ~WithCallbackMethod_GenerateProjectStubs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateProjectStubs(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::StubsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::testsgen::StubsResponse>* GenerateProjectStubs(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::ProjectRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PrintModulesContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PrintModulesContent() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::testsgen::ProjectContext, ::testsgen::DummyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::ProjectContext* request, ::testsgen::DummyResponse* response) { return this->PrintModulesContent(context, request, response); }));}
    void SetMessageAllocatorFor_PrintModulesContent(
        ::grpc::MessageAllocator< ::testsgen::ProjectContext, ::testsgen::DummyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::testsgen::ProjectContext, ::testsgen::DummyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PrintModulesContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintModulesContent(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectContext* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PrintModulesContent(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::ProjectContext* /*request*/, ::testsgen::DummyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConfigureProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConfigureProject() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackServerStreamingHandler< ::testsgen::ProjectConfigRequest, ::testsgen::ProjectConfigResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::ProjectConfigRequest* request) { return this->ConfigureProject(context, request); }));
    }
    ~WithCallbackMethod_ConfigureProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureProject(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectConfigRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::ProjectConfigResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::testsgen::ProjectConfigResponse>* ConfigureProject(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::ProjectConfigRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSourceCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSourceCode() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::testsgen::SourceInfo, ::testsgen::SourceCode>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::SourceInfo* request, ::testsgen::SourceCode* response) { return this->GetSourceCode(context, request, response); }));}
    void SetMessageAllocatorFor_GetSourceCode(
        ::grpc::MessageAllocator< ::testsgen::SourceInfo, ::testsgen::SourceCode>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::testsgen::SourceInfo, ::testsgen::SourceCode>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSourceCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSourceCode(::grpc::ServerContext* /*context*/, const ::testsgen::SourceInfo* /*request*/, ::testsgen::SourceCode* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSourceCode(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::SourceInfo* /*request*/, ::testsgen::SourceCode* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetProjectTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetProjectTargets() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::testsgen::ProjectTargetsRequest, ::testsgen::ProjectTargetsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::ProjectTargetsRequest* request, ::testsgen::ProjectTargetsResponse* response) { return this->GetProjectTargets(context, request, response); }));}
    void SetMessageAllocatorFor_GetProjectTargets(
        ::grpc::MessageAllocator< ::testsgen::ProjectTargetsRequest, ::testsgen::ProjectTargetsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::testsgen::ProjectTargetsRequest, ::testsgen::ProjectTargetsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetProjectTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProjectTargets(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectTargetsRequest* /*request*/, ::testsgen::ProjectTargetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProjectTargets(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::ProjectTargetsRequest* /*request*/, ::testsgen::ProjectTargetsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFileTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFileTargets() {
      ::grpc::Service::MarkMethodCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::testsgen::FileTargetsRequest, ::testsgen::FileTargetsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testsgen::FileTargetsRequest* request, ::testsgen::FileTargetsResponse* response) { return this->GetFileTargets(context, request, response); }));}
    void SetMessageAllocatorFor_GetFileTargets(
        ::grpc::MessageAllocator< ::testsgen::FileTargetsRequest, ::testsgen::FileTargetsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::testsgen::FileTargetsRequest, ::testsgen::FileTargetsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFileTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileTargets(::grpc::ServerContext* /*context*/, const ::testsgen::FileTargetsRequest* /*request*/, ::testsgen::FileTargetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFileTargets(
      ::grpc::CallbackServerContext* /*context*/, const ::testsgen::FileTargetsRequest* /*request*/, ::testsgen::FileTargetsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Handshake<WithCallbackMethod_Heartbeat<WithCallbackMethod_OpenLogChannel<WithCallbackMethod_CloseLogChannel<WithCallbackMethod_OpenGTestChannel<WithCallbackMethod_CloseGTestChannel<WithCallbackMethod_RegisterClient<WithCallbackMethod_GetFunctionReturnType<WithCallbackMethod_GenerateSnippetTests<WithCallbackMethod_GenerateProjectTests<WithCallbackMethod_GenerateFileTests<WithCallbackMethod_GenerateFunctionTests<WithCallbackMethod_GenerateClassTests<WithCallbackMethod_GenerateFolderTests<WithCallbackMethod_GenerateLineTests<WithCallbackMethod_GenerateAssertionFailTests<WithCallbackMethod_GeneratePredicateTests<WithCallbackMethod_CreateTestsCoverageAndResult<WithCallbackMethod_GenerateProjectStubs<WithCallbackMethod_PrintModulesContent<WithCallbackMethod_ConfigureProject<WithCallbackMethod_GetSourceCode<WithCallbackMethod_GetProjectTargets<WithCallbackMethod_GetFileTargets<Service > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Handshake() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::testsgen::VersionInfo* /*request*/, ::testsgen::VersionInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Heartbeat() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OpenLogChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OpenLogChannel() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_OpenLogChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenLogChannel(::grpc::ServerContext* /*context*/, const ::testsgen::LogChannelRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::LogEntry>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseLogChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseLogChannel() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CloseLogChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseLogChannel(::grpc::ServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OpenGTestChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OpenGTestChannel() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_OpenGTestChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenGTestChannel(::grpc::ServerContext* /*context*/, const ::testsgen::LogChannelRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::LogEntry>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseGTestChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseGTestChannel() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CloseGTestChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseGTestChannel(::grpc::ServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterClient() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* /*context*/, const ::testsgen::RegisterClientRequest* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFunctionReturnType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFunctionReturnType() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetFunctionReturnType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFunctionReturnType(::grpc::ServerContext* /*context*/, const ::testsgen::FunctionRequest* /*request*/, ::testsgen::FunctionTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateSnippetTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenerateSnippetTests() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GenerateSnippetTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateSnippetTests(::grpc::ServerContext* /*context*/, const ::testsgen::SnippetRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateProjectTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenerateProjectTests() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GenerateProjectTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateProjectTests(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateFileTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenerateFileTests() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GenerateFileTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateFileTests(::grpc::ServerContext* /*context*/, const ::testsgen::FileRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateFunctionTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenerateFunctionTests() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GenerateFunctionTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateFunctionTests(::grpc::ServerContext* /*context*/, const ::testsgen::FunctionRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateClassTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenerateClassTests() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GenerateClassTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateClassTests(::grpc::ServerContext* /*context*/, const ::testsgen::ClassRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateFolderTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenerateFolderTests() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GenerateFolderTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateFolderTests(::grpc::ServerContext* /*context*/, const ::testsgen::FolderRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateLineTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenerateLineTests() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GenerateLineTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateLineTests(::grpc::ServerContext* /*context*/, const ::testsgen::LineRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateAssertionFailTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenerateAssertionFailTests() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GenerateAssertionFailTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAssertionFailTests(::grpc::ServerContext* /*context*/, const ::testsgen::AssertionRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GeneratePredicateTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GeneratePredicateTests() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GeneratePredicateTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneratePredicateTests(::grpc::ServerContext* /*context*/, const ::testsgen::PredicateRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateTestsCoverageAndResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateTestsCoverageAndResult() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_CreateTestsCoverageAndResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTestsCoverageAndResult(::grpc::ServerContext* /*context*/, const ::testsgen::CoverageAndResultsRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::CoverageAndResultsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateProjectStubs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenerateProjectStubs() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_GenerateProjectStubs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateProjectStubs(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::StubsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PrintModulesContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PrintModulesContent() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_PrintModulesContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintModulesContent(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectContext* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConfigureProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConfigureProject() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_ConfigureProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureProject(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectConfigRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::ProjectConfigResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSourceCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSourceCode() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_GetSourceCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSourceCode(::grpc::ServerContext* /*context*/, const ::testsgen::SourceInfo* /*request*/, ::testsgen::SourceCode* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProjectTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProjectTargets() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_GetProjectTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProjectTargets(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectTargetsRequest* /*request*/, ::testsgen::ProjectTargetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFileTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFileTargets() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_GetFileTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileTargets(::grpc::ServerContext* /*context*/, const ::testsgen::FileTargetsRequest* /*request*/, ::testsgen::FileTargetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Handshake() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::testsgen::VersionInfo* /*request*/, ::testsgen::VersionInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandshake(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Heartbeat() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenLogChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OpenLogChannel() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_OpenLogChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenLogChannel(::grpc::ServerContext* /*context*/, const ::testsgen::LogChannelRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::LogEntry>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenLogChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseLogChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseLogChannel() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CloseLogChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseLogChannel(::grpc::ServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseLogChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenGTestChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OpenGTestChannel() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_OpenGTestChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenGTestChannel(::grpc::ServerContext* /*context*/, const ::testsgen::LogChannelRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::LogEntry>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenGTestChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseGTestChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseGTestChannel() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CloseGTestChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseGTestChannel(::grpc::ServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseGTestChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterClient() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* /*context*/, const ::testsgen::RegisterClientRequest* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterClient(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFunctionReturnType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFunctionReturnType() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetFunctionReturnType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFunctionReturnType(::grpc::ServerContext* /*context*/, const ::testsgen::FunctionRequest* /*request*/, ::testsgen::FunctionTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFunctionReturnType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateSnippetTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenerateSnippetTests() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GenerateSnippetTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateSnippetTests(::grpc::ServerContext* /*context*/, const ::testsgen::SnippetRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateSnippetTests(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateProjectTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenerateProjectTests() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GenerateProjectTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateProjectTests(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateProjectTests(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateFileTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenerateFileTests() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GenerateFileTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateFileTests(::grpc::ServerContext* /*context*/, const ::testsgen::FileRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateFileTests(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(10, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateFunctionTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenerateFunctionTests() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GenerateFunctionTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateFunctionTests(::grpc::ServerContext* /*context*/, const ::testsgen::FunctionRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateFunctionTests(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(11, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateClassTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenerateClassTests() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GenerateClassTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateClassTests(::grpc::ServerContext* /*context*/, const ::testsgen::ClassRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateClassTests(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(12, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateFolderTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenerateFolderTests() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GenerateFolderTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateFolderTests(::grpc::ServerContext* /*context*/, const ::testsgen::FolderRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateFolderTests(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(13, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateLineTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenerateLineTests() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_GenerateLineTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateLineTests(::grpc::ServerContext* /*context*/, const ::testsgen::LineRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateLineTests(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(14, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateAssertionFailTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenerateAssertionFailTests() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GenerateAssertionFailTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAssertionFailTests(::grpc::ServerContext* /*context*/, const ::testsgen::AssertionRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateAssertionFailTests(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(15, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GeneratePredicateTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GeneratePredicateTests() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_GeneratePredicateTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneratePredicateTests(::grpc::ServerContext* /*context*/, const ::testsgen::PredicateRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGeneratePredicateTests(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(16, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateTestsCoverageAndResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateTestsCoverageAndResult() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_CreateTestsCoverageAndResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTestsCoverageAndResult(::grpc::ServerContext* /*context*/, const ::testsgen::CoverageAndResultsRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::CoverageAndResultsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTestsCoverageAndResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(17, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateProjectStubs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenerateProjectStubs() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_GenerateProjectStubs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateProjectStubs(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::StubsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateProjectStubs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(18, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PrintModulesContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PrintModulesContent() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_PrintModulesContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintModulesContent(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectContext* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrintModulesContent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConfigureProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConfigureProject() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_ConfigureProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureProject(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectConfigRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::ProjectConfigResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfigureProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(20, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSourceCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSourceCode() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_GetSourceCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSourceCode(::grpc::ServerContext* /*context*/, const ::testsgen::SourceInfo* /*request*/, ::testsgen::SourceCode* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSourceCode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProjectTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProjectTargets() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_GetProjectTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProjectTargets(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectTargetsRequest* /*request*/, ::testsgen::ProjectTargetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProjectTargets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFileTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFileTargets() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_GetFileTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileTargets(::grpc::ServerContext* /*context*/, const ::testsgen::FileTargetsRequest* /*request*/, ::testsgen::FileTargetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileTargets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Handshake() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Handshake(context, request, response); }));
    }
    ~WithRawCallbackMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::testsgen::VersionInfo* /*request*/, ::testsgen::VersionInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Handshake(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Heartbeat() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Heartbeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OpenLogChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OpenLogChannel() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->OpenLogChannel(context, request); }));
    }
    ~WithRawCallbackMethod_OpenLogChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenLogChannel(::grpc::ServerContext* /*context*/, const ::testsgen::LogChannelRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::LogEntry>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* OpenLogChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CloseLogChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CloseLogChannel() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseLogChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_CloseLogChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseLogChannel(::grpc::ServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseLogChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OpenGTestChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OpenGTestChannel() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->OpenGTestChannel(context, request); }));
    }
    ~WithRawCallbackMethod_OpenGTestChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenGTestChannel(::grpc::ServerContext* /*context*/, const ::testsgen::LogChannelRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::LogEntry>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* OpenGTestChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CloseGTestChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CloseGTestChannel() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseGTestChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_CloseGTestChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseGTestChannel(::grpc::ServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseGTestChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterClient() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterClient(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* /*context*/, const ::testsgen::RegisterClientRequest* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterClient(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFunctionReturnType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFunctionReturnType() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFunctionReturnType(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFunctionReturnType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFunctionReturnType(::grpc::ServerContext* /*context*/, const ::testsgen::FunctionRequest* /*request*/, ::testsgen::FunctionTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFunctionReturnType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GenerateSnippetTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GenerateSnippetTests() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GenerateSnippetTests(context, request); }));
    }
    ~WithRawCallbackMethod_GenerateSnippetTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateSnippetTests(::grpc::ServerContext* /*context*/, const ::testsgen::SnippetRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GenerateSnippetTests(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GenerateProjectTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GenerateProjectTests() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GenerateProjectTests(context, request); }));
    }
    ~WithRawCallbackMethod_GenerateProjectTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateProjectTests(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GenerateProjectTests(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GenerateFileTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GenerateFileTests() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GenerateFileTests(context, request); }));
    }
    ~WithRawCallbackMethod_GenerateFileTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateFileTests(::grpc::ServerContext* /*context*/, const ::testsgen::FileRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GenerateFileTests(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GenerateFunctionTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GenerateFunctionTests() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GenerateFunctionTests(context, request); }));
    }
    ~WithRawCallbackMethod_GenerateFunctionTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateFunctionTests(::grpc::ServerContext* /*context*/, const ::testsgen::FunctionRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GenerateFunctionTests(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GenerateClassTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GenerateClassTests() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GenerateClassTests(context, request); }));
    }
    ~WithRawCallbackMethod_GenerateClassTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateClassTests(::grpc::ServerContext* /*context*/, const ::testsgen::ClassRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GenerateClassTests(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GenerateFolderTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GenerateFolderTests() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GenerateFolderTests(context, request); }));
    }
    ~WithRawCallbackMethod_GenerateFolderTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateFolderTests(::grpc::ServerContext* /*context*/, const ::testsgen::FolderRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GenerateFolderTests(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GenerateLineTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GenerateLineTests() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GenerateLineTests(context, request); }));
    }
    ~WithRawCallbackMethod_GenerateLineTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateLineTests(::grpc::ServerContext* /*context*/, const ::testsgen::LineRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GenerateLineTests(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GenerateAssertionFailTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GenerateAssertionFailTests() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GenerateAssertionFailTests(context, request); }));
    }
    ~WithRawCallbackMethod_GenerateAssertionFailTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAssertionFailTests(::grpc::ServerContext* /*context*/, const ::testsgen::AssertionRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GenerateAssertionFailTests(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GeneratePredicateTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GeneratePredicateTests() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GeneratePredicateTests(context, request); }));
    }
    ~WithRawCallbackMethod_GeneratePredicateTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneratePredicateTests(::grpc::ServerContext* /*context*/, const ::testsgen::PredicateRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GeneratePredicateTests(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateTestsCoverageAndResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateTestsCoverageAndResult() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->CreateTestsCoverageAndResult(context, request); }));
    }
    ~WithRawCallbackMethod_CreateTestsCoverageAndResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTestsCoverageAndResult(::grpc::ServerContext* /*context*/, const ::testsgen::CoverageAndResultsRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::CoverageAndResultsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* CreateTestsCoverageAndResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GenerateProjectStubs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GenerateProjectStubs() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GenerateProjectStubs(context, request); }));
    }
    ~WithRawCallbackMethod_GenerateProjectStubs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateProjectStubs(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::StubsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GenerateProjectStubs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PrintModulesContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PrintModulesContent() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PrintModulesContent(context, request, response); }));
    }
    ~WithRawCallbackMethod_PrintModulesContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintModulesContent(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectContext* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PrintModulesContent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConfigureProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConfigureProject() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ConfigureProject(context, request); }));
    }
    ~WithRawCallbackMethod_ConfigureProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureProject(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectConfigRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::ProjectConfigResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ConfigureProject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSourceCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSourceCode() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSourceCode(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSourceCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSourceCode(::grpc::ServerContext* /*context*/, const ::testsgen::SourceInfo* /*request*/, ::testsgen::SourceCode* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSourceCode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetProjectTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetProjectTargets() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetProjectTargets(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetProjectTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProjectTargets(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectTargetsRequest* /*request*/, ::testsgen::ProjectTargetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProjectTargets(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFileTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFileTargets() {
      ::grpc::Service::MarkMethodRawCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFileTargets(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFileTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileTargets(::grpc::ServerContext* /*context*/, const ::testsgen::FileTargetsRequest* /*request*/, ::testsgen::FileTargetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFileTargets(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Handshake() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::testsgen::VersionInfo, ::testsgen::VersionInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::testsgen::VersionInfo, ::testsgen::VersionInfo>* streamer) {
                       return this->StreamedHandshake(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::testsgen::VersionInfo* /*request*/, ::testsgen::VersionInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandshake(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::testsgen::VersionInfo,::testsgen::VersionInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Heartbeat() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::testsgen::DummyRequest, ::testsgen::HeartbeatResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::testsgen::DummyRequest, ::testsgen::HeartbeatResponse>* streamer) {
                       return this->StreamedHeartbeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHeartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::testsgen::DummyRequest,::testsgen::HeartbeatResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseLogChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseLogChannel() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::testsgen::DummyRequest, ::testsgen::DummyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::testsgen::DummyRequest, ::testsgen::DummyResponse>* streamer) {
                       return this->StreamedCloseLogChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CloseLogChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseLogChannel(::grpc::ServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseLogChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::testsgen::DummyRequest,::testsgen::DummyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseGTestChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseGTestChannel() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::testsgen::DummyRequest, ::testsgen::DummyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::testsgen::DummyRequest, ::testsgen::DummyResponse>* streamer) {
                       return this->StreamedCloseGTestChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CloseGTestChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseGTestChannel(::grpc::ServerContext* /*context*/, const ::testsgen::DummyRequest* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseGTestChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::testsgen::DummyRequest,::testsgen::DummyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterClient() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::testsgen::RegisterClientRequest, ::testsgen::DummyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::testsgen::RegisterClientRequest, ::testsgen::DummyResponse>* streamer) {
                       return this->StreamedRegisterClient(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* /*context*/, const ::testsgen::RegisterClientRequest* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterClient(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::testsgen::RegisterClientRequest,::testsgen::DummyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFunctionReturnType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFunctionReturnType() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::testsgen::FunctionRequest, ::testsgen::FunctionTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::testsgen::FunctionRequest, ::testsgen::FunctionTypeResponse>* streamer) {
                       return this->StreamedGetFunctionReturnType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFunctionReturnType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFunctionReturnType(::grpc::ServerContext* /*context*/, const ::testsgen::FunctionRequest* /*request*/, ::testsgen::FunctionTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFunctionReturnType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::testsgen::FunctionRequest,::testsgen::FunctionTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PrintModulesContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PrintModulesContent() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::testsgen::ProjectContext, ::testsgen::DummyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::testsgen::ProjectContext, ::testsgen::DummyResponse>* streamer) {
                       return this->StreamedPrintModulesContent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PrintModulesContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PrintModulesContent(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectContext* /*request*/, ::testsgen::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrintModulesContent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::testsgen::ProjectContext,::testsgen::DummyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSourceCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSourceCode() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::testsgen::SourceInfo, ::testsgen::SourceCode>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::testsgen::SourceInfo, ::testsgen::SourceCode>* streamer) {
                       return this->StreamedGetSourceCode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSourceCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSourceCode(::grpc::ServerContext* /*context*/, const ::testsgen::SourceInfo* /*request*/, ::testsgen::SourceCode* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSourceCode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::testsgen::SourceInfo,::testsgen::SourceCode>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProjectTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProjectTargets() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::testsgen::ProjectTargetsRequest, ::testsgen::ProjectTargetsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::testsgen::ProjectTargetsRequest, ::testsgen::ProjectTargetsResponse>* streamer) {
                       return this->StreamedGetProjectTargets(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetProjectTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProjectTargets(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectTargetsRequest* /*request*/, ::testsgen::ProjectTargetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProjectTargets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::testsgen::ProjectTargetsRequest,::testsgen::ProjectTargetsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFileTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFileTargets() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::testsgen::FileTargetsRequest, ::testsgen::FileTargetsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::testsgen::FileTargetsRequest, ::testsgen::FileTargetsResponse>* streamer) {
                       return this->StreamedGetFileTargets(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFileTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFileTargets(::grpc::ServerContext* /*context*/, const ::testsgen::FileTargetsRequest* /*request*/, ::testsgen::FileTargetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFileTargets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::testsgen::FileTargetsRequest,::testsgen::FileTargetsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Handshake<WithStreamedUnaryMethod_Heartbeat<WithStreamedUnaryMethod_CloseLogChannel<WithStreamedUnaryMethod_CloseGTestChannel<WithStreamedUnaryMethod_RegisterClient<WithStreamedUnaryMethod_GetFunctionReturnType<WithStreamedUnaryMethod_PrintModulesContent<WithStreamedUnaryMethod_GetSourceCode<WithStreamedUnaryMethod_GetProjectTargets<WithStreamedUnaryMethod_GetFileTargets<Service > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_OpenLogChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_OpenLogChannel() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::testsgen::LogChannelRequest, ::testsgen::LogEntry>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::testsgen::LogChannelRequest, ::testsgen::LogEntry>* streamer) {
                       return this->StreamedOpenLogChannel(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_OpenLogChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OpenLogChannel(::grpc::ServerContext* /*context*/, const ::testsgen::LogChannelRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::LogEntry>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedOpenLogChannel(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::testsgen::LogChannelRequest,::testsgen::LogEntry>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_OpenGTestChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_OpenGTestChannel() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::testsgen::LogChannelRequest, ::testsgen::LogEntry>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::testsgen::LogChannelRequest, ::testsgen::LogEntry>* streamer) {
                       return this->StreamedOpenGTestChannel(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_OpenGTestChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OpenGTestChannel(::grpc::ServerContext* /*context*/, const ::testsgen::LogChannelRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::LogEntry>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedOpenGTestChannel(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::testsgen::LogChannelRequest,::testsgen::LogEntry>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GenerateSnippetTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GenerateSnippetTests() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::testsgen::SnippetRequest, ::testsgen::TestsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::testsgen::SnippetRequest, ::testsgen::TestsResponse>* streamer) {
                       return this->StreamedGenerateSnippetTests(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GenerateSnippetTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateSnippetTests(::grpc::ServerContext* /*context*/, const ::testsgen::SnippetRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGenerateSnippetTests(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::testsgen::SnippetRequest,::testsgen::TestsResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GenerateProjectTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GenerateProjectTests() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::testsgen::ProjectRequest, ::testsgen::TestsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::testsgen::ProjectRequest, ::testsgen::TestsResponse>* streamer) {
                       return this->StreamedGenerateProjectTests(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GenerateProjectTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateProjectTests(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGenerateProjectTests(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::testsgen::ProjectRequest,::testsgen::TestsResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GenerateFileTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GenerateFileTests() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::testsgen::FileRequest, ::testsgen::TestsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::testsgen::FileRequest, ::testsgen::TestsResponse>* streamer) {
                       return this->StreamedGenerateFileTests(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GenerateFileTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateFileTests(::grpc::ServerContext* /*context*/, const ::testsgen::FileRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGenerateFileTests(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::testsgen::FileRequest,::testsgen::TestsResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GenerateFunctionTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GenerateFunctionTests() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::testsgen::FunctionRequest, ::testsgen::TestsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::testsgen::FunctionRequest, ::testsgen::TestsResponse>* streamer) {
                       return this->StreamedGenerateFunctionTests(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GenerateFunctionTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateFunctionTests(::grpc::ServerContext* /*context*/, const ::testsgen::FunctionRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGenerateFunctionTests(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::testsgen::FunctionRequest,::testsgen::TestsResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GenerateClassTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GenerateClassTests() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::testsgen::ClassRequest, ::testsgen::TestsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::testsgen::ClassRequest, ::testsgen::TestsResponse>* streamer) {
                       return this->StreamedGenerateClassTests(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GenerateClassTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateClassTests(::grpc::ServerContext* /*context*/, const ::testsgen::ClassRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGenerateClassTests(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::testsgen::ClassRequest,::testsgen::TestsResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GenerateFolderTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GenerateFolderTests() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::testsgen::FolderRequest, ::testsgen::TestsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::testsgen::FolderRequest, ::testsgen::TestsResponse>* streamer) {
                       return this->StreamedGenerateFolderTests(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GenerateFolderTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateFolderTests(::grpc::ServerContext* /*context*/, const ::testsgen::FolderRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGenerateFolderTests(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::testsgen::FolderRequest,::testsgen::TestsResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GenerateLineTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GenerateLineTests() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::testsgen::LineRequest, ::testsgen::TestsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::testsgen::LineRequest, ::testsgen::TestsResponse>* streamer) {
                       return this->StreamedGenerateLineTests(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GenerateLineTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateLineTests(::grpc::ServerContext* /*context*/, const ::testsgen::LineRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGenerateLineTests(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::testsgen::LineRequest,::testsgen::TestsResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GenerateAssertionFailTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GenerateAssertionFailTests() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::testsgen::AssertionRequest, ::testsgen::TestsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::testsgen::AssertionRequest, ::testsgen::TestsResponse>* streamer) {
                       return this->StreamedGenerateAssertionFailTests(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GenerateAssertionFailTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateAssertionFailTests(::grpc::ServerContext* /*context*/, const ::testsgen::AssertionRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGenerateAssertionFailTests(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::testsgen::AssertionRequest,::testsgen::TestsResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GeneratePredicateTests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GeneratePredicateTests() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::testsgen::PredicateRequest, ::testsgen::TestsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::testsgen::PredicateRequest, ::testsgen::TestsResponse>* streamer) {
                       return this->StreamedGeneratePredicateTests(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GeneratePredicateTests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GeneratePredicateTests(::grpc::ServerContext* /*context*/, const ::testsgen::PredicateRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::TestsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGeneratePredicateTests(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::testsgen::PredicateRequest,::testsgen::TestsResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_CreateTestsCoverageAndResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_CreateTestsCoverageAndResult() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::testsgen::CoverageAndResultsRequest, ::testsgen::CoverageAndResultsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::testsgen::CoverageAndResultsRequest, ::testsgen::CoverageAndResultsResponse>* streamer) {
                       return this->StreamedCreateTestsCoverageAndResult(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_CreateTestsCoverageAndResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateTestsCoverageAndResult(::grpc::ServerContext* /*context*/, const ::testsgen::CoverageAndResultsRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::CoverageAndResultsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedCreateTestsCoverageAndResult(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::testsgen::CoverageAndResultsRequest,::testsgen::CoverageAndResultsResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GenerateProjectStubs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GenerateProjectStubs() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::testsgen::ProjectRequest, ::testsgen::StubsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::testsgen::ProjectRequest, ::testsgen::StubsResponse>* streamer) {
                       return this->StreamedGenerateProjectStubs(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GenerateProjectStubs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateProjectStubs(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::StubsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGenerateProjectStubs(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::testsgen::ProjectRequest,::testsgen::StubsResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ConfigureProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ConfigureProject() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::testsgen::ProjectConfigRequest, ::testsgen::ProjectConfigResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::testsgen::ProjectConfigRequest, ::testsgen::ProjectConfigResponse>* streamer) {
                       return this->StreamedConfigureProject(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ConfigureProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConfigureProject(::grpc::ServerContext* /*context*/, const ::testsgen::ProjectConfigRequest* /*request*/, ::grpc::ServerWriter< ::testsgen::ProjectConfigResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedConfigureProject(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::testsgen::ProjectConfigRequest,::testsgen::ProjectConfigResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_OpenLogChannel<WithSplitStreamingMethod_OpenGTestChannel<WithSplitStreamingMethod_GenerateSnippetTests<WithSplitStreamingMethod_GenerateProjectTests<WithSplitStreamingMethod_GenerateFileTests<WithSplitStreamingMethod_GenerateFunctionTests<WithSplitStreamingMethod_GenerateClassTests<WithSplitStreamingMethod_GenerateFolderTests<WithSplitStreamingMethod_GenerateLineTests<WithSplitStreamingMethod_GenerateAssertionFailTests<WithSplitStreamingMethod_GeneratePredicateTests<WithSplitStreamingMethod_CreateTestsCoverageAndResult<WithSplitStreamingMethod_GenerateProjectStubs<WithSplitStreamingMethod_ConfigureProject<Service > > > > > > > > > > > > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Handshake<WithStreamedUnaryMethod_Heartbeat<WithSplitStreamingMethod_OpenLogChannel<WithStreamedUnaryMethod_CloseLogChannel<WithSplitStreamingMethod_OpenGTestChannel<WithStreamedUnaryMethod_CloseGTestChannel<WithStreamedUnaryMethod_RegisterClient<WithStreamedUnaryMethod_GetFunctionReturnType<WithSplitStreamingMethod_GenerateSnippetTests<WithSplitStreamingMethod_GenerateProjectTests<WithSplitStreamingMethod_GenerateFileTests<WithSplitStreamingMethod_GenerateFunctionTests<WithSplitStreamingMethod_GenerateClassTests<WithSplitStreamingMethod_GenerateFolderTests<WithSplitStreamingMethod_GenerateLineTests<WithSplitStreamingMethod_GenerateAssertionFailTests<WithSplitStreamingMethod_GeneratePredicateTests<WithSplitStreamingMethod_CreateTestsCoverageAndResult<WithSplitStreamingMethod_GenerateProjectStubs<WithStreamedUnaryMethod_PrintModulesContent<WithSplitStreamingMethod_ConfigureProject<WithStreamedUnaryMethod_GetSourceCode<WithStreamedUnaryMethod_GetProjectTargets<WithStreamedUnaryMethod_GetFileTargets<Service > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace testsgen


#endif  // GRPC_testgen_2eproto__INCLUDED
