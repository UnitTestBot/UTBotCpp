// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: testgen.proto

#include "testgen.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace testsgen {
PROTOBUF_CONSTEXPR DummyRequest::DummyRequest(
    ::_pbi::ConstantInitialized) {}
struct DummyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DummyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DummyRequestDefaultTypeInternal() {}
  union {
    DummyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DummyRequestDefaultTypeInternal _DummyRequest_default_instance_;
PROTOBUF_CONSTEXPR DummyResponse::DummyResponse(
    ::_pbi::ConstantInitialized) {}
struct DummyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DummyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DummyResponseDefaultTypeInternal() {}
  union {
    DummyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DummyResponseDefaultTypeInternal _DummyResponse_default_instance_;
PROTOBUF_CONSTEXPR VersionInfo::VersionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VersionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionInfoDefaultTypeInternal() {}
  union {
    VersionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionInfoDefaultTypeInternal _VersionInfo_default_instance_;
PROTOBUF_CONSTEXPR RegisterClientRequest::RegisterClientRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterClientRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterClientRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterClientRequestDefaultTypeInternal() {}
  union {
    RegisterClientRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterClientRequestDefaultTypeInternal _RegisterClientRequest_default_instance_;
PROTOBUF_CONSTEXPR RegisterClientResponse::RegisterClientResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.isduplicate_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterClientResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterClientResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterClientResponseDefaultTypeInternal() {}
  union {
    RegisterClientResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterClientResponseDefaultTypeInternal _RegisterClientResponse_default_instance_;
PROTOBUF_CONSTEXPR FunctionTypeResponse::FunctionTypeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.validationtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FunctionTypeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionTypeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionTypeResponseDefaultTypeInternal() {}
  union {
    FunctionTypeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionTypeResponseDefaultTypeInternal _FunctionTypeResponse_default_instance_;
PROTOBUF_CONSTEXPR LogChannelRequest::LogChannelRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.loglevel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogChannelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogChannelRequestDefaultTypeInternal() {}
  union {
    LogChannelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogChannelRequestDefaultTypeInternal _LogChannelRequest_default_instance_;
PROTOBUF_CONSTEXPR LogEntry::LogEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogEntryDefaultTypeInternal() {}
  union {
    LogEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogEntryDefaultTypeInternal _LogEntry_default_instance_;
PROTOBUF_CONSTEXPR ProjectContext::ProjectContext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.projectname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.projectpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.testdirpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.builddirrelativepath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProjectContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProjectContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProjectContextDefaultTypeInternal() {}
  union {
    ProjectContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProjectContextDefaultTypeInternal _ProjectContext_default_instance_;
PROTOBUF_CONSTEXPR SettingsContext::SettingsContext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timeoutperfunction_)*/0
  , /*decltype(_impl_.generateforstaticfunctions_)*/false
  , /*decltype(_impl_.verbose_)*/false
  , /*decltype(_impl_.usedeterministicsearcher_)*/false
  , /*decltype(_impl_.usestubs_)*/false
  , /*decltype(_impl_.timeoutpertest_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SettingsContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SettingsContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SettingsContextDefaultTypeInternal() {}
  union {
    SettingsContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SettingsContextDefaultTypeInternal _SettingsContext_default_instance_;
PROTOBUF_CONSTEXPR SnippetRequest::SnippetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filepath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.projectcontext_)*/nullptr
  , /*decltype(_impl_.settingscontext_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnippetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnippetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnippetRequestDefaultTypeInternal() {}
  union {
    SnippetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnippetRequestDefaultTypeInternal _SnippetRequest_default_instance_;
PROTOBUF_CONSTEXPR ProjectRequest::ProjectRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sourcepaths_)*/{}
  , /*decltype(_impl_.targetpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.projectcontext_)*/nullptr
  , /*decltype(_impl_.settingscontext_)*/nullptr
  , /*decltype(_impl_.synchronizecode_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProjectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProjectRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProjectRequestDefaultTypeInternal() {}
  union {
    ProjectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProjectRequestDefaultTypeInternal _ProjectRequest_default_instance_;
PROTOBUF_CONSTEXPR FileRequest::FileRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filepath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.projectrequest_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileRequestDefaultTypeInternal() {}
  union {
    FileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileRequestDefaultTypeInternal _FileRequest_default_instance_;
PROTOBUF_CONSTEXPR FolderRequest::FolderRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.folderpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.projectrequest_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FolderRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FolderRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FolderRequestDefaultTypeInternal() {}
  union {
    FolderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FolderRequestDefaultTypeInternal _FolderRequest_default_instance_;
PROTOBUF_CONSTEXPR LineRequest::LineRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.projectrequest_)*/nullptr
  , /*decltype(_impl_.sourceinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LineRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineRequestDefaultTypeInternal() {}
  union {
    LineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineRequestDefaultTypeInternal _LineRequest_default_instance_;
PROTOBUF_CONSTEXPR FunctionRequest::FunctionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.linerequest_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FunctionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionRequestDefaultTypeInternal() {}
  union {
    FunctionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionRequestDefaultTypeInternal _FunctionRequest_default_instance_;
PROTOBUF_CONSTEXPR ClassRequest::ClassRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.linerequest_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClassRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassRequestDefaultTypeInternal() {}
  union {
    ClassRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassRequestDefaultTypeInternal _ClassRequest_default_instance_;
PROTOBUF_CONSTEXPR AssertionRequest::AssertionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.linerequest_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssertionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssertionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssertionRequestDefaultTypeInternal() {}
  union {
    AssertionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssertionRequestDefaultTypeInternal _AssertionRequest_default_instance_;
PROTOBUF_CONSTEXPR PredicateRequest::PredicateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.linerequest_)*/nullptr
  , /*decltype(_impl_.predicateinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PredicateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PredicateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PredicateRequestDefaultTypeInternal() {}
  union {
    PredicateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PredicateRequestDefaultTypeInternal _PredicateRequest_default_instance_;
PROTOBUF_CONSTEXPR StubsResponse::StubsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stubsources_)*/{}
  , /*decltype(_impl_.progress_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StubsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StubsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StubsResponseDefaultTypeInternal() {}
  union {
    StubsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StubsResponseDefaultTypeInternal _StubsResponse_default_instance_;
PROTOBUF_CONSTEXPR TestsResponse::TestsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.testsources_)*/{}
  , /*decltype(_impl_.stubs_)*/nullptr
  , /*decltype(_impl_.progress_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestsResponseDefaultTypeInternal() {}
  union {
    TestsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestsResponseDefaultTypeInternal _TestsResponse_default_instance_;
PROTOBUF_CONSTEXPR SourceLine::SourceLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.line_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SourceLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SourceLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SourceLineDefaultTypeInternal() {}
  union {
    SourceLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourceLineDefaultTypeInternal _SourceLine_default_instance_;
PROTOBUF_CONSTEXPR FileCoverageSimplified::FileCoverageSimplified(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fullcoveragelines_)*/{}
  , /*decltype(_impl_.partialcoveragelines_)*/{}
  , /*decltype(_impl_.nocoveragelines_)*/{}
  , /*decltype(_impl_.filepath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileCoverageSimplifiedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileCoverageSimplifiedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileCoverageSimplifiedDefaultTypeInternal() {}
  union {
    FileCoverageSimplified _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileCoverageSimplifiedDefaultTypeInternal _FileCoverageSimplified_default_instance_;
PROTOBUF_CONSTEXPR TestFilter::TestFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.testfilepath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.testname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.testsuite_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestFilterDefaultTypeInternal() {}
  union {
    TestFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestFilterDefaultTypeInternal _TestFilter_default_instance_;
PROTOBUF_CONSTEXPR CoverageAndResultsRequest::CoverageAndResultsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.projectcontext_)*/nullptr
  , /*decltype(_impl_.settingscontext_)*/nullptr
  , /*decltype(_impl_.testfilter_)*/nullptr
  , /*decltype(_impl_.coverage_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoverageAndResultsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoverageAndResultsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoverageAndResultsRequestDefaultTypeInternal() {}
  union {
    CoverageAndResultsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoverageAndResultsRequestDefaultTypeInternal _CoverageAndResultsRequest_default_instance_;
PROTOBUF_CONSTEXPR TestResultObject::TestResultObject(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.testfilepath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.testname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.output_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.executiontime_)*/nullptr
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestResultObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestResultObjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestResultObjectDefaultTypeInternal() {}
  union {
    TestResultObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestResultObjectDefaultTypeInternal _TestResultObject_default_instance_;
PROTOBUF_CONSTEXPR CoverageAndResultsResponse::CoverageAndResultsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.testrunresults_)*/{}
  , /*decltype(_impl_.coverages_)*/{}
  , /*decltype(_impl_.errormessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.progress_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoverageAndResultsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoverageAndResultsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoverageAndResultsResponseDefaultTypeInternal() {}
  union {
    CoverageAndResultsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoverageAndResultsResponseDefaultTypeInternal _CoverageAndResultsResponse_default_instance_;
PROTOBUF_CONSTEXPR HeartbeatResponse::HeartbeatResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.linked_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatResponseDefaultTypeInternal() {}
  union {
    HeartbeatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatResponseDefaultTypeInternal _HeartbeatResponse_default_instance_;
PROTOBUF_CONSTEXPR ProjectConfigRequest::ProjectConfigRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cmakeoptions_)*/{}
  , /*decltype(_impl_.projectcontext_)*/nullptr
  , /*decltype(_impl_.configmode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProjectConfigRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProjectConfigRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProjectConfigRequestDefaultTypeInternal() {}
  union {
    ProjectConfigRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProjectConfigRequestDefaultTypeInternal _ProjectConfigRequest_default_instance_;
PROTOBUF_CONSTEXPR ProjectConfigResponse::ProjectConfigResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.progress_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProjectConfigResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProjectConfigResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProjectConfigResponseDefaultTypeInternal() {}
  union {
    ProjectConfigResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProjectConfigResponseDefaultTypeInternal _ProjectConfigResponse_default_instance_;
PROTOBUF_CONSTEXPR ProjectTarget::ProjectTarget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProjectTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProjectTargetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProjectTargetDefaultTypeInternal() {}
  union {
    ProjectTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProjectTargetDefaultTypeInternal _ProjectTarget_default_instance_;
PROTOBUF_CONSTEXPR ProjectTargetsRequest::ProjectTargetsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.projectcontext_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProjectTargetsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProjectTargetsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProjectTargetsRequestDefaultTypeInternal() {}
  union {
    ProjectTargetsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProjectTargetsRequestDefaultTypeInternal _ProjectTargetsRequest_default_instance_;
PROTOBUF_CONSTEXPR ProjectTargetsResponse::ProjectTargetsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.targets_)*/{}
  , /*decltype(_impl_.prioritytarget_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProjectTargetsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProjectTargetsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProjectTargetsResponseDefaultTypeInternal() {}
  union {
    ProjectTargetsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProjectTargetsResponseDefaultTypeInternal _ProjectTargetsResponse_default_instance_;
PROTOBUF_CONSTEXPR FileTargetsRequest::FileTargetsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.projectcontext_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileTargetsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileTargetsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileTargetsRequestDefaultTypeInternal() {}
  union {
    FileTargetsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileTargetsRequestDefaultTypeInternal _FileTargetsRequest_default_instance_;
PROTOBUF_CONSTEXPR FileTargetsResponse::FileTargetsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.targets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileTargetsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileTargetsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileTargetsResponseDefaultTypeInternal() {}
  union {
    FileTargetsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileTargetsResponseDefaultTypeInternal _FileTargetsResponse_default_instance_;
}  // namespace testsgen
static ::_pb::Metadata file_level_metadata_testgen_2eproto[35];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_testgen_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_testgen_2eproto = nullptr;

const uint32_t TableStruct_testgen_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::DummyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::DummyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::VersionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::VersionInfo, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::RegisterClientRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::RegisterClientRequest, _impl_.clientid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::RegisterClientResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::RegisterClientResponse, _impl_.isduplicate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::FunctionTypeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::FunctionTypeResponse, _impl_.validationtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::LogChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::LogChannelRequest, _impl_.loglevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::LogEntry, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectContext, _impl_.projectname_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectContext, _impl_.projectpath_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectContext, _impl_.testdirpath_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectContext, _impl_.builddirrelativepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::SettingsContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::SettingsContext, _impl_.generateforstaticfunctions_),
  PROTOBUF_FIELD_OFFSET(::testsgen::SettingsContext, _impl_.verbose_),
  PROTOBUF_FIELD_OFFSET(::testsgen::SettingsContext, _impl_.timeoutperfunction_),
  PROTOBUF_FIELD_OFFSET(::testsgen::SettingsContext, _impl_.timeoutpertest_),
  PROTOBUF_FIELD_OFFSET(::testsgen::SettingsContext, _impl_.usedeterministicsearcher_),
  PROTOBUF_FIELD_OFFSET(::testsgen::SettingsContext, _impl_.usestubs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::SnippetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::SnippetRequest, _impl_.projectcontext_),
  PROTOBUF_FIELD_OFFSET(::testsgen::SnippetRequest, _impl_.settingscontext_),
  PROTOBUF_FIELD_OFFSET(::testsgen::SnippetRequest, _impl_.filepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectRequest, _impl_.projectcontext_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectRequest, _impl_.settingscontext_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectRequest, _impl_.sourcepaths_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectRequest, _impl_.synchronizecode_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectRequest, _impl_.targetpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::FileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::FileRequest, _impl_.projectrequest_),
  PROTOBUF_FIELD_OFFSET(::testsgen::FileRequest, _impl_.filepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::FolderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::FolderRequest, _impl_.projectrequest_),
  PROTOBUF_FIELD_OFFSET(::testsgen::FolderRequest, _impl_.folderpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::LineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::LineRequest, _impl_.projectrequest_),
  PROTOBUF_FIELD_OFFSET(::testsgen::LineRequest, _impl_.sourceinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::FunctionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::FunctionRequest, _impl_.linerequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::ClassRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::ClassRequest, _impl_.linerequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::AssertionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::AssertionRequest, _impl_.linerequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::PredicateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::PredicateRequest, _impl_.linerequest_),
  PROTOBUF_FIELD_OFFSET(::testsgen::PredicateRequest, _impl_.predicateinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::StubsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::StubsResponse, _impl_.stubsources_),
  PROTOBUF_FIELD_OFFSET(::testsgen::StubsResponse, _impl_.progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::TestsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::TestsResponse, _impl_.testsources_),
  PROTOBUF_FIELD_OFFSET(::testsgen::TestsResponse, _impl_.stubs_),
  PROTOBUF_FIELD_OFFSET(::testsgen::TestsResponse, _impl_.progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::SourceLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::SourceLine, _impl_.line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::FileCoverageSimplified, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::FileCoverageSimplified, _impl_.filepath_),
  PROTOBUF_FIELD_OFFSET(::testsgen::FileCoverageSimplified, _impl_.fullcoveragelines_),
  PROTOBUF_FIELD_OFFSET(::testsgen::FileCoverageSimplified, _impl_.partialcoveragelines_),
  PROTOBUF_FIELD_OFFSET(::testsgen::FileCoverageSimplified, _impl_.nocoveragelines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::TestFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::TestFilter, _impl_.testfilepath_),
  PROTOBUF_FIELD_OFFSET(::testsgen::TestFilter, _impl_.testname_),
  PROTOBUF_FIELD_OFFSET(::testsgen::TestFilter, _impl_.testsuite_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsRequest, _impl_.projectcontext_),
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsRequest, _impl_.settingscontext_),
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsRequest, _impl_.testfilter_),
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsRequest, _impl_.coverage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::TestResultObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::TestResultObject, _impl_.testfilepath_),
  PROTOBUF_FIELD_OFFSET(::testsgen::TestResultObject, _impl_.testname_),
  PROTOBUF_FIELD_OFFSET(::testsgen::TestResultObject, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::testsgen::TestResultObject, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::testsgen::TestResultObject, _impl_.executiontime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsResponse, _impl_.testrunresults_),
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsResponse, _impl_.coverages_),
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsResponse, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsResponse, _impl_.errormessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::HeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::HeartbeatResponse, _impl_.linked_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectConfigRequest, _impl_.projectcontext_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectConfigRequest, _impl_.configmode_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectConfigRequest, _impl_.cmakeoptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectConfigResponse, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectConfigResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectConfigResponse, _impl_.progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectTarget, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectTarget, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectTarget, _impl_.description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectTargetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectTargetsRequest, _impl_.projectcontext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectTargetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectTargetsResponse, _impl_.targets_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectTargetsResponse, _impl_.prioritytarget_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::FileTargetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::FileTargetsRequest, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::testsgen::FileTargetsRequest, _impl_.projectcontext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::FileTargetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::FileTargetsResponse, _impl_.targets_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::testsgen::DummyRequest)},
  { 6, -1, -1, sizeof(::testsgen::DummyResponse)},
  { 12, -1, -1, sizeof(::testsgen::VersionInfo)},
  { 19, -1, -1, sizeof(::testsgen::RegisterClientRequest)},
  { 26, -1, -1, sizeof(::testsgen::RegisterClientResponse)},
  { 33, -1, -1, sizeof(::testsgen::FunctionTypeResponse)},
  { 40, -1, -1, sizeof(::testsgen::LogChannelRequest)},
  { 47, -1, -1, sizeof(::testsgen::LogEntry)},
  { 54, -1, -1, sizeof(::testsgen::ProjectContext)},
  { 64, -1, -1, sizeof(::testsgen::SettingsContext)},
  { 76, -1, -1, sizeof(::testsgen::SnippetRequest)},
  { 85, -1, -1, sizeof(::testsgen::ProjectRequest)},
  { 96, -1, -1, sizeof(::testsgen::FileRequest)},
  { 104, -1, -1, sizeof(::testsgen::FolderRequest)},
  { 112, -1, -1, sizeof(::testsgen::LineRequest)},
  { 120, -1, -1, sizeof(::testsgen::FunctionRequest)},
  { 127, -1, -1, sizeof(::testsgen::ClassRequest)},
  { 134, -1, -1, sizeof(::testsgen::AssertionRequest)},
  { 141, -1, -1, sizeof(::testsgen::PredicateRequest)},
  { 149, -1, -1, sizeof(::testsgen::StubsResponse)},
  { 157, -1, -1, sizeof(::testsgen::TestsResponse)},
  { 166, -1, -1, sizeof(::testsgen::SourceLine)},
  { 173, -1, -1, sizeof(::testsgen::FileCoverageSimplified)},
  { 183, -1, -1, sizeof(::testsgen::TestFilter)},
  { 192, -1, -1, sizeof(::testsgen::CoverageAndResultsRequest)},
  { 202, -1, -1, sizeof(::testsgen::TestResultObject)},
  { 213, -1, -1, sizeof(::testsgen::CoverageAndResultsResponse)},
  { 223, -1, -1, sizeof(::testsgen::HeartbeatResponse)},
  { 230, -1, -1, sizeof(::testsgen::ProjectConfigRequest)},
  { 239, -1, -1, sizeof(::testsgen::ProjectConfigResponse)},
  { 248, -1, -1, sizeof(::testsgen::ProjectTarget)},
  { 257, -1, -1, sizeof(::testsgen::ProjectTargetsRequest)},
  { 264, -1, -1, sizeof(::testsgen::ProjectTargetsResponse)},
  { 272, -1, -1, sizeof(::testsgen::FileTargetsRequest)},
  { 280, -1, -1, sizeof(::testsgen::FileTargetsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::testsgen::_DummyRequest_default_instance_._instance,
  &::testsgen::_DummyResponse_default_instance_._instance,
  &::testsgen::_VersionInfo_default_instance_._instance,
  &::testsgen::_RegisterClientRequest_default_instance_._instance,
  &::testsgen::_RegisterClientResponse_default_instance_._instance,
  &::testsgen::_FunctionTypeResponse_default_instance_._instance,
  &::testsgen::_LogChannelRequest_default_instance_._instance,
  &::testsgen::_LogEntry_default_instance_._instance,
  &::testsgen::_ProjectContext_default_instance_._instance,
  &::testsgen::_SettingsContext_default_instance_._instance,
  &::testsgen::_SnippetRequest_default_instance_._instance,
  &::testsgen::_ProjectRequest_default_instance_._instance,
  &::testsgen::_FileRequest_default_instance_._instance,
  &::testsgen::_FolderRequest_default_instance_._instance,
  &::testsgen::_LineRequest_default_instance_._instance,
  &::testsgen::_FunctionRequest_default_instance_._instance,
  &::testsgen::_ClassRequest_default_instance_._instance,
  &::testsgen::_AssertionRequest_default_instance_._instance,
  &::testsgen::_PredicateRequest_default_instance_._instance,
  &::testsgen::_StubsResponse_default_instance_._instance,
  &::testsgen::_TestsResponse_default_instance_._instance,
  &::testsgen::_SourceLine_default_instance_._instance,
  &::testsgen::_FileCoverageSimplified_default_instance_._instance,
  &::testsgen::_TestFilter_default_instance_._instance,
  &::testsgen::_CoverageAndResultsRequest_default_instance_._instance,
  &::testsgen::_TestResultObject_default_instance_._instance,
  &::testsgen::_CoverageAndResultsResponse_default_instance_._instance,
  &::testsgen::_HeartbeatResponse_default_instance_._instance,
  &::testsgen::_ProjectConfigRequest_default_instance_._instance,
  &::testsgen::_ProjectConfigResponse_default_instance_._instance,
  &::testsgen::_ProjectTarget_default_instance_._instance,
  &::testsgen::_ProjectTargetsRequest_default_instance_._instance,
  &::testsgen::_ProjectTargetsResponse_default_instance_._instance,
  &::testsgen::_FileTargetsRequest_default_instance_._instance,
  &::testsgen::_FileTargetsResponse_default_instance_._instance,
};

const char descriptor_table_protodef_testgen_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rtestgen.proto\022\010testsgen\032\nutil.proto\032\036g"
  "oogle/protobuf/duration.proto\"\016\n\014DummyRe"
  "quest\"\017\n\rDummyResponse\"\036\n\013VersionInfo\022\017\n"
  "\007version\030\001 \001(\t\")\n\025RegisterClientRequest\022"
  "\020\n\010clientId\030\001 \001(\t\"-\n\026RegisterClientRespo"
  "nse\022\023\n\013isDuplicate\030\001 \001(\010\"H\n\024FunctionType"
  "Response\0220\n\016validationType\030\001 \001(\0162\030.tests"
  "gen.ValidationType\"%\n\021LogChannelRequest\022"
  "\020\n\010logLevel\030\002 \001(\t\"\033\n\010LogEntry\022\017\n\007message"
  "\030\001 \001(\t\"m\n\016ProjectContext\022\023\n\013projectName\030"
  "\001 \001(\t\022\023\n\013projectPath\030\002 \001(\t\022\023\n\013testDirPat"
  "h\030\003 \001(\t\022\034\n\024buildDirRelativePath\030\004 \001(\t\"\256\001"
  "\n\017SettingsContext\022\"\n\032generateForStaticFu"
  "nctions\030\001 \001(\010\022\017\n\007verbose\030\002 \001(\010\022\032\n\022timeou"
  "tPerFunction\030\003 \001(\005\022\026\n\016timeoutPerTest\030\004 \001"
  "(\005\022 \n\030useDeterministicSearcher\030\005 \001(\010\022\020\n\010"
  "useStubs\030\006 \001(\010\"\210\001\n\016SnippetRequest\0220\n\016pro"
  "jectContext\030\001 \001(\0132\030.testsgen.ProjectCont"
  "ext\0222\n\017settingsContext\030\002 \001(\0132\031.testsgen."
  "SettingsContext\022\020\n\010filePath\030\003 \001(\t\"\270\001\n\016Pr"
  "ojectRequest\0220\n\016projectContext\030\001 \001(\0132\030.t"
  "estsgen.ProjectContext\0222\n\017settingsContex"
  "t\030\002 \001(\0132\031.testsgen.SettingsContext\022\023\n\013so"
  "urcePaths\030\003 \003(\t\022\027\n\017synchronizeCode\030\004 \001(\010"
  "\022\022\n\ntargetPath\030\005 \001(\t\"Q\n\013FileRequest\0220\n\016p"
  "rojectRequest\030\001 \001(\0132\030.testsgen.ProjectRe"
  "quest\022\020\n\010filePath\030\002 \001(\t\"U\n\rFolderRequest"
  "\0220\n\016projectRequest\030\001 \001(\0132\030.testsgen.Proj"
  "ectRequest\022\022\n\nfolderPath\030\002 \001(\t\"i\n\013LineRe"
  "quest\0220\n\016projectRequest\030\001 \001(\0132\030.testsgen"
  ".ProjectRequest\022(\n\nsourceInfo\030\002 \001(\0132\024.te"
  "stsgen.SourceInfo\"=\n\017FunctionRequest\022*\n\013"
  "lineRequest\030\001 \001(\0132\025.testsgen.LineRequest"
  "\":\n\014ClassRequest\022*\n\013lineRequest\030\001 \001(\0132\025."
  "testsgen.LineRequest\">\n\020AssertionRequest"
  "\022*\n\013lineRequest\030\001 \001(\0132\025.testsgen.LineReq"
  "uest\"n\n\020PredicateRequest\022*\n\013lineRequest\030"
  "\001 \001(\0132\025.testsgen.LineRequest\022.\n\rpredicat"
  "eInfo\030\002 \001(\0132\027.testsgen.PredicateInfo\"`\n\r"
  "StubsResponse\022)\n\013stubSources\030\001 \003(\0132\024.tes"
  "tsgen.SourceCode\022$\n\010progress\030\002 \001(\0132\022.tes"
  "tsgen.Progress\"\210\001\n\rTestsResponse\022)\n\013test"
  "Sources\030\001 \003(\0132\024.testsgen.SourceCode\022&\n\005s"
  "tubs\030\002 \001(\0132\027.testsgen.StubsResponse\022$\n\010p"
  "rogress\030\003 \001(\0132\022.testsgen.Progress\"\032\n\nSou"
  "rceLine\022\014\n\004line\030\001 \001(\r\"\276\001\n\026FileCoverageSi"
  "mplified\022\020\n\010filePath\030\001 \001(\t\022/\n\021fullCovera"
  "geLines\030\002 \003(\0132\024.testsgen.SourceLine\0222\n\024p"
  "artialCoverageLines\030\003 \003(\0132\024.testsgen.Sou"
  "rceLine\022-\n\017noCoverageLines\030\004 \003(\0132\024.tests"
  "gen.SourceLine\"G\n\nTestFilter\022\024\n\014testFile"
  "Path\030\001 \001(\t\022\020\n\010testName\030\002 \001(\t\022\021\n\ttestSuit"
  "e\030\003 \001(\t\"\275\001\n\031CoverageAndResultsRequest\0220\n"
  "\016projectContext\030\001 \001(\0132\030.testsgen.Project"
  "Context\0222\n\017settingsContext\030\002 \001(\0132\031.tests"
  "gen.SettingsContext\022(\n\ntestFilter\030\003 \001(\0132"
  "\024.testsgen.TestFilter\022\020\n\010coverage\030\004 \001(\010\""
  "\242\001\n\020TestResultObject\022\024\n\014testFilePath\030\001 \001"
  "(\t\022\020\n\010testname\030\002 \001(\t\022$\n\006status\030\003 \001(\0162\024.t"
  "estsgen.TestStatus\022\016\n\006output\030\004 \001(\t\0220\n\rex"
  "ecutionTime\030\005 \001(\0132\031.google.protobuf.Dura"
  "tion\"\301\001\n\032CoverageAndResultsResponse\0222\n\016t"
  "estRunResults\030\001 \003(\0132\032.testsgen.TestResul"
  "tObject\0223\n\tcoverages\030\002 \003(\0132 .testsgen.Fi"
  "leCoverageSimplified\022$\n\010progress\030\003 \001(\0132\022"
  ".testsgen.Progress\022\024\n\014errorMessage\030\004 \001(\t"
  "\"#\n\021HeartbeatResponse\022\016\n\006linked\030\001 \001(\010\"\210\001"
  "\n\024ProjectConfigRequest\0220\n\016projectContext"
  "\030\001 \001(\0132\030.testsgen.ProjectContext\022(\n\nconf"
  "igMode\030\002 \001(\0162\024.testsgen.ConfigMode\022\024\n\014cm"
  "akeOptions\030\003 \003(\t\"{\n\025ProjectConfigRespons"
  "e\022+\n\004type\030\001 \001(\0162\035.testsgen.ProjectConfig"
  "Status\022\017\n\007message\030\002 \001(\t\022$\n\010progress\030\003 \001("
  "\0132\022.testsgen.Progress\"@\n\rProjectTarget\022\014"
  "\n\004name\030\001 \001(\t\022\014\n\004path\030\002 \001(\t\022\023\n\013descriptio"
  "n\030\003 \001(\t\"I\n\025ProjectTargetsRequest\0220\n\016proj"
  "ectContext\030\001 \001(\0132\030.testsgen.ProjectConte"
  "xt\"s\n\026ProjectTargetsResponse\022(\n\007targets\030"
  "\001 \003(\0132\027.testsgen.ProjectTarget\022/\n\016priori"
  "tyTarget\030\002 \001(\0132\027.testsgen.ProjectTarget\""
  "T\n\022FileTargetsRequest\022\014\n\004path\030\001 \001(\t\0220\n\016p"
  "rojectContext\030\002 \001(\0132\030.testsgen.ProjectCo"
  "ntext\"\?\n\023FileTargetsResponse\022(\n\007targets\030"
  "\001 \003(\0132\027.testsgen.ProjectTarget*T\n\nTestSt"
  "atus\022\017\n\013TEST_PASSED\020\000\022\017\n\013TEST_FAILED\020\001\022\016"
  "\n\nTEST_DEATH\020\002\022\024\n\020TEST_INTERRUPTED\020\003*O\n\n"
  "ConfigMode\022\t\n\005CHECK\020\000\022\024\n\020CREATE_BUILD_DI"
  "R\020\001\022\027\n\023GENERATE_JSON_FILES\020\002\022\007\n\003ALL\020\003*\336\001"
  "\n\023ProjectConfigStatus\022\t\n\005IS_OK\020\000\022\027\n\023BUIL"
  "D_DIR_NOT_FOUND\020\001\022#\n\037COMPILE_COMMANDS_JS"
  "ON_NOT_FOUND\020\002\022 \n\034LINK_COMMANDS_JSON_NOT"
  "_FOUND\020\003\022\035\n\031BUILD_DIR_CREATION_FAILED\020\004\022"
  "\036\n\032RUN_JSON_GENERATION_FAILED\020\005\022\035\n\031BUILD"
  "_DIR_SAME_AS_PROJECT\020\0062\344\016\n\017TestsGenServi"
  "ce\022;\n\tHandshake\022\025.testsgen.VersionInfo\032\025"
  ".testsgen.VersionInfo\"\000\022B\n\tHeartbeat\022\026.t"
  "estsgen.DummyRequest\032\033.testsgen.Heartbea"
  "tResponse\"\000\022E\n\016OpenLogChannel\022\033.testsgen"
  ".LogChannelRequest\032\022.testsgen.LogEntry\"\000"
  "0\001\022D\n\017CloseLogChannel\022\026.testsgen.DummyRe"
  "quest\032\027.testsgen.DummyResponse\"\000\022G\n\020Open"
  "GTestChannel\022\033.testsgen.LogChannelReques"
  "t\032\022.testsgen.LogEntry\"\0000\001\022F\n\021CloseGTestC"
  "hannel\022\026.testsgen.DummyRequest\032\027.testsge"
  "n.DummyResponse\"\000\022L\n\016RegisterClient\022\037.te"
  "stsgen.RegisterClientRequest\032\027.testsgen."
  "DummyResponse\"\000\022T\n\025GetFunctionReturnType"
  "\022\031.testsgen.FunctionRequest\032\036.testsgen.F"
  "unctionTypeResponse\"\000\022M\n\024GenerateSnippet"
  "Tests\022\030.testsgen.SnippetRequest\032\027.testsg"
  "en.TestsResponse\"\0000\001\022M\n\024GenerateProjectT"
  "ests\022\030.testsgen.ProjectRequest\032\027.testsge"
  "n.TestsResponse\"\0000\001\022G\n\021GenerateFileTests"
  "\022\025.testsgen.FileRequest\032\027.testsgen.Tests"
  "Response\"\0000\001\022O\n\025GenerateFunctionTests\022\031."
  "testsgen.FunctionRequest\032\027.testsgen.Test"
  "sResponse\"\0000\001\022I\n\022GenerateClassTests\022\026.te"
  "stsgen.ClassRequest\032\027.testsgen.TestsResp"
  "onse\"\0000\001\022K\n\023GenerateFolderTests\022\027.testsg"
  "en.FolderRequest\032\027.testsgen.TestsRespons"
  "e\"\0000\001\022G\n\021GenerateLineTests\022\025.testsgen.Li"
  "neRequest\032\027.testsgen.TestsResponse\"\0000\001\022U"
  "\n\032GenerateAssertionFailTests\022\032.testsgen."
  "AssertionRequest\032\027.testsgen.TestsRespons"
  "e\"\0000\001\022Q\n\026GeneratePredicateTests\022\032.testsg"
  "en.PredicateRequest\032\027.testsgen.TestsResp"
  "onse\"\0000\001\022m\n\034CreateTestsCoverageAndResult"
  "\022#.testsgen.CoverageAndResultsRequest\032$."
  "testsgen.CoverageAndResultsResponse\"\0000\001\022"
  "M\n\024GenerateProjectStubs\022\030.testsgen.Proje"
  "ctRequest\032\027.testsgen.StubsResponse\"\0000\001\022J"
  "\n\023PrintModulesContent\022\030.testsgen.Project"
  "Context\032\027.testsgen.DummyResponse\"\000\022W\n\020Co"
  "nfigureProject\022\036.testsgen.ProjectConfigR"
  "equest\032\037.testsgen.ProjectConfigResponse\""
  "\0000\001\022=\n\rGetSourceCode\022\024.testsgen.SourceIn"
  "fo\032\024.testsgen.SourceCode\"\000\022X\n\021GetProject"
  "Targets\022\037.testsgen.ProjectTargetsRequest"
  "\032 .testsgen.ProjectTargetsResponse\"\000\022O\n\016"
  "GetFileTargets\022\034.testsgen.FileTargetsReq"
  "uest\032\035.testsgen.FileTargetsResponse\"\000b\006p"
  "roto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_testgen_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_util_2eproto,
};
static ::_pbi::once_flag descriptor_table_testgen_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_testgen_2eproto = {
    false, false, 5645, descriptor_table_protodef_testgen_2eproto,
    "testgen.proto",
    &descriptor_table_testgen_2eproto_once, descriptor_table_testgen_2eproto_deps, 2, 35,
    schemas, file_default_instances, TableStruct_testgen_2eproto::offsets,
    file_level_metadata_testgen_2eproto, file_level_enum_descriptors_testgen_2eproto,
    file_level_service_descriptors_testgen_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_testgen_2eproto_getter() {
  return &descriptor_table_testgen_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_testgen_2eproto(&descriptor_table_testgen_2eproto);
namespace testsgen {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_testgen_2eproto);
  return file_level_enum_descriptors_testgen_2eproto[0];
}
bool TestStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfigMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_testgen_2eproto);
  return file_level_enum_descriptors_testgen_2eproto[1];
}
bool ConfigMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProjectConfigStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_testgen_2eproto);
  return file_level_enum_descriptors_testgen_2eproto[2];
}
bool ProjectConfigStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DummyRequest::_Internal {
 public:
};

DummyRequest::DummyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:testsgen.DummyRequest)
}
DummyRequest::DummyRequest(const DummyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DummyRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:testsgen.DummyRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DummyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DummyRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DummyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[0]);
}

// ===================================================================

class DummyResponse::_Internal {
 public:
};

DummyResponse::DummyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:testsgen.DummyResponse)
}
DummyResponse::DummyResponse(const DummyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DummyResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:testsgen.DummyResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DummyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DummyResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DummyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[1]);
}

// ===================================================================

class VersionInfo::_Internal {
 public:
};

VersionInfo::VersionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.VersionInfo)
}
VersionInfo::VersionInfo(const VersionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VersionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.VersionInfo)
}

inline void VersionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VersionInfo::~VersionInfo() {
  // @@protoc_insertion_point(destructor:testsgen.VersionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VersionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
}

void VersionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VersionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.VersionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.VersionInfo.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VersionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.VersionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.VersionInfo.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.VersionInfo)
  return target;
}

size_t VersionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.VersionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VersionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionInfo::GetClassData() const { return &_class_data_; }


void VersionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VersionInfo*>(&to_msg);
  auto& from = static_cast<const VersionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.VersionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersionInfo::CopyFrom(const VersionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.VersionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionInfo::IsInitialized() const {
  return true;
}

void VersionInfo::InternalSwap(VersionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[2]);
}

// ===================================================================

class RegisterClientRequest::_Internal {
 public:
};

RegisterClientRequest::RegisterClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.RegisterClientRequest)
}
RegisterClientRequest::RegisterClientRequest(const RegisterClientRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterClientRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    _this->_impl_.clientid_.Set(from._internal_clientid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.RegisterClientRequest)
}

inline void RegisterClientRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterClientRequest::~RegisterClientRequest() {
  // @@protoc_insertion_point(destructor:testsgen.RegisterClientRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterClientRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientid_.Destroy();
}

void RegisterClientRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.RegisterClientRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterClientRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.RegisterClientRequest.clientId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterClientRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.RegisterClientRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.RegisterClientRequest.clientId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.RegisterClientRequest)
  return target;
}

size_t RegisterClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.RegisterClientRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterClientRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterClientRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterClientRequest::GetClassData() const { return &_class_data_; }


void RegisterClientRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterClientRequest*>(&to_msg);
  auto& from = static_cast<const RegisterClientRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.RegisterClientRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientid().empty()) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterClientRequest::CopyFrom(const RegisterClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.RegisterClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterClientRequest::IsInitialized() const {
  return true;
}

void RegisterClientRequest::InternalSwap(RegisterClientRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientid_, lhs_arena,
      &other->_impl_.clientid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterClientRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[3]);
}

// ===================================================================

class RegisterClientResponse::_Internal {
 public:
};

RegisterClientResponse::RegisterClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.RegisterClientResponse)
}
RegisterClientResponse::RegisterClientResponse(const RegisterClientResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterClientResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.isduplicate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.isduplicate_ = from._impl_.isduplicate_;
  // @@protoc_insertion_point(copy_constructor:testsgen.RegisterClientResponse)
}

inline void RegisterClientResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.isduplicate_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterClientResponse::~RegisterClientResponse() {
  // @@protoc_insertion_point(destructor:testsgen.RegisterClientResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterClientResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegisterClientResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterClientResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.RegisterClientResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.isduplicate_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterClientResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isDuplicate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isduplicate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterClientResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.RegisterClientResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isDuplicate = 1;
  if (this->_internal_isduplicate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isduplicate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.RegisterClientResponse)
  return target;
}

size_t RegisterClientResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.RegisterClientResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isDuplicate = 1;
  if (this->_internal_isduplicate() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterClientResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterClientResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterClientResponse::GetClassData() const { return &_class_data_; }


void RegisterClientResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterClientResponse*>(&to_msg);
  auto& from = static_cast<const RegisterClientResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.RegisterClientResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_isduplicate() != 0) {
    _this->_internal_set_isduplicate(from._internal_isduplicate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterClientResponse::CopyFrom(const RegisterClientResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.RegisterClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterClientResponse::IsInitialized() const {
  return true;
}

void RegisterClientResponse::InternalSwap(RegisterClientResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.isduplicate_, other->_impl_.isduplicate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterClientResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[4]);
}

// ===================================================================

class FunctionTypeResponse::_Internal {
 public:
};

FunctionTypeResponse::FunctionTypeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.FunctionTypeResponse)
}
FunctionTypeResponse::FunctionTypeResponse(const FunctionTypeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FunctionTypeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.validationtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.validationtype_ = from._impl_.validationtype_;
  // @@protoc_insertion_point(copy_constructor:testsgen.FunctionTypeResponse)
}

inline void FunctionTypeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.validationtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FunctionTypeResponse::~FunctionTypeResponse() {
  // @@protoc_insertion_point(destructor:testsgen.FunctionTypeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FunctionTypeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FunctionTypeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FunctionTypeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.FunctionTypeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validationtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionTypeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .testsgen.ValidationType validationType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_validationtype(static_cast<::testsgen::ValidationType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionTypeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.FunctionTypeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ValidationType validationType = 1;
  if (this->_internal_validationtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_validationtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.FunctionTypeResponse)
  return target;
}

size_t FunctionTypeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.FunctionTypeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .testsgen.ValidationType validationType = 1;
  if (this->_internal_validationtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_validationtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionTypeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FunctionTypeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionTypeResponse::GetClassData() const { return &_class_data_; }


void FunctionTypeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FunctionTypeResponse*>(&to_msg);
  auto& from = static_cast<const FunctionTypeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.FunctionTypeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_validationtype() != 0) {
    _this->_internal_set_validationtype(from._internal_validationtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionTypeResponse::CopyFrom(const FunctionTypeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.FunctionTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionTypeResponse::IsInitialized() const {
  return true;
}

void FunctionTypeResponse::InternalSwap(FunctionTypeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.validationtype_, other->_impl_.validationtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionTypeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[5]);
}

// ===================================================================

class LogChannelRequest::_Internal {
 public:
};

LogChannelRequest::LogChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.LogChannelRequest)
}
LogChannelRequest::LogChannelRequest(const LogChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogChannelRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.loglevel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.loglevel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loglevel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_loglevel().empty()) {
    _this->_impl_.loglevel_.Set(from._internal_loglevel(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.LogChannelRequest)
}

inline void LogChannelRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.loglevel_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.loglevel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loglevel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogChannelRequest::~LogChannelRequest() {
  // @@protoc_insertion_point(destructor:testsgen.LogChannelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.loglevel_.Destroy();
}

void LogChannelRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.LogChannelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.loglevel_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogChannelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string logLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_loglevel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.LogChannelRequest.logLevel"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogChannelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.LogChannelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string logLevel = 2;
  if (!this->_internal_loglevel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loglevel().data(), static_cast<int>(this->_internal_loglevel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.LogChannelRequest.logLevel");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_loglevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.LogChannelRequest)
  return target;
}

size_t LogChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.LogChannelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string logLevel = 2;
  if (!this->_internal_loglevel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loglevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogChannelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogChannelRequest::GetClassData() const { return &_class_data_; }


void LogChannelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogChannelRequest*>(&to_msg);
  auto& from = static_cast<const LogChannelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.LogChannelRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_loglevel().empty()) {
    _this->_internal_set_loglevel(from._internal_loglevel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogChannelRequest::CopyFrom(const LogChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.LogChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogChannelRequest::IsInitialized() const {
  return true;
}

void LogChannelRequest::InternalSwap(LogChannelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.loglevel_, lhs_arena,
      &other->_impl_.loglevel_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LogChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[6]);
}

// ===================================================================

class LogEntry::_Internal {
 public:
};

LogEntry::LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.LogEntry)
}

inline void LogEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:testsgen.LogEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void LogEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.LogEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.LogEntry.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.LogEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.LogEntry.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.LogEntry)
  return target;
}

size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.LogEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogEntry::GetClassData() const { return &_class_data_; }


void LogEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogEntry*>(&to_msg);
  auto& from = static_cast<const LogEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.LogEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LogEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[7]);
}

// ===================================================================

class ProjectContext::_Internal {
 public:
};

ProjectContext::ProjectContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.ProjectContext)
}
ProjectContext::ProjectContext(const ProjectContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProjectContext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.projectname_){}
    , decltype(_impl_.projectpath_){}
    , decltype(_impl_.testdirpath_){}
    , decltype(_impl_.builddirrelativepath_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.projectname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.projectname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_projectname().empty()) {
    _this->_impl_.projectname_.Set(from._internal_projectname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.projectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.projectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_projectpath().empty()) {
    _this->_impl_.projectpath_.Set(from._internal_projectpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.testdirpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testdirpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_testdirpath().empty()) {
    _this->_impl_.testdirpath_.Set(from._internal_testdirpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.builddirrelativepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.builddirrelativepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_builddirrelativepath().empty()) {
    _this->_impl_.builddirrelativepath_.Set(from._internal_builddirrelativepath(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.ProjectContext)
}

inline void ProjectContext::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.projectname_){}
    , decltype(_impl_.projectpath_){}
    , decltype(_impl_.testdirpath_){}
    , decltype(_impl_.builddirrelativepath_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.projectname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.projectname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.projectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.projectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.testdirpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testdirpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.builddirrelativepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.builddirrelativepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProjectContext::~ProjectContext() {
  // @@protoc_insertion_point(destructor:testsgen.ProjectContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProjectContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.projectname_.Destroy();
  _impl_.projectpath_.Destroy();
  _impl_.testdirpath_.Destroy();
  _impl_.builddirrelativepath_.Destroy();
}

void ProjectContext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProjectContext::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.ProjectContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.projectname_.ClearToEmpty();
  _impl_.projectpath_.ClearToEmpty();
  _impl_.testdirpath_.ClearToEmpty();
  _impl_.builddirrelativepath_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string projectName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_projectname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.ProjectContext.projectName"));
        } else
          goto handle_unusual;
        continue;
      // string projectPath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_projectpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.ProjectContext.projectPath"));
        } else
          goto handle_unusual;
        continue;
      // string testDirPath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_testdirpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.ProjectContext.testDirPath"));
        } else
          goto handle_unusual;
        continue;
      // string buildDirRelativePath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_builddirrelativepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.ProjectContext.buildDirRelativePath"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProjectContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.ProjectContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string projectName = 1;
  if (!this->_internal_projectname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_projectname().data(), static_cast<int>(this->_internal_projectname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectContext.projectName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_projectname(), target);
  }

  // string projectPath = 2;
  if (!this->_internal_projectpath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_projectpath().data(), static_cast<int>(this->_internal_projectpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectContext.projectPath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_projectpath(), target);
  }

  // string testDirPath = 3;
  if (!this->_internal_testdirpath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_testdirpath().data(), static_cast<int>(this->_internal_testdirpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectContext.testDirPath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_testdirpath(), target);
  }

  // string buildDirRelativePath = 4;
  if (!this->_internal_builddirrelativepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_builddirrelativepath().data(), static_cast<int>(this->_internal_builddirrelativepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectContext.buildDirRelativePath");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_builddirrelativepath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.ProjectContext)
  return target;
}

size_t ProjectContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.ProjectContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string projectName = 1;
  if (!this->_internal_projectname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_projectname());
  }

  // string projectPath = 2;
  if (!this->_internal_projectpath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_projectpath());
  }

  // string testDirPath = 3;
  if (!this->_internal_testdirpath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_testdirpath());
  }

  // string buildDirRelativePath = 4;
  if (!this->_internal_builddirrelativepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_builddirrelativepath());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProjectContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProjectContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProjectContext::GetClassData() const { return &_class_data_; }


void ProjectContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProjectContext*>(&to_msg);
  auto& from = static_cast<const ProjectContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.ProjectContext)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_projectname().empty()) {
    _this->_internal_set_projectname(from._internal_projectname());
  }
  if (!from._internal_projectpath().empty()) {
    _this->_internal_set_projectpath(from._internal_projectpath());
  }
  if (!from._internal_testdirpath().empty()) {
    _this->_internal_set_testdirpath(from._internal_testdirpath());
  }
  if (!from._internal_builddirrelativepath().empty()) {
    _this->_internal_set_builddirrelativepath(from._internal_builddirrelativepath());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProjectContext::CopyFrom(const ProjectContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.ProjectContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectContext::IsInitialized() const {
  return true;
}

void ProjectContext::InternalSwap(ProjectContext* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.projectname_, lhs_arena,
      &other->_impl_.projectname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.projectpath_, lhs_arena,
      &other->_impl_.projectpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.testdirpath_, lhs_arena,
      &other->_impl_.testdirpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.builddirrelativepath_, lhs_arena,
      &other->_impl_.builddirrelativepath_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[8]);
}

// ===================================================================

class SettingsContext::_Internal {
 public:
};

SettingsContext::SettingsContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.SettingsContext)
}
SettingsContext::SettingsContext(const SettingsContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SettingsContext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timeoutperfunction_){}
    , decltype(_impl_.generateforstaticfunctions_){}
    , decltype(_impl_.verbose_){}
    , decltype(_impl_.usedeterministicsearcher_){}
    , decltype(_impl_.usestubs_){}
    , decltype(_impl_.timeoutpertest_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timeoutperfunction_, &from._impl_.timeoutperfunction_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timeoutpertest_) -
    reinterpret_cast<char*>(&_impl_.timeoutperfunction_)) + sizeof(_impl_.timeoutpertest_));
  // @@protoc_insertion_point(copy_constructor:testsgen.SettingsContext)
}

inline void SettingsContext::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timeoutperfunction_){0}
    , decltype(_impl_.generateforstaticfunctions_){false}
    , decltype(_impl_.verbose_){false}
    , decltype(_impl_.usedeterministicsearcher_){false}
    , decltype(_impl_.usestubs_){false}
    , decltype(_impl_.timeoutpertest_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SettingsContext::~SettingsContext() {
  // @@protoc_insertion_point(destructor:testsgen.SettingsContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SettingsContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SettingsContext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SettingsContext::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.SettingsContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timeoutperfunction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timeoutpertest_) -
      reinterpret_cast<char*>(&_impl_.timeoutperfunction_)) + sizeof(_impl_.timeoutpertest_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SettingsContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool generateForStaticFunctions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.generateforstaticfunctions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool verbose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.verbose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 timeoutPerFunction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timeoutperfunction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 timeoutPerTest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timeoutpertest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool useDeterministicSearcher = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.usedeterministicsearcher_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool useStubs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.usestubs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SettingsContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.SettingsContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool generateForStaticFunctions = 1;
  if (this->_internal_generateforstaticfunctions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_generateforstaticfunctions(), target);
  }

  // bool verbose = 2;
  if (this->_internal_verbose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_verbose(), target);
  }

  // int32 timeoutPerFunction = 3;
  if (this->_internal_timeoutperfunction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_timeoutperfunction(), target);
  }

  // int32 timeoutPerTest = 4;
  if (this->_internal_timeoutpertest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_timeoutpertest(), target);
  }

  // bool useDeterministicSearcher = 5;
  if (this->_internal_usedeterministicsearcher() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_usedeterministicsearcher(), target);
  }

  // bool useStubs = 6;
  if (this->_internal_usestubs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_usestubs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.SettingsContext)
  return target;
}

size_t SettingsContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.SettingsContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 timeoutPerFunction = 3;
  if (this->_internal_timeoutperfunction() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timeoutperfunction());
  }

  // bool generateForStaticFunctions = 1;
  if (this->_internal_generateforstaticfunctions() != 0) {
    total_size += 1 + 1;
  }

  // bool verbose = 2;
  if (this->_internal_verbose() != 0) {
    total_size += 1 + 1;
  }

  // bool useDeterministicSearcher = 5;
  if (this->_internal_usedeterministicsearcher() != 0) {
    total_size += 1 + 1;
  }

  // bool useStubs = 6;
  if (this->_internal_usestubs() != 0) {
    total_size += 1 + 1;
  }

  // int32 timeoutPerTest = 4;
  if (this->_internal_timeoutpertest() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timeoutpertest());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SettingsContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SettingsContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SettingsContext::GetClassData() const { return &_class_data_; }


void SettingsContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SettingsContext*>(&to_msg);
  auto& from = static_cast<const SettingsContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.SettingsContext)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timeoutperfunction() != 0) {
    _this->_internal_set_timeoutperfunction(from._internal_timeoutperfunction());
  }
  if (from._internal_generateforstaticfunctions() != 0) {
    _this->_internal_set_generateforstaticfunctions(from._internal_generateforstaticfunctions());
  }
  if (from._internal_verbose() != 0) {
    _this->_internal_set_verbose(from._internal_verbose());
  }
  if (from._internal_usedeterministicsearcher() != 0) {
    _this->_internal_set_usedeterministicsearcher(from._internal_usedeterministicsearcher());
  }
  if (from._internal_usestubs() != 0) {
    _this->_internal_set_usestubs(from._internal_usestubs());
  }
  if (from._internal_timeoutpertest() != 0) {
    _this->_internal_set_timeoutpertest(from._internal_timeoutpertest());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SettingsContext::CopyFrom(const SettingsContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.SettingsContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsContext::IsInitialized() const {
  return true;
}

void SettingsContext::InternalSwap(SettingsContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SettingsContext, _impl_.timeoutpertest_)
      + sizeof(SettingsContext::_impl_.timeoutpertest_)
      - PROTOBUF_FIELD_OFFSET(SettingsContext, _impl_.timeoutperfunction_)>(
          reinterpret_cast<char*>(&_impl_.timeoutperfunction_),
          reinterpret_cast<char*>(&other->_impl_.timeoutperfunction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SettingsContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[9]);
}

// ===================================================================

class SnippetRequest::_Internal {
 public:
  static const ::testsgen::ProjectContext& projectcontext(const SnippetRequest* msg);
  static const ::testsgen::SettingsContext& settingscontext(const SnippetRequest* msg);
};

const ::testsgen::ProjectContext&
SnippetRequest::_Internal::projectcontext(const SnippetRequest* msg) {
  return *msg->_impl_.projectcontext_;
}
const ::testsgen::SettingsContext&
SnippetRequest::_Internal::settingscontext(const SnippetRequest* msg) {
  return *msg->_impl_.settingscontext_;
}
SnippetRequest::SnippetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.SnippetRequest)
}
SnippetRequest::SnippetRequest(const SnippetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnippetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , decltype(_impl_.projectcontext_){nullptr}
    , decltype(_impl_.settingscontext_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filepath().empty()) {
    _this->_impl_.filepath_.Set(from._internal_filepath(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_projectcontext()) {
    _this->_impl_.projectcontext_ = new ::testsgen::ProjectContext(*from._impl_.projectcontext_);
  }
  if (from._internal_has_settingscontext()) {
    _this->_impl_.settingscontext_ = new ::testsgen::SettingsContext(*from._impl_.settingscontext_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.SnippetRequest)
}

inline void SnippetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , decltype(_impl_.projectcontext_){nullptr}
    , decltype(_impl_.settingscontext_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SnippetRequest::~SnippetRequest() {
  // @@protoc_insertion_point(destructor:testsgen.SnippetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnippetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filepath_.Destroy();
  if (this != internal_default_instance()) delete _impl_.projectcontext_;
  if (this != internal_default_instance()) delete _impl_.settingscontext_;
}

void SnippetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnippetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.SnippetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filepath_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.projectcontext_ != nullptr) {
    delete _impl_.projectcontext_;
  }
  _impl_.projectcontext_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.settingscontext_ != nullptr) {
    delete _impl_.settingscontext_;
  }
  _impl_.settingscontext_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .testsgen.ProjectContext projectContext = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectcontext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .testsgen.SettingsContext settingsContext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_settingscontext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string filePath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_filepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.SnippetRequest.filePath"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.SnippetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ProjectContext projectContext = 1;
  if (this->_internal_has_projectcontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::projectcontext(this),
        _Internal::projectcontext(this).GetCachedSize(), target, stream);
  }

  // .testsgen.SettingsContext settingsContext = 2;
  if (this->_internal_has_settingscontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::settingscontext(this),
        _Internal::settingscontext(this).GetCachedSize(), target, stream);
  }

  // string filePath = 3;
  if (!this->_internal_filepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.SnippetRequest.filePath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filepath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.SnippetRequest)
  return target;
}

size_t SnippetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.SnippetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filePath = 3;
  if (!this->_internal_filepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filepath());
  }

  // .testsgen.ProjectContext projectContext = 1;
  if (this->_internal_has_projectcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.projectcontext_);
  }

  // .testsgen.SettingsContext settingsContext = 2;
  if (this->_internal_has_settingscontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.settingscontext_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnippetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest::GetClassData() const { return &_class_data_; }


void SnippetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnippetRequest*>(&to_msg);
  auto& from = static_cast<const SnippetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.SnippetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filepath().empty()) {
    _this->_internal_set_filepath(from._internal_filepath());
  }
  if (from._internal_has_projectcontext()) {
    _this->_internal_mutable_projectcontext()->::testsgen::ProjectContext::MergeFrom(
        from._internal_projectcontext());
  }
  if (from._internal_has_settingscontext()) {
    _this->_internal_mutable_settingscontext()->::testsgen::SettingsContext::MergeFrom(
        from._internal_settingscontext());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest::CopyFrom(const SnippetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.SnippetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest::IsInitialized() const {
  return true;
}

void SnippetRequest::InternalSwap(SnippetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filepath_, lhs_arena,
      &other->_impl_.filepath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnippetRequest, _impl_.settingscontext_)
      + sizeof(SnippetRequest::_impl_.settingscontext_)
      - PROTOBUF_FIELD_OFFSET(SnippetRequest, _impl_.projectcontext_)>(
          reinterpret_cast<char*>(&_impl_.projectcontext_),
          reinterpret_cast<char*>(&other->_impl_.projectcontext_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[10]);
}

// ===================================================================

class ProjectRequest::_Internal {
 public:
  static const ::testsgen::ProjectContext& projectcontext(const ProjectRequest* msg);
  static const ::testsgen::SettingsContext& settingscontext(const ProjectRequest* msg);
};

const ::testsgen::ProjectContext&
ProjectRequest::_Internal::projectcontext(const ProjectRequest* msg) {
  return *msg->_impl_.projectcontext_;
}
const ::testsgen::SettingsContext&
ProjectRequest::_Internal::settingscontext(const ProjectRequest* msg) {
  return *msg->_impl_.settingscontext_;
}
ProjectRequest::ProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.ProjectRequest)
}
ProjectRequest::ProjectRequest(const ProjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProjectRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sourcepaths_){from._impl_.sourcepaths_}
    , decltype(_impl_.targetpath_){}
    , decltype(_impl_.projectcontext_){nullptr}
    , decltype(_impl_.settingscontext_){nullptr}
    , decltype(_impl_.synchronizecode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.targetpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targetpath().empty()) {
    _this->_impl_.targetpath_.Set(from._internal_targetpath(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_projectcontext()) {
    _this->_impl_.projectcontext_ = new ::testsgen::ProjectContext(*from._impl_.projectcontext_);
  }
  if (from._internal_has_settingscontext()) {
    _this->_impl_.settingscontext_ = new ::testsgen::SettingsContext(*from._impl_.settingscontext_);
  }
  _this->_impl_.synchronizecode_ = from._impl_.synchronizecode_;
  // @@protoc_insertion_point(copy_constructor:testsgen.ProjectRequest)
}

inline void ProjectRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sourcepaths_){arena}
    , decltype(_impl_.targetpath_){}
    , decltype(_impl_.projectcontext_){nullptr}
    , decltype(_impl_.settingscontext_){nullptr}
    , decltype(_impl_.synchronizecode_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.targetpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProjectRequest::~ProjectRequest() {
  // @@protoc_insertion_point(destructor:testsgen.ProjectRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProjectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sourcepaths_.~RepeatedPtrField();
  _impl_.targetpath_.Destroy();
  if (this != internal_default_instance()) delete _impl_.projectcontext_;
  if (this != internal_default_instance()) delete _impl_.settingscontext_;
}

void ProjectRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.ProjectRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sourcepaths_.Clear();
  _impl_.targetpath_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.projectcontext_ != nullptr) {
    delete _impl_.projectcontext_;
  }
  _impl_.projectcontext_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.settingscontext_ != nullptr) {
    delete _impl_.settingscontext_;
  }
  _impl_.settingscontext_ = nullptr;
  _impl_.synchronizecode_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .testsgen.ProjectContext projectContext = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectcontext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .testsgen.SettingsContext settingsContext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_settingscontext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string sourcePaths = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sourcepaths();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "testsgen.ProjectRequest.sourcePaths"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool synchronizeCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.synchronizecode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string targetPath = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_targetpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.ProjectRequest.targetPath"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProjectRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.ProjectRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ProjectContext projectContext = 1;
  if (this->_internal_has_projectcontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::projectcontext(this),
        _Internal::projectcontext(this).GetCachedSize(), target, stream);
  }

  // .testsgen.SettingsContext settingsContext = 2;
  if (this->_internal_has_settingscontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::settingscontext(this),
        _Internal::settingscontext(this).GetCachedSize(), target, stream);
  }

  // repeated string sourcePaths = 3;
  for (int i = 0, n = this->_internal_sourcepaths_size(); i < n; i++) {
    const auto& s = this->_internal_sourcepaths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectRequest.sourcePaths");
    target = stream->WriteString(3, s, target);
  }

  // bool synchronizeCode = 4;
  if (this->_internal_synchronizecode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_synchronizecode(), target);
  }

  // string targetPath = 5;
  if (!this->_internal_targetpath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetpath().data(), static_cast<int>(this->_internal_targetpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectRequest.targetPath");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_targetpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.ProjectRequest)
  return target;
}

size_t ProjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.ProjectRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sourcePaths = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.sourcepaths_.size());
  for (int i = 0, n = _impl_.sourcepaths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.sourcepaths_.Get(i));
  }

  // string targetPath = 5;
  if (!this->_internal_targetpath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetpath());
  }

  // .testsgen.ProjectContext projectContext = 1;
  if (this->_internal_has_projectcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.projectcontext_);
  }

  // .testsgen.SettingsContext settingsContext = 2;
  if (this->_internal_has_settingscontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.settingscontext_);
  }

  // bool synchronizeCode = 4;
  if (this->_internal_synchronizecode() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProjectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProjectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProjectRequest::GetClassData() const { return &_class_data_; }


void ProjectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProjectRequest*>(&to_msg);
  auto& from = static_cast<const ProjectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.ProjectRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sourcepaths_.MergeFrom(from._impl_.sourcepaths_);
  if (!from._internal_targetpath().empty()) {
    _this->_internal_set_targetpath(from._internal_targetpath());
  }
  if (from._internal_has_projectcontext()) {
    _this->_internal_mutable_projectcontext()->::testsgen::ProjectContext::MergeFrom(
        from._internal_projectcontext());
  }
  if (from._internal_has_settingscontext()) {
    _this->_internal_mutable_settingscontext()->::testsgen::SettingsContext::MergeFrom(
        from._internal_settingscontext());
  }
  if (from._internal_synchronizecode() != 0) {
    _this->_internal_set_synchronizecode(from._internal_synchronizecode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProjectRequest::CopyFrom(const ProjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.ProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectRequest::IsInitialized() const {
  return true;
}

void ProjectRequest::InternalSwap(ProjectRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sourcepaths_.InternalSwap(&other->_impl_.sourcepaths_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targetpath_, lhs_arena,
      &other->_impl_.targetpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjectRequest, _impl_.synchronizecode_)
      + sizeof(ProjectRequest::_impl_.synchronizecode_)
      - PROTOBUF_FIELD_OFFSET(ProjectRequest, _impl_.projectcontext_)>(
          reinterpret_cast<char*>(&_impl_.projectcontext_),
          reinterpret_cast<char*>(&other->_impl_.projectcontext_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[11]);
}

// ===================================================================

class FileRequest::_Internal {
 public:
  static const ::testsgen::ProjectRequest& projectrequest(const FileRequest* msg);
};

const ::testsgen::ProjectRequest&
FileRequest::_Internal::projectrequest(const FileRequest* msg) {
  return *msg->_impl_.projectrequest_;
}
FileRequest::FileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.FileRequest)
}
FileRequest::FileRequest(const FileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , decltype(_impl_.projectrequest_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filepath().empty()) {
    _this->_impl_.filepath_.Set(from._internal_filepath(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_projectrequest()) {
    _this->_impl_.projectrequest_ = new ::testsgen::ProjectRequest(*from._impl_.projectrequest_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.FileRequest)
}

inline void FileRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , decltype(_impl_.projectrequest_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileRequest::~FileRequest() {
  // @@protoc_insertion_point(destructor:testsgen.FileRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filepath_.Destroy();
  if (this != internal_default_instance()) delete _impl_.projectrequest_;
}

void FileRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.FileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filepath_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.projectrequest_ != nullptr) {
    delete _impl_.projectrequest_;
  }
  _impl_.projectrequest_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .testsgen.ProjectRequest projectRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectrequest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string filePath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.FileRequest.filePath"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.FileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ProjectRequest projectRequest = 1;
  if (this->_internal_has_projectrequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::projectrequest(this),
        _Internal::projectrequest(this).GetCachedSize(), target, stream);
  }

  // string filePath = 2;
  if (!this->_internal_filepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.FileRequest.filePath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filepath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.FileRequest)
  return target;
}

size_t FileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.FileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filePath = 2;
  if (!this->_internal_filepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filepath());
  }

  // .testsgen.ProjectRequest projectRequest = 1;
  if (this->_internal_has_projectrequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.projectrequest_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileRequest::GetClassData() const { return &_class_data_; }


void FileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileRequest*>(&to_msg);
  auto& from = static_cast<const FileRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.FileRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filepath().empty()) {
    _this->_internal_set_filepath(from._internal_filepath());
  }
  if (from._internal_has_projectrequest()) {
    _this->_internal_mutable_projectrequest()->::testsgen::ProjectRequest::MergeFrom(
        from._internal_projectrequest());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileRequest::CopyFrom(const FileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.FileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileRequest::IsInitialized() const {
  return true;
}

void FileRequest::InternalSwap(FileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filepath_, lhs_arena,
      &other->_impl_.filepath_, rhs_arena
  );
  swap(_impl_.projectrequest_, other->_impl_.projectrequest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[12]);
}

// ===================================================================

class FolderRequest::_Internal {
 public:
  static const ::testsgen::ProjectRequest& projectrequest(const FolderRequest* msg);
};

const ::testsgen::ProjectRequest&
FolderRequest::_Internal::projectrequest(const FolderRequest* msg) {
  return *msg->_impl_.projectrequest_;
}
FolderRequest::FolderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.FolderRequest)
}
FolderRequest::FolderRequest(const FolderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FolderRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.folderpath_){}
    , decltype(_impl_.projectrequest_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.folderpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.folderpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_folderpath().empty()) {
    _this->_impl_.folderpath_.Set(from._internal_folderpath(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_projectrequest()) {
    _this->_impl_.projectrequest_ = new ::testsgen::ProjectRequest(*from._impl_.projectrequest_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.FolderRequest)
}

inline void FolderRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.folderpath_){}
    , decltype(_impl_.projectrequest_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.folderpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.folderpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FolderRequest::~FolderRequest() {
  // @@protoc_insertion_point(destructor:testsgen.FolderRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FolderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.folderpath_.Destroy();
  if (this != internal_default_instance()) delete _impl_.projectrequest_;
}

void FolderRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FolderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.FolderRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.folderpath_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.projectrequest_ != nullptr) {
    delete _impl_.projectrequest_;
  }
  _impl_.projectrequest_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FolderRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .testsgen.ProjectRequest projectRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectrequest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string folderPath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_folderpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.FolderRequest.folderPath"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FolderRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.FolderRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ProjectRequest projectRequest = 1;
  if (this->_internal_has_projectrequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::projectrequest(this),
        _Internal::projectrequest(this).GetCachedSize(), target, stream);
  }

  // string folderPath = 2;
  if (!this->_internal_folderpath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_folderpath().data(), static_cast<int>(this->_internal_folderpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.FolderRequest.folderPath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_folderpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.FolderRequest)
  return target;
}

size_t FolderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.FolderRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string folderPath = 2;
  if (!this->_internal_folderpath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_folderpath());
  }

  // .testsgen.ProjectRequest projectRequest = 1;
  if (this->_internal_has_projectrequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.projectrequest_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FolderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FolderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FolderRequest::GetClassData() const { return &_class_data_; }


void FolderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FolderRequest*>(&to_msg);
  auto& from = static_cast<const FolderRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.FolderRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_folderpath().empty()) {
    _this->_internal_set_folderpath(from._internal_folderpath());
  }
  if (from._internal_has_projectrequest()) {
    _this->_internal_mutable_projectrequest()->::testsgen::ProjectRequest::MergeFrom(
        from._internal_projectrequest());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FolderRequest::CopyFrom(const FolderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.FolderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FolderRequest::IsInitialized() const {
  return true;
}

void FolderRequest::InternalSwap(FolderRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.folderpath_, lhs_arena,
      &other->_impl_.folderpath_, rhs_arena
  );
  swap(_impl_.projectrequest_, other->_impl_.projectrequest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FolderRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[13]);
}

// ===================================================================

class LineRequest::_Internal {
 public:
  static const ::testsgen::ProjectRequest& projectrequest(const LineRequest* msg);
  static const ::testsgen::SourceInfo& sourceinfo(const LineRequest* msg);
};

const ::testsgen::ProjectRequest&
LineRequest::_Internal::projectrequest(const LineRequest* msg) {
  return *msg->_impl_.projectrequest_;
}
const ::testsgen::SourceInfo&
LineRequest::_Internal::sourceinfo(const LineRequest* msg) {
  return *msg->_impl_.sourceinfo_;
}
void LineRequest::clear_sourceinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.sourceinfo_ != nullptr) {
    delete _impl_.sourceinfo_;
  }
  _impl_.sourceinfo_ = nullptr;
}
LineRequest::LineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.LineRequest)
}
LineRequest::LineRequest(const LineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LineRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.projectrequest_){nullptr}
    , decltype(_impl_.sourceinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_projectrequest()) {
    _this->_impl_.projectrequest_ = new ::testsgen::ProjectRequest(*from._impl_.projectrequest_);
  }
  if (from._internal_has_sourceinfo()) {
    _this->_impl_.sourceinfo_ = new ::testsgen::SourceInfo(*from._impl_.sourceinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.LineRequest)
}

inline void LineRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.projectrequest_){nullptr}
    , decltype(_impl_.sourceinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LineRequest::~LineRequest() {
  // @@protoc_insertion_point(destructor:testsgen.LineRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.projectrequest_;
  if (this != internal_default_instance()) delete _impl_.sourceinfo_;
}

void LineRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.LineRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.projectrequest_ != nullptr) {
    delete _impl_.projectrequest_;
  }
  _impl_.projectrequest_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sourceinfo_ != nullptr) {
    delete _impl_.sourceinfo_;
  }
  _impl_.sourceinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LineRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .testsgen.ProjectRequest projectRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectrequest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .testsgen.SourceInfo sourceInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sourceinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LineRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.LineRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ProjectRequest projectRequest = 1;
  if (this->_internal_has_projectrequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::projectrequest(this),
        _Internal::projectrequest(this).GetCachedSize(), target, stream);
  }

  // .testsgen.SourceInfo sourceInfo = 2;
  if (this->_internal_has_sourceinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sourceinfo(this),
        _Internal::sourceinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.LineRequest)
  return target;
}

size_t LineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.LineRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .testsgen.ProjectRequest projectRequest = 1;
  if (this->_internal_has_projectrequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.projectrequest_);
  }

  // .testsgen.SourceInfo sourceInfo = 2;
  if (this->_internal_has_sourceinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sourceinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LineRequest::GetClassData() const { return &_class_data_; }


void LineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LineRequest*>(&to_msg);
  auto& from = static_cast<const LineRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.LineRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_projectrequest()) {
    _this->_internal_mutable_projectrequest()->::testsgen::ProjectRequest::MergeFrom(
        from._internal_projectrequest());
  }
  if (from._internal_has_sourceinfo()) {
    _this->_internal_mutable_sourceinfo()->::testsgen::SourceInfo::MergeFrom(
        from._internal_sourceinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LineRequest::CopyFrom(const LineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.LineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineRequest::IsInitialized() const {
  return true;
}

void LineRequest::InternalSwap(LineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LineRequest, _impl_.sourceinfo_)
      + sizeof(LineRequest::_impl_.sourceinfo_)
      - PROTOBUF_FIELD_OFFSET(LineRequest, _impl_.projectrequest_)>(
          reinterpret_cast<char*>(&_impl_.projectrequest_),
          reinterpret_cast<char*>(&other->_impl_.projectrequest_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LineRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[14]);
}

// ===================================================================

class FunctionRequest::_Internal {
 public:
  static const ::testsgen::LineRequest& linerequest(const FunctionRequest* msg);
};

const ::testsgen::LineRequest&
FunctionRequest::_Internal::linerequest(const FunctionRequest* msg) {
  return *msg->_impl_.linerequest_;
}
FunctionRequest::FunctionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.FunctionRequest)
}
FunctionRequest::FunctionRequest(const FunctionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FunctionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.linerequest_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linerequest()) {
    _this->_impl_.linerequest_ = new ::testsgen::LineRequest(*from._impl_.linerequest_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.FunctionRequest)
}

inline void FunctionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.linerequest_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FunctionRequest::~FunctionRequest() {
  // @@protoc_insertion_point(destructor:testsgen.FunctionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FunctionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.linerequest_;
}

void FunctionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FunctionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.FunctionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.linerequest_ != nullptr) {
    delete _impl_.linerequest_;
  }
  _impl_.linerequest_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .testsgen.LineRequest lineRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linerequest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.FunctionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.LineRequest lineRequest = 1;
  if (this->_internal_has_linerequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::linerequest(this),
        _Internal::linerequest(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.FunctionRequest)
  return target;
}

size_t FunctionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.FunctionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .testsgen.LineRequest lineRequest = 1;
  if (this->_internal_has_linerequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.linerequest_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FunctionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionRequest::GetClassData() const { return &_class_data_; }


void FunctionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FunctionRequest*>(&to_msg);
  auto& from = static_cast<const FunctionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.FunctionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_linerequest()) {
    _this->_internal_mutable_linerequest()->::testsgen::LineRequest::MergeFrom(
        from._internal_linerequest());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionRequest::CopyFrom(const FunctionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.FunctionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionRequest::IsInitialized() const {
  return true;
}

void FunctionRequest::InternalSwap(FunctionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.linerequest_, other->_impl_.linerequest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[15]);
}

// ===================================================================

class ClassRequest::_Internal {
 public:
  static const ::testsgen::LineRequest& linerequest(const ClassRequest* msg);
};

const ::testsgen::LineRequest&
ClassRequest::_Internal::linerequest(const ClassRequest* msg) {
  return *msg->_impl_.linerequest_;
}
ClassRequest::ClassRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.ClassRequest)
}
ClassRequest::ClassRequest(const ClassRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClassRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.linerequest_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linerequest()) {
    _this->_impl_.linerequest_ = new ::testsgen::LineRequest(*from._impl_.linerequest_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.ClassRequest)
}

inline void ClassRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.linerequest_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClassRequest::~ClassRequest() {
  // @@protoc_insertion_point(destructor:testsgen.ClassRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClassRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.linerequest_;
}

void ClassRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClassRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.ClassRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.linerequest_ != nullptr) {
    delete _impl_.linerequest_;
  }
  _impl_.linerequest_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .testsgen.LineRequest lineRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linerequest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClassRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.ClassRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.LineRequest lineRequest = 1;
  if (this->_internal_has_linerequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::linerequest(this),
        _Internal::linerequest(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.ClassRequest)
  return target;
}

size_t ClassRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.ClassRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .testsgen.LineRequest lineRequest = 1;
  if (this->_internal_has_linerequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.linerequest_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClassRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClassRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClassRequest::GetClassData() const { return &_class_data_; }


void ClassRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClassRequest*>(&to_msg);
  auto& from = static_cast<const ClassRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.ClassRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_linerequest()) {
    _this->_internal_mutable_linerequest()->::testsgen::LineRequest::MergeFrom(
        from._internal_linerequest());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClassRequest::CopyFrom(const ClassRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.ClassRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassRequest::IsInitialized() const {
  return true;
}

void ClassRequest::InternalSwap(ClassRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.linerequest_, other->_impl_.linerequest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[16]);
}

// ===================================================================

class AssertionRequest::_Internal {
 public:
  static const ::testsgen::LineRequest& linerequest(const AssertionRequest* msg);
};

const ::testsgen::LineRequest&
AssertionRequest::_Internal::linerequest(const AssertionRequest* msg) {
  return *msg->_impl_.linerequest_;
}
AssertionRequest::AssertionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.AssertionRequest)
}
AssertionRequest::AssertionRequest(const AssertionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssertionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.linerequest_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linerequest()) {
    _this->_impl_.linerequest_ = new ::testsgen::LineRequest(*from._impl_.linerequest_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.AssertionRequest)
}

inline void AssertionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.linerequest_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AssertionRequest::~AssertionRequest() {
  // @@protoc_insertion_point(destructor:testsgen.AssertionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssertionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.linerequest_;
}

void AssertionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssertionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.AssertionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.linerequest_ != nullptr) {
    delete _impl_.linerequest_;
  }
  _impl_.linerequest_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssertionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .testsgen.LineRequest lineRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linerequest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssertionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.AssertionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.LineRequest lineRequest = 1;
  if (this->_internal_has_linerequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::linerequest(this),
        _Internal::linerequest(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.AssertionRequest)
  return target;
}

size_t AssertionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.AssertionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .testsgen.LineRequest lineRequest = 1;
  if (this->_internal_has_linerequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.linerequest_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssertionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssertionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssertionRequest::GetClassData() const { return &_class_data_; }


void AssertionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssertionRequest*>(&to_msg);
  auto& from = static_cast<const AssertionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.AssertionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_linerequest()) {
    _this->_internal_mutable_linerequest()->::testsgen::LineRequest::MergeFrom(
        from._internal_linerequest());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssertionRequest::CopyFrom(const AssertionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.AssertionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssertionRequest::IsInitialized() const {
  return true;
}

void AssertionRequest::InternalSwap(AssertionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.linerequest_, other->_impl_.linerequest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssertionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[17]);
}

// ===================================================================

class PredicateRequest::_Internal {
 public:
  static const ::testsgen::LineRequest& linerequest(const PredicateRequest* msg);
  static const ::testsgen::PredicateInfo& predicateinfo(const PredicateRequest* msg);
};

const ::testsgen::LineRequest&
PredicateRequest::_Internal::linerequest(const PredicateRequest* msg) {
  return *msg->_impl_.linerequest_;
}
const ::testsgen::PredicateInfo&
PredicateRequest::_Internal::predicateinfo(const PredicateRequest* msg) {
  return *msg->_impl_.predicateinfo_;
}
void PredicateRequest::clear_predicateinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.predicateinfo_ != nullptr) {
    delete _impl_.predicateinfo_;
  }
  _impl_.predicateinfo_ = nullptr;
}
PredicateRequest::PredicateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.PredicateRequest)
}
PredicateRequest::PredicateRequest(const PredicateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PredicateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.linerequest_){nullptr}
    , decltype(_impl_.predicateinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linerequest()) {
    _this->_impl_.linerequest_ = new ::testsgen::LineRequest(*from._impl_.linerequest_);
  }
  if (from._internal_has_predicateinfo()) {
    _this->_impl_.predicateinfo_ = new ::testsgen::PredicateInfo(*from._impl_.predicateinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.PredicateRequest)
}

inline void PredicateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.linerequest_){nullptr}
    , decltype(_impl_.predicateinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PredicateRequest::~PredicateRequest() {
  // @@protoc_insertion_point(destructor:testsgen.PredicateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PredicateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.linerequest_;
  if (this != internal_default_instance()) delete _impl_.predicateinfo_;
}

void PredicateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PredicateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.PredicateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.linerequest_ != nullptr) {
    delete _impl_.linerequest_;
  }
  _impl_.linerequest_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.predicateinfo_ != nullptr) {
    delete _impl_.predicateinfo_;
  }
  _impl_.predicateinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredicateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .testsgen.LineRequest lineRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linerequest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .testsgen.PredicateInfo predicateInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_predicateinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PredicateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.PredicateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.LineRequest lineRequest = 1;
  if (this->_internal_has_linerequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::linerequest(this),
        _Internal::linerequest(this).GetCachedSize(), target, stream);
  }

  // .testsgen.PredicateInfo predicateInfo = 2;
  if (this->_internal_has_predicateinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::predicateinfo(this),
        _Internal::predicateinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.PredicateRequest)
  return target;
}

size_t PredicateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.PredicateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .testsgen.LineRequest lineRequest = 1;
  if (this->_internal_has_linerequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.linerequest_);
  }

  // .testsgen.PredicateInfo predicateInfo = 2;
  if (this->_internal_has_predicateinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.predicateinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PredicateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PredicateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PredicateRequest::GetClassData() const { return &_class_data_; }


void PredicateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PredicateRequest*>(&to_msg);
  auto& from = static_cast<const PredicateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.PredicateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_linerequest()) {
    _this->_internal_mutable_linerequest()->::testsgen::LineRequest::MergeFrom(
        from._internal_linerequest());
  }
  if (from._internal_has_predicateinfo()) {
    _this->_internal_mutable_predicateinfo()->::testsgen::PredicateInfo::MergeFrom(
        from._internal_predicateinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PredicateRequest::CopyFrom(const PredicateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.PredicateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredicateRequest::IsInitialized() const {
  return true;
}

void PredicateRequest::InternalSwap(PredicateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PredicateRequest, _impl_.predicateinfo_)
      + sizeof(PredicateRequest::_impl_.predicateinfo_)
      - PROTOBUF_FIELD_OFFSET(PredicateRequest, _impl_.linerequest_)>(
          reinterpret_cast<char*>(&_impl_.linerequest_),
          reinterpret_cast<char*>(&other->_impl_.linerequest_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PredicateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[18]);
}

// ===================================================================

class StubsResponse::_Internal {
 public:
  static const ::testsgen::Progress& progress(const StubsResponse* msg);
};

const ::testsgen::Progress&
StubsResponse::_Internal::progress(const StubsResponse* msg) {
  return *msg->_impl_.progress_;
}
void StubsResponse::clear_stubsources() {
  _impl_.stubsources_.Clear();
}
void StubsResponse::clear_progress() {
  if (GetArenaForAllocation() == nullptr && _impl_.progress_ != nullptr) {
    delete _impl_.progress_;
  }
  _impl_.progress_ = nullptr;
}
StubsResponse::StubsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.StubsResponse)
}
StubsResponse::StubsResponse(const StubsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StubsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stubsources_){from._impl_.stubsources_}
    , decltype(_impl_.progress_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_progress()) {
    _this->_impl_.progress_ = new ::testsgen::Progress(*from._impl_.progress_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.StubsResponse)
}

inline void StubsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stubsources_){arena}
    , decltype(_impl_.progress_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StubsResponse::~StubsResponse() {
  // @@protoc_insertion_point(destructor:testsgen.StubsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StubsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stubsources_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.progress_;
}

void StubsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StubsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.StubsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stubsources_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.progress_ != nullptr) {
    delete _impl_.progress_;
  }
  _impl_.progress_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StubsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .testsgen.SourceCode stubSources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stubsources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .testsgen.Progress progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StubsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.StubsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .testsgen.SourceCode stubSources = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stubsources_size()); i < n; i++) {
    const auto& repfield = this->_internal_stubsources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .testsgen.Progress progress = 2;
  if (this->_internal_has_progress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::progress(this),
        _Internal::progress(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.StubsResponse)
  return target;
}

size_t StubsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.StubsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .testsgen.SourceCode stubSources = 1;
  total_size += 1UL * this->_internal_stubsources_size();
  for (const auto& msg : this->_impl_.stubsources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .testsgen.Progress progress = 2;
  if (this->_internal_has_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.progress_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StubsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StubsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StubsResponse::GetClassData() const { return &_class_data_; }


void StubsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StubsResponse*>(&to_msg);
  auto& from = static_cast<const StubsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.StubsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stubsources_.MergeFrom(from._impl_.stubsources_);
  if (from._internal_has_progress()) {
    _this->_internal_mutable_progress()->::testsgen::Progress::MergeFrom(
        from._internal_progress());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StubsResponse::CopyFrom(const StubsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.StubsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StubsResponse::IsInitialized() const {
  return true;
}

void StubsResponse::InternalSwap(StubsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stubsources_.InternalSwap(&other->_impl_.stubsources_);
  swap(_impl_.progress_, other->_impl_.progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StubsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[19]);
}

// ===================================================================

class TestsResponse::_Internal {
 public:
  static const ::testsgen::StubsResponse& stubs(const TestsResponse* msg);
  static const ::testsgen::Progress& progress(const TestsResponse* msg);
};

const ::testsgen::StubsResponse&
TestsResponse::_Internal::stubs(const TestsResponse* msg) {
  return *msg->_impl_.stubs_;
}
const ::testsgen::Progress&
TestsResponse::_Internal::progress(const TestsResponse* msg) {
  return *msg->_impl_.progress_;
}
void TestsResponse::clear_testsources() {
  _impl_.testsources_.Clear();
}
void TestsResponse::clear_progress() {
  if (GetArenaForAllocation() == nullptr && _impl_.progress_ != nullptr) {
    delete _impl_.progress_;
  }
  _impl_.progress_ = nullptr;
}
TestsResponse::TestsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.TestsResponse)
}
TestsResponse::TestsResponse(const TestsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.testsources_){from._impl_.testsources_}
    , decltype(_impl_.stubs_){nullptr}
    , decltype(_impl_.progress_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stubs()) {
    _this->_impl_.stubs_ = new ::testsgen::StubsResponse(*from._impl_.stubs_);
  }
  if (from._internal_has_progress()) {
    _this->_impl_.progress_ = new ::testsgen::Progress(*from._impl_.progress_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.TestsResponse)
}

inline void TestsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.testsources_){arena}
    , decltype(_impl_.stubs_){nullptr}
    , decltype(_impl_.progress_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestsResponse::~TestsResponse() {
  // @@protoc_insertion_point(destructor:testsgen.TestsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.testsources_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.stubs_;
  if (this != internal_default_instance()) delete _impl_.progress_;
}

void TestsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.TestsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.testsources_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.stubs_ != nullptr) {
    delete _impl_.stubs_;
  }
  _impl_.stubs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.progress_ != nullptr) {
    delete _impl_.progress_;
  }
  _impl_.progress_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .testsgen.SourceCode testSources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_testsources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .testsgen.StubsResponse stubs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stubs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .testsgen.Progress progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.TestsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .testsgen.SourceCode testSources = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_testsources_size()); i < n; i++) {
    const auto& repfield = this->_internal_testsources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .testsgen.StubsResponse stubs = 2;
  if (this->_internal_has_stubs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stubs(this),
        _Internal::stubs(this).GetCachedSize(), target, stream);
  }

  // .testsgen.Progress progress = 3;
  if (this->_internal_has_progress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::progress(this),
        _Internal::progress(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.TestsResponse)
  return target;
}

size_t TestsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.TestsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .testsgen.SourceCode testSources = 1;
  total_size += 1UL * this->_internal_testsources_size();
  for (const auto& msg : this->_impl_.testsources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .testsgen.StubsResponse stubs = 2;
  if (this->_internal_has_stubs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stubs_);
  }

  // .testsgen.Progress progress = 3;
  if (this->_internal_has_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.progress_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestsResponse::GetClassData() const { return &_class_data_; }


void TestsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestsResponse*>(&to_msg);
  auto& from = static_cast<const TestsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.TestsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.testsources_.MergeFrom(from._impl_.testsources_);
  if (from._internal_has_stubs()) {
    _this->_internal_mutable_stubs()->::testsgen::StubsResponse::MergeFrom(
        from._internal_stubs());
  }
  if (from._internal_has_progress()) {
    _this->_internal_mutable_progress()->::testsgen::Progress::MergeFrom(
        from._internal_progress());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestsResponse::CopyFrom(const TestsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.TestsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestsResponse::IsInitialized() const {
  return true;
}

void TestsResponse::InternalSwap(TestsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.testsources_.InternalSwap(&other->_impl_.testsources_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestsResponse, _impl_.progress_)
      + sizeof(TestsResponse::_impl_.progress_)
      - PROTOBUF_FIELD_OFFSET(TestsResponse, _impl_.stubs_)>(
          reinterpret_cast<char*>(&_impl_.stubs_),
          reinterpret_cast<char*>(&other->_impl_.stubs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[20]);
}

// ===================================================================

class SourceLine::_Internal {
 public:
};

SourceLine::SourceLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.SourceLine)
}
SourceLine::SourceLine(const SourceLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SourceLine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.line_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.line_ = from._impl_.line_;
  // @@protoc_insertion_point(copy_constructor:testsgen.SourceLine)
}

inline void SourceLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.line_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SourceLine::~SourceLine() {
  // @@protoc_insertion_point(destructor:testsgen.SourceLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SourceLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SourceLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SourceLine::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.SourceLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.line_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SourceLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.SourceLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 line = 1;
  if (this->_internal_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.SourceLine)
  return target;
}

size_t SourceLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.SourceLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 line = 1;
  if (this->_internal_line() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_line());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SourceLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SourceLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SourceLine::GetClassData() const { return &_class_data_; }


void SourceLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SourceLine*>(&to_msg);
  auto& from = static_cast<const SourceLine&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.SourceLine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_line() != 0) {
    _this->_internal_set_line(from._internal_line());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SourceLine::CopyFrom(const SourceLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.SourceLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceLine::IsInitialized() const {
  return true;
}

void SourceLine::InternalSwap(SourceLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.line_, other->_impl_.line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[21]);
}

// ===================================================================

class FileCoverageSimplified::_Internal {
 public:
};

FileCoverageSimplified::FileCoverageSimplified(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.FileCoverageSimplified)
}
FileCoverageSimplified::FileCoverageSimplified(const FileCoverageSimplified& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileCoverageSimplified* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fullcoveragelines_){from._impl_.fullcoveragelines_}
    , decltype(_impl_.partialcoveragelines_){from._impl_.partialcoveragelines_}
    , decltype(_impl_.nocoveragelines_){from._impl_.nocoveragelines_}
    , decltype(_impl_.filepath_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filepath().empty()) {
    _this->_impl_.filepath_.Set(from._internal_filepath(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.FileCoverageSimplified)
}

inline void FileCoverageSimplified::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fullcoveragelines_){arena}
    , decltype(_impl_.partialcoveragelines_){arena}
    , decltype(_impl_.nocoveragelines_){arena}
    , decltype(_impl_.filepath_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileCoverageSimplified::~FileCoverageSimplified() {
  // @@protoc_insertion_point(destructor:testsgen.FileCoverageSimplified)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileCoverageSimplified::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fullcoveragelines_.~RepeatedPtrField();
  _impl_.partialcoveragelines_.~RepeatedPtrField();
  _impl_.nocoveragelines_.~RepeatedPtrField();
  _impl_.filepath_.Destroy();
}

void FileCoverageSimplified::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileCoverageSimplified::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.FileCoverageSimplified)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fullcoveragelines_.Clear();
  _impl_.partialcoveragelines_.Clear();
  _impl_.nocoveragelines_.Clear();
  _impl_.filepath_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileCoverageSimplified::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.FileCoverageSimplified.filePath"));
        } else
          goto handle_unusual;
        continue;
      // repeated .testsgen.SourceLine fullCoverageLines = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fullcoveragelines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .testsgen.SourceLine partialCoverageLines = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partialcoveragelines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .testsgen.SourceLine noCoverageLines = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nocoveragelines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileCoverageSimplified::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.FileCoverageSimplified)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filePath = 1;
  if (!this->_internal_filepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.FileCoverageSimplified.filePath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filepath(), target);
  }

  // repeated .testsgen.SourceLine fullCoverageLines = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fullcoveragelines_size()); i < n; i++) {
    const auto& repfield = this->_internal_fullcoveragelines(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .testsgen.SourceLine partialCoverageLines = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_partialcoveragelines_size()); i < n; i++) {
    const auto& repfield = this->_internal_partialcoveragelines(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .testsgen.SourceLine noCoverageLines = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nocoveragelines_size()); i < n; i++) {
    const auto& repfield = this->_internal_nocoveragelines(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.FileCoverageSimplified)
  return target;
}

size_t FileCoverageSimplified::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.FileCoverageSimplified)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .testsgen.SourceLine fullCoverageLines = 2;
  total_size += 1UL * this->_internal_fullcoveragelines_size();
  for (const auto& msg : this->_impl_.fullcoveragelines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .testsgen.SourceLine partialCoverageLines = 3;
  total_size += 1UL * this->_internal_partialcoveragelines_size();
  for (const auto& msg : this->_impl_.partialcoveragelines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .testsgen.SourceLine noCoverageLines = 4;
  total_size += 1UL * this->_internal_nocoveragelines_size();
  for (const auto& msg : this->_impl_.nocoveragelines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string filePath = 1;
  if (!this->_internal_filepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filepath());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileCoverageSimplified::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileCoverageSimplified::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileCoverageSimplified::GetClassData() const { return &_class_data_; }


void FileCoverageSimplified::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileCoverageSimplified*>(&to_msg);
  auto& from = static_cast<const FileCoverageSimplified&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.FileCoverageSimplified)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fullcoveragelines_.MergeFrom(from._impl_.fullcoveragelines_);
  _this->_impl_.partialcoveragelines_.MergeFrom(from._impl_.partialcoveragelines_);
  _this->_impl_.nocoveragelines_.MergeFrom(from._impl_.nocoveragelines_);
  if (!from._internal_filepath().empty()) {
    _this->_internal_set_filepath(from._internal_filepath());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileCoverageSimplified::CopyFrom(const FileCoverageSimplified& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.FileCoverageSimplified)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileCoverageSimplified::IsInitialized() const {
  return true;
}

void FileCoverageSimplified::InternalSwap(FileCoverageSimplified* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fullcoveragelines_.InternalSwap(&other->_impl_.fullcoveragelines_);
  _impl_.partialcoveragelines_.InternalSwap(&other->_impl_.partialcoveragelines_);
  _impl_.nocoveragelines_.InternalSwap(&other->_impl_.nocoveragelines_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filepath_, lhs_arena,
      &other->_impl_.filepath_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FileCoverageSimplified::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[22]);
}

// ===================================================================

class TestFilter::_Internal {
 public:
};

TestFilter::TestFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.TestFilter)
}
TestFilter::TestFilter(const TestFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.testfilepath_){}
    , decltype(_impl_.testname_){}
    , decltype(_impl_.testsuite_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.testfilepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testfilepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_testfilepath().empty()) {
    _this->_impl_.testfilepath_.Set(from._internal_testfilepath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.testname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_testname().empty()) {
    _this->_impl_.testname_.Set(from._internal_testname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.testsuite_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testsuite_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_testsuite().empty()) {
    _this->_impl_.testsuite_.Set(from._internal_testsuite(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.TestFilter)
}

inline void TestFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.testfilepath_){}
    , decltype(_impl_.testname_){}
    , decltype(_impl_.testsuite_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.testfilepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testfilepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.testname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.testsuite_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testsuite_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestFilter::~TestFilter() {
  // @@protoc_insertion_point(destructor:testsgen.TestFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.testfilepath_.Destroy();
  _impl_.testname_.Destroy();
  _impl_.testsuite_.Destroy();
}

void TestFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.TestFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.testfilepath_.ClearToEmpty();
  _impl_.testname_.ClearToEmpty();
  _impl_.testsuite_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string testFilePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_testfilepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.TestFilter.testFilePath"));
        } else
          goto handle_unusual;
        continue;
      // string testName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_testname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.TestFilter.testName"));
        } else
          goto handle_unusual;
        continue;
      // string testSuite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_testsuite();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.TestFilter.testSuite"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.TestFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string testFilePath = 1;
  if (!this->_internal_testfilepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_testfilepath().data(), static_cast<int>(this->_internal_testfilepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.TestFilter.testFilePath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_testfilepath(), target);
  }

  // string testName = 2;
  if (!this->_internal_testname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_testname().data(), static_cast<int>(this->_internal_testname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.TestFilter.testName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_testname(), target);
  }

  // string testSuite = 3;
  if (!this->_internal_testsuite().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_testsuite().data(), static_cast<int>(this->_internal_testsuite().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.TestFilter.testSuite");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_testsuite(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.TestFilter)
  return target;
}

size_t TestFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.TestFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string testFilePath = 1;
  if (!this->_internal_testfilepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_testfilepath());
  }

  // string testName = 2;
  if (!this->_internal_testname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_testname());
  }

  // string testSuite = 3;
  if (!this->_internal_testsuite().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_testsuite());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestFilter::GetClassData() const { return &_class_data_; }


void TestFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestFilter*>(&to_msg);
  auto& from = static_cast<const TestFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.TestFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_testfilepath().empty()) {
    _this->_internal_set_testfilepath(from._internal_testfilepath());
  }
  if (!from._internal_testname().empty()) {
    _this->_internal_set_testname(from._internal_testname());
  }
  if (!from._internal_testsuite().empty()) {
    _this->_internal_set_testsuite(from._internal_testsuite());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestFilter::CopyFrom(const TestFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.TestFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFilter::IsInitialized() const {
  return true;
}

void TestFilter::InternalSwap(TestFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.testfilepath_, lhs_arena,
      &other->_impl_.testfilepath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.testname_, lhs_arena,
      &other->_impl_.testname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.testsuite_, lhs_arena,
      &other->_impl_.testsuite_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TestFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[23]);
}

// ===================================================================

class CoverageAndResultsRequest::_Internal {
 public:
  static const ::testsgen::ProjectContext& projectcontext(const CoverageAndResultsRequest* msg);
  static const ::testsgen::SettingsContext& settingscontext(const CoverageAndResultsRequest* msg);
  static const ::testsgen::TestFilter& testfilter(const CoverageAndResultsRequest* msg);
};

const ::testsgen::ProjectContext&
CoverageAndResultsRequest::_Internal::projectcontext(const CoverageAndResultsRequest* msg) {
  return *msg->_impl_.projectcontext_;
}
const ::testsgen::SettingsContext&
CoverageAndResultsRequest::_Internal::settingscontext(const CoverageAndResultsRequest* msg) {
  return *msg->_impl_.settingscontext_;
}
const ::testsgen::TestFilter&
CoverageAndResultsRequest::_Internal::testfilter(const CoverageAndResultsRequest* msg) {
  return *msg->_impl_.testfilter_;
}
CoverageAndResultsRequest::CoverageAndResultsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.CoverageAndResultsRequest)
}
CoverageAndResultsRequest::CoverageAndResultsRequest(const CoverageAndResultsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CoverageAndResultsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.projectcontext_){nullptr}
    , decltype(_impl_.settingscontext_){nullptr}
    , decltype(_impl_.testfilter_){nullptr}
    , decltype(_impl_.coverage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_projectcontext()) {
    _this->_impl_.projectcontext_ = new ::testsgen::ProjectContext(*from._impl_.projectcontext_);
  }
  if (from._internal_has_settingscontext()) {
    _this->_impl_.settingscontext_ = new ::testsgen::SettingsContext(*from._impl_.settingscontext_);
  }
  if (from._internal_has_testfilter()) {
    _this->_impl_.testfilter_ = new ::testsgen::TestFilter(*from._impl_.testfilter_);
  }
  _this->_impl_.coverage_ = from._impl_.coverage_;
  // @@protoc_insertion_point(copy_constructor:testsgen.CoverageAndResultsRequest)
}

inline void CoverageAndResultsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.projectcontext_){nullptr}
    , decltype(_impl_.settingscontext_){nullptr}
    , decltype(_impl_.testfilter_){nullptr}
    , decltype(_impl_.coverage_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CoverageAndResultsRequest::~CoverageAndResultsRequest() {
  // @@protoc_insertion_point(destructor:testsgen.CoverageAndResultsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CoverageAndResultsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.projectcontext_;
  if (this != internal_default_instance()) delete _impl_.settingscontext_;
  if (this != internal_default_instance()) delete _impl_.testfilter_;
}

void CoverageAndResultsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CoverageAndResultsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.CoverageAndResultsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.projectcontext_ != nullptr) {
    delete _impl_.projectcontext_;
  }
  _impl_.projectcontext_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.settingscontext_ != nullptr) {
    delete _impl_.settingscontext_;
  }
  _impl_.settingscontext_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.testfilter_ != nullptr) {
    delete _impl_.testfilter_;
  }
  _impl_.testfilter_ = nullptr;
  _impl_.coverage_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoverageAndResultsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .testsgen.ProjectContext projectContext = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectcontext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .testsgen.SettingsContext settingsContext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_settingscontext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .testsgen.TestFilter testFilter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_testfilter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool coverage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.coverage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoverageAndResultsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.CoverageAndResultsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ProjectContext projectContext = 1;
  if (this->_internal_has_projectcontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::projectcontext(this),
        _Internal::projectcontext(this).GetCachedSize(), target, stream);
  }

  // .testsgen.SettingsContext settingsContext = 2;
  if (this->_internal_has_settingscontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::settingscontext(this),
        _Internal::settingscontext(this).GetCachedSize(), target, stream);
  }

  // .testsgen.TestFilter testFilter = 3;
  if (this->_internal_has_testfilter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::testfilter(this),
        _Internal::testfilter(this).GetCachedSize(), target, stream);
  }

  // bool coverage = 4;
  if (this->_internal_coverage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_coverage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.CoverageAndResultsRequest)
  return target;
}

size_t CoverageAndResultsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.CoverageAndResultsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .testsgen.ProjectContext projectContext = 1;
  if (this->_internal_has_projectcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.projectcontext_);
  }

  // .testsgen.SettingsContext settingsContext = 2;
  if (this->_internal_has_settingscontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.settingscontext_);
  }

  // .testsgen.TestFilter testFilter = 3;
  if (this->_internal_has_testfilter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.testfilter_);
  }

  // bool coverage = 4;
  if (this->_internal_coverage() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoverageAndResultsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CoverageAndResultsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoverageAndResultsRequest::GetClassData() const { return &_class_data_; }


void CoverageAndResultsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CoverageAndResultsRequest*>(&to_msg);
  auto& from = static_cast<const CoverageAndResultsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.CoverageAndResultsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_projectcontext()) {
    _this->_internal_mutable_projectcontext()->::testsgen::ProjectContext::MergeFrom(
        from._internal_projectcontext());
  }
  if (from._internal_has_settingscontext()) {
    _this->_internal_mutable_settingscontext()->::testsgen::SettingsContext::MergeFrom(
        from._internal_settingscontext());
  }
  if (from._internal_has_testfilter()) {
    _this->_internal_mutable_testfilter()->::testsgen::TestFilter::MergeFrom(
        from._internal_testfilter());
  }
  if (from._internal_coverage() != 0) {
    _this->_internal_set_coverage(from._internal_coverage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoverageAndResultsRequest::CopyFrom(const CoverageAndResultsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.CoverageAndResultsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoverageAndResultsRequest::IsInitialized() const {
  return true;
}

void CoverageAndResultsRequest::InternalSwap(CoverageAndResultsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoverageAndResultsRequest, _impl_.coverage_)
      + sizeof(CoverageAndResultsRequest::_impl_.coverage_)
      - PROTOBUF_FIELD_OFFSET(CoverageAndResultsRequest, _impl_.projectcontext_)>(
          reinterpret_cast<char*>(&_impl_.projectcontext_),
          reinterpret_cast<char*>(&other->_impl_.projectcontext_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CoverageAndResultsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[24]);
}

// ===================================================================

class TestResultObject::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& executiontime(const TestResultObject* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
TestResultObject::_Internal::executiontime(const TestResultObject* msg) {
  return *msg->_impl_.executiontime_;
}
void TestResultObject::clear_executiontime() {
  if (GetArenaForAllocation() == nullptr && _impl_.executiontime_ != nullptr) {
    delete _impl_.executiontime_;
  }
  _impl_.executiontime_ = nullptr;
}
TestResultObject::TestResultObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.TestResultObject)
}
TestResultObject::TestResultObject(const TestResultObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestResultObject* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.testfilepath_){}
    , decltype(_impl_.testname_){}
    , decltype(_impl_.output_){}
    , decltype(_impl_.executiontime_){nullptr}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.testfilepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testfilepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_testfilepath().empty()) {
    _this->_impl_.testfilepath_.Set(from._internal_testfilepath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.testname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_testname().empty()) {
    _this->_impl_.testname_.Set(from._internal_testname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_output().empty()) {
    _this->_impl_.output_.Set(from._internal_output(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_executiontime()) {
    _this->_impl_.executiontime_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.executiontime_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:testsgen.TestResultObject)
}

inline void TestResultObject::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.testfilepath_){}
    , decltype(_impl_.testname_){}
    , decltype(_impl_.output_){}
    , decltype(_impl_.executiontime_){nullptr}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.testfilepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testfilepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.testname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestResultObject::~TestResultObject() {
  // @@protoc_insertion_point(destructor:testsgen.TestResultObject)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestResultObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.testfilepath_.Destroy();
  _impl_.testname_.Destroy();
  _impl_.output_.Destroy();
  if (this != internal_default_instance()) delete _impl_.executiontime_;
}

void TestResultObject::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestResultObject::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.TestResultObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.testfilepath_.ClearToEmpty();
  _impl_.testname_.ClearToEmpty();
  _impl_.output_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.executiontime_ != nullptr) {
    delete _impl_.executiontime_;
  }
  _impl_.executiontime_ = nullptr;
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestResultObject::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string testFilePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_testfilepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.TestResultObject.testFilePath"));
        } else
          goto handle_unusual;
        continue;
      // string testname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_testname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.TestResultObject.testname"));
        } else
          goto handle_unusual;
        continue;
      // .testsgen.TestStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::testsgen::TestStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string output = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_output();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.TestResultObject.output"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration executionTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_executiontime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestResultObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.TestResultObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string testFilePath = 1;
  if (!this->_internal_testfilepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_testfilepath().data(), static_cast<int>(this->_internal_testfilepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.TestResultObject.testFilePath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_testfilepath(), target);
  }

  // string testname = 2;
  if (!this->_internal_testname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_testname().data(), static_cast<int>(this->_internal_testname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.TestResultObject.testname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_testname(), target);
  }

  // .testsgen.TestStatus status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // string output = 4;
  if (!this->_internal_output().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output().data(), static_cast<int>(this->_internal_output().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.TestResultObject.output");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_output(), target);
  }

  // .google.protobuf.Duration executionTime = 5;
  if (this->_internal_has_executiontime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::executiontime(this),
        _Internal::executiontime(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.TestResultObject)
  return target;
}

size_t TestResultObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.TestResultObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string testFilePath = 1;
  if (!this->_internal_testfilepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_testfilepath());
  }

  // string testname = 2;
  if (!this->_internal_testname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_testname());
  }

  // string output = 4;
  if (!this->_internal_output().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output());
  }

  // .google.protobuf.Duration executionTime = 5;
  if (this->_internal_has_executiontime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.executiontime_);
  }

  // .testsgen.TestStatus status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestResultObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestResultObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestResultObject::GetClassData() const { return &_class_data_; }


void TestResultObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestResultObject*>(&to_msg);
  auto& from = static_cast<const TestResultObject&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.TestResultObject)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_testfilepath().empty()) {
    _this->_internal_set_testfilepath(from._internal_testfilepath());
  }
  if (!from._internal_testname().empty()) {
    _this->_internal_set_testname(from._internal_testname());
  }
  if (!from._internal_output().empty()) {
    _this->_internal_set_output(from._internal_output());
  }
  if (from._internal_has_executiontime()) {
    _this->_internal_mutable_executiontime()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_executiontime());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestResultObject::CopyFrom(const TestResultObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.TestResultObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestResultObject::IsInitialized() const {
  return true;
}

void TestResultObject::InternalSwap(TestResultObject* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.testfilepath_, lhs_arena,
      &other->_impl_.testfilepath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.testname_, lhs_arena,
      &other->_impl_.testname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_, lhs_arena,
      &other->_impl_.output_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestResultObject, _impl_.status_)
      + sizeof(TestResultObject::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(TestResultObject, _impl_.executiontime_)>(
          reinterpret_cast<char*>(&_impl_.executiontime_),
          reinterpret_cast<char*>(&other->_impl_.executiontime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestResultObject::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[25]);
}

// ===================================================================

class CoverageAndResultsResponse::_Internal {
 public:
  static const ::testsgen::Progress& progress(const CoverageAndResultsResponse* msg);
};

const ::testsgen::Progress&
CoverageAndResultsResponse::_Internal::progress(const CoverageAndResultsResponse* msg) {
  return *msg->_impl_.progress_;
}
void CoverageAndResultsResponse::clear_progress() {
  if (GetArenaForAllocation() == nullptr && _impl_.progress_ != nullptr) {
    delete _impl_.progress_;
  }
  _impl_.progress_ = nullptr;
}
CoverageAndResultsResponse::CoverageAndResultsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.CoverageAndResultsResponse)
}
CoverageAndResultsResponse::CoverageAndResultsResponse(const CoverageAndResultsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CoverageAndResultsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.testrunresults_){from._impl_.testrunresults_}
    , decltype(_impl_.coverages_){from._impl_.coverages_}
    , decltype(_impl_.errormessage_){}
    , decltype(_impl_.progress_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.errormessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errormessage().empty()) {
    _this->_impl_.errormessage_.Set(from._internal_errormessage(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_progress()) {
    _this->_impl_.progress_ = new ::testsgen::Progress(*from._impl_.progress_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.CoverageAndResultsResponse)
}

inline void CoverageAndResultsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.testrunresults_){arena}
    , decltype(_impl_.coverages_){arena}
    , decltype(_impl_.errormessage_){}
    , decltype(_impl_.progress_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.errormessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CoverageAndResultsResponse::~CoverageAndResultsResponse() {
  // @@protoc_insertion_point(destructor:testsgen.CoverageAndResultsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CoverageAndResultsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.testrunresults_.~RepeatedPtrField();
  _impl_.coverages_.~RepeatedPtrField();
  _impl_.errormessage_.Destroy();
  if (this != internal_default_instance()) delete _impl_.progress_;
}

void CoverageAndResultsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CoverageAndResultsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.CoverageAndResultsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.testrunresults_.Clear();
  _impl_.coverages_.Clear();
  _impl_.errormessage_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.progress_ != nullptr) {
    delete _impl_.progress_;
  }
  _impl_.progress_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoverageAndResultsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .testsgen.TestResultObject testRunResults = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_testrunresults(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .testsgen.FileCoverageSimplified coverages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coverages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .testsgen.Progress progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errorMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_errormessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.CoverageAndResultsResponse.errorMessage"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoverageAndResultsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.CoverageAndResultsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .testsgen.TestResultObject testRunResults = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_testrunresults_size()); i < n; i++) {
    const auto& repfield = this->_internal_testrunresults(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .testsgen.FileCoverageSimplified coverages = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_coverages_size()); i < n; i++) {
    const auto& repfield = this->_internal_coverages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .testsgen.Progress progress = 3;
  if (this->_internal_has_progress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::progress(this),
        _Internal::progress(this).GetCachedSize(), target, stream);
  }

  // string errorMessage = 4;
  if (!this->_internal_errormessage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormessage().data(), static_cast<int>(this->_internal_errormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.CoverageAndResultsResponse.errorMessage");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_errormessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.CoverageAndResultsResponse)
  return target;
}

size_t CoverageAndResultsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.CoverageAndResultsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .testsgen.TestResultObject testRunResults = 1;
  total_size += 1UL * this->_internal_testrunresults_size();
  for (const auto& msg : this->_impl_.testrunresults_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .testsgen.FileCoverageSimplified coverages = 2;
  total_size += 1UL * this->_internal_coverages_size();
  for (const auto& msg : this->_impl_.coverages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string errorMessage = 4;
  if (!this->_internal_errormessage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormessage());
  }

  // .testsgen.Progress progress = 3;
  if (this->_internal_has_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.progress_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoverageAndResultsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CoverageAndResultsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoverageAndResultsResponse::GetClassData() const { return &_class_data_; }


void CoverageAndResultsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CoverageAndResultsResponse*>(&to_msg);
  auto& from = static_cast<const CoverageAndResultsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.CoverageAndResultsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.testrunresults_.MergeFrom(from._impl_.testrunresults_);
  _this->_impl_.coverages_.MergeFrom(from._impl_.coverages_);
  if (!from._internal_errormessage().empty()) {
    _this->_internal_set_errormessage(from._internal_errormessage());
  }
  if (from._internal_has_progress()) {
    _this->_internal_mutable_progress()->::testsgen::Progress::MergeFrom(
        from._internal_progress());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoverageAndResultsResponse::CopyFrom(const CoverageAndResultsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.CoverageAndResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoverageAndResultsResponse::IsInitialized() const {
  return true;
}

void CoverageAndResultsResponse::InternalSwap(CoverageAndResultsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.testrunresults_.InternalSwap(&other->_impl_.testrunresults_);
  _impl_.coverages_.InternalSwap(&other->_impl_.coverages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errormessage_, lhs_arena,
      &other->_impl_.errormessage_, rhs_arena
  );
  swap(_impl_.progress_, other->_impl_.progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoverageAndResultsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[26]);
}

// ===================================================================

class HeartbeatResponse::_Internal {
 public:
};

HeartbeatResponse::HeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.HeartbeatResponse)
}
HeartbeatResponse::HeartbeatResponse(const HeartbeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartbeatResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.linked_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.linked_ = from._impl_.linked_;
  // @@protoc_insertion_point(copy_constructor:testsgen.HeartbeatResponse)
}

inline void HeartbeatResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.linked_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeartbeatResponse::~HeartbeatResponse() {
  // @@protoc_insertion_point(destructor:testsgen.HeartbeatResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartbeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeartbeatResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.HeartbeatResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.linked_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool linked = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.linked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartbeatResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.HeartbeatResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool linked = 1;
  if (this->_internal_linked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_linked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.HeartbeatResponse)
  return target;
}

size_t HeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.HeartbeatResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool linked = 1;
  if (this->_internal_linked() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartbeatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatResponse::GetClassData() const { return &_class_data_; }


void HeartbeatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartbeatResponse*>(&to_msg);
  auto& from = static_cast<const HeartbeatResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.HeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_linked() != 0) {
    _this->_internal_set_linked(from._internal_linked());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatResponse::CopyFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.HeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatResponse::IsInitialized() const {
  return true;
}

void HeartbeatResponse::InternalSwap(HeartbeatResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.linked_, other->_impl_.linked_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[27]);
}

// ===================================================================

class ProjectConfigRequest::_Internal {
 public:
  static const ::testsgen::ProjectContext& projectcontext(const ProjectConfigRequest* msg);
};

const ::testsgen::ProjectContext&
ProjectConfigRequest::_Internal::projectcontext(const ProjectConfigRequest* msg) {
  return *msg->_impl_.projectcontext_;
}
ProjectConfigRequest::ProjectConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.ProjectConfigRequest)
}
ProjectConfigRequest::ProjectConfigRequest(const ProjectConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProjectConfigRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cmakeoptions_){from._impl_.cmakeoptions_}
    , decltype(_impl_.projectcontext_){nullptr}
    , decltype(_impl_.configmode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_projectcontext()) {
    _this->_impl_.projectcontext_ = new ::testsgen::ProjectContext(*from._impl_.projectcontext_);
  }
  _this->_impl_.configmode_ = from._impl_.configmode_;
  // @@protoc_insertion_point(copy_constructor:testsgen.ProjectConfigRequest)
}

inline void ProjectConfigRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cmakeoptions_){arena}
    , decltype(_impl_.projectcontext_){nullptr}
    , decltype(_impl_.configmode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProjectConfigRequest::~ProjectConfigRequest() {
  // @@protoc_insertion_point(destructor:testsgen.ProjectConfigRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProjectConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cmakeoptions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.projectcontext_;
}

void ProjectConfigRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProjectConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.ProjectConfigRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cmakeoptions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.projectcontext_ != nullptr) {
    delete _impl_.projectcontext_;
  }
  _impl_.projectcontext_ = nullptr;
  _impl_.configmode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectConfigRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .testsgen.ProjectContext projectContext = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectcontext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .testsgen.ConfigMode configMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_configmode(static_cast<::testsgen::ConfigMode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string cmakeOptions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cmakeoptions();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "testsgen.ProjectConfigRequest.cmakeOptions"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProjectConfigRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.ProjectConfigRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ProjectContext projectContext = 1;
  if (this->_internal_has_projectcontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::projectcontext(this),
        _Internal::projectcontext(this).GetCachedSize(), target, stream);
  }

  // .testsgen.ConfigMode configMode = 2;
  if (this->_internal_configmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_configmode(), target);
  }

  // repeated string cmakeOptions = 3;
  for (int i = 0, n = this->_internal_cmakeoptions_size(); i < n; i++) {
    const auto& s = this->_internal_cmakeoptions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectConfigRequest.cmakeOptions");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.ProjectConfigRequest)
  return target;
}

size_t ProjectConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.ProjectConfigRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cmakeOptions = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.cmakeoptions_.size());
  for (int i = 0, n = _impl_.cmakeoptions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.cmakeoptions_.Get(i));
  }

  // .testsgen.ProjectContext projectContext = 1;
  if (this->_internal_has_projectcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.projectcontext_);
  }

  // .testsgen.ConfigMode configMode = 2;
  if (this->_internal_configmode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_configmode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProjectConfigRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProjectConfigRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProjectConfigRequest::GetClassData() const { return &_class_data_; }


void ProjectConfigRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProjectConfigRequest*>(&to_msg);
  auto& from = static_cast<const ProjectConfigRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.ProjectConfigRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cmakeoptions_.MergeFrom(from._impl_.cmakeoptions_);
  if (from._internal_has_projectcontext()) {
    _this->_internal_mutable_projectcontext()->::testsgen::ProjectContext::MergeFrom(
        from._internal_projectcontext());
  }
  if (from._internal_configmode() != 0) {
    _this->_internal_set_configmode(from._internal_configmode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProjectConfigRequest::CopyFrom(const ProjectConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.ProjectConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectConfigRequest::IsInitialized() const {
  return true;
}

void ProjectConfigRequest::InternalSwap(ProjectConfigRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cmakeoptions_.InternalSwap(&other->_impl_.cmakeoptions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjectConfigRequest, _impl_.configmode_)
      + sizeof(ProjectConfigRequest::_impl_.configmode_)
      - PROTOBUF_FIELD_OFFSET(ProjectConfigRequest, _impl_.projectcontext_)>(
          reinterpret_cast<char*>(&_impl_.projectcontext_),
          reinterpret_cast<char*>(&other->_impl_.projectcontext_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectConfigRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[28]);
}

// ===================================================================

class ProjectConfigResponse::_Internal {
 public:
  static const ::testsgen::Progress& progress(const ProjectConfigResponse* msg);
};

const ::testsgen::Progress&
ProjectConfigResponse::_Internal::progress(const ProjectConfigResponse* msg) {
  return *msg->_impl_.progress_;
}
void ProjectConfigResponse::clear_progress() {
  if (GetArenaForAllocation() == nullptr && _impl_.progress_ != nullptr) {
    delete _impl_.progress_;
  }
  _impl_.progress_ = nullptr;
}
ProjectConfigResponse::ProjectConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.ProjectConfigResponse)
}
ProjectConfigResponse::ProjectConfigResponse(const ProjectConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProjectConfigResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.progress_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_progress()) {
    _this->_impl_.progress_ = new ::testsgen::Progress(*from._impl_.progress_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:testsgen.ProjectConfigResponse)
}

inline void ProjectConfigResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.progress_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProjectConfigResponse::~ProjectConfigResponse() {
  // @@protoc_insertion_point(destructor:testsgen.ProjectConfigResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProjectConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.progress_;
}

void ProjectConfigResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProjectConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.ProjectConfigResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.progress_ != nullptr) {
    delete _impl_.progress_;
  }
  _impl_.progress_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectConfigResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .testsgen.ProjectConfigStatus type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::testsgen::ProjectConfigStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.ProjectConfigResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // .testsgen.Progress progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProjectConfigResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.ProjectConfigResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ProjectConfigStatus type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectConfigResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .testsgen.Progress progress = 3;
  if (this->_internal_has_progress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::progress(this),
        _Internal::progress(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.ProjectConfigResponse)
  return target;
}

size_t ProjectConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.ProjectConfigResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .testsgen.Progress progress = 3;
  if (this->_internal_has_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.progress_);
  }

  // .testsgen.ProjectConfigStatus type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProjectConfigResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProjectConfigResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProjectConfigResponse::GetClassData() const { return &_class_data_; }


void ProjectConfigResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProjectConfigResponse*>(&to_msg);
  auto& from = static_cast<const ProjectConfigResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.ProjectConfigResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_progress()) {
    _this->_internal_mutable_progress()->::testsgen::Progress::MergeFrom(
        from._internal_progress());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProjectConfigResponse::CopyFrom(const ProjectConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.ProjectConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectConfigResponse::IsInitialized() const {
  return true;
}

void ProjectConfigResponse::InternalSwap(ProjectConfigResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjectConfigResponse, _impl_.type_)
      + sizeof(ProjectConfigResponse::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(ProjectConfigResponse, _impl_.progress_)>(
          reinterpret_cast<char*>(&_impl_.progress_),
          reinterpret_cast<char*>(&other->_impl_.progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectConfigResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[29]);
}

// ===================================================================

class ProjectTarget::_Internal {
 public:
};

ProjectTarget::ProjectTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.ProjectTarget)
}
ProjectTarget::ProjectTarget(const ProjectTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProjectTarget* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.description_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.ProjectTarget)
}

inline void ProjectTarget::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.description_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProjectTarget::~ProjectTarget() {
  // @@protoc_insertion_point(destructor:testsgen.ProjectTarget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProjectTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.path_.Destroy();
  _impl_.description_.Destroy();
}

void ProjectTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProjectTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.ProjectTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectTarget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.ProjectTarget.name"));
        } else
          goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.ProjectTarget.path"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.ProjectTarget.description"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProjectTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.ProjectTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectTarget.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectTarget.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectTarget.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.ProjectTarget)
  return target;
}

size_t ProjectTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.ProjectTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProjectTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProjectTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProjectTarget::GetClassData() const { return &_class_data_; }


void ProjectTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProjectTarget*>(&to_msg);
  auto& from = static_cast<const ProjectTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.ProjectTarget)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProjectTarget::CopyFrom(const ProjectTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.ProjectTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectTarget::IsInitialized() const {
  return true;
}

void ProjectTarget::InternalSwap(ProjectTarget* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[30]);
}

// ===================================================================

class ProjectTargetsRequest::_Internal {
 public:
  static const ::testsgen::ProjectContext& projectcontext(const ProjectTargetsRequest* msg);
};

const ::testsgen::ProjectContext&
ProjectTargetsRequest::_Internal::projectcontext(const ProjectTargetsRequest* msg) {
  return *msg->_impl_.projectcontext_;
}
ProjectTargetsRequest::ProjectTargetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.ProjectTargetsRequest)
}
ProjectTargetsRequest::ProjectTargetsRequest(const ProjectTargetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProjectTargetsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.projectcontext_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_projectcontext()) {
    _this->_impl_.projectcontext_ = new ::testsgen::ProjectContext(*from._impl_.projectcontext_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.ProjectTargetsRequest)
}

inline void ProjectTargetsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.projectcontext_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProjectTargetsRequest::~ProjectTargetsRequest() {
  // @@protoc_insertion_point(destructor:testsgen.ProjectTargetsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProjectTargetsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.projectcontext_;
}

void ProjectTargetsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProjectTargetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.ProjectTargetsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.projectcontext_ != nullptr) {
    delete _impl_.projectcontext_;
  }
  _impl_.projectcontext_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectTargetsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .testsgen.ProjectContext projectContext = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectcontext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProjectTargetsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.ProjectTargetsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ProjectContext projectContext = 1;
  if (this->_internal_has_projectcontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::projectcontext(this),
        _Internal::projectcontext(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.ProjectTargetsRequest)
  return target;
}

size_t ProjectTargetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.ProjectTargetsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .testsgen.ProjectContext projectContext = 1;
  if (this->_internal_has_projectcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.projectcontext_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProjectTargetsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProjectTargetsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProjectTargetsRequest::GetClassData() const { return &_class_data_; }


void ProjectTargetsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProjectTargetsRequest*>(&to_msg);
  auto& from = static_cast<const ProjectTargetsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.ProjectTargetsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_projectcontext()) {
    _this->_internal_mutable_projectcontext()->::testsgen::ProjectContext::MergeFrom(
        from._internal_projectcontext());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProjectTargetsRequest::CopyFrom(const ProjectTargetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.ProjectTargetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectTargetsRequest::IsInitialized() const {
  return true;
}

void ProjectTargetsRequest::InternalSwap(ProjectTargetsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.projectcontext_, other->_impl_.projectcontext_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectTargetsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[31]);
}

// ===================================================================

class ProjectTargetsResponse::_Internal {
 public:
  static const ::testsgen::ProjectTarget& prioritytarget(const ProjectTargetsResponse* msg);
};

const ::testsgen::ProjectTarget&
ProjectTargetsResponse::_Internal::prioritytarget(const ProjectTargetsResponse* msg) {
  return *msg->_impl_.prioritytarget_;
}
ProjectTargetsResponse::ProjectTargetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.ProjectTargetsResponse)
}
ProjectTargetsResponse::ProjectTargetsResponse(const ProjectTargetsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProjectTargetsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.targets_){from._impl_.targets_}
    , decltype(_impl_.prioritytarget_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prioritytarget()) {
    _this->_impl_.prioritytarget_ = new ::testsgen::ProjectTarget(*from._impl_.prioritytarget_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.ProjectTargetsResponse)
}

inline void ProjectTargetsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.targets_){arena}
    , decltype(_impl_.prioritytarget_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProjectTargetsResponse::~ProjectTargetsResponse() {
  // @@protoc_insertion_point(destructor:testsgen.ProjectTargetsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProjectTargetsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.targets_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.prioritytarget_;
}

void ProjectTargetsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProjectTargetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.ProjectTargetsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targets_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.prioritytarget_ != nullptr) {
    delete _impl_.prioritytarget_;
  }
  _impl_.prioritytarget_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectTargetsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .testsgen.ProjectTarget targets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .testsgen.ProjectTarget priorityTarget = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prioritytarget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProjectTargetsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.ProjectTargetsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .testsgen.ProjectTarget targets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_targets_size()); i < n; i++) {
    const auto& repfield = this->_internal_targets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .testsgen.ProjectTarget priorityTarget = 2;
  if (this->_internal_has_prioritytarget()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::prioritytarget(this),
        _Internal::prioritytarget(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.ProjectTargetsResponse)
  return target;
}

size_t ProjectTargetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.ProjectTargetsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .testsgen.ProjectTarget targets = 1;
  total_size += 1UL * this->_internal_targets_size();
  for (const auto& msg : this->_impl_.targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .testsgen.ProjectTarget priorityTarget = 2;
  if (this->_internal_has_prioritytarget()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prioritytarget_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProjectTargetsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProjectTargetsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProjectTargetsResponse::GetClassData() const { return &_class_data_; }


void ProjectTargetsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProjectTargetsResponse*>(&to_msg);
  auto& from = static_cast<const ProjectTargetsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.ProjectTargetsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.targets_.MergeFrom(from._impl_.targets_);
  if (from._internal_has_prioritytarget()) {
    _this->_internal_mutable_prioritytarget()->::testsgen::ProjectTarget::MergeFrom(
        from._internal_prioritytarget());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProjectTargetsResponse::CopyFrom(const ProjectTargetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.ProjectTargetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectTargetsResponse::IsInitialized() const {
  return true;
}

void ProjectTargetsResponse::InternalSwap(ProjectTargetsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.targets_.InternalSwap(&other->_impl_.targets_);
  swap(_impl_.prioritytarget_, other->_impl_.prioritytarget_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectTargetsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[32]);
}

// ===================================================================

class FileTargetsRequest::_Internal {
 public:
  static const ::testsgen::ProjectContext& projectcontext(const FileTargetsRequest* msg);
};

const ::testsgen::ProjectContext&
FileTargetsRequest::_Internal::projectcontext(const FileTargetsRequest* msg) {
  return *msg->_impl_.projectcontext_;
}
FileTargetsRequest::FileTargetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.FileTargetsRequest)
}
FileTargetsRequest::FileTargetsRequest(const FileTargetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileTargetsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.projectcontext_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_projectcontext()) {
    _this->_impl_.projectcontext_ = new ::testsgen::ProjectContext(*from._impl_.projectcontext_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.FileTargetsRequest)
}

inline void FileTargetsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.projectcontext_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileTargetsRequest::~FileTargetsRequest() {
  // @@protoc_insertion_point(destructor:testsgen.FileTargetsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileTargetsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.projectcontext_;
}

void FileTargetsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileTargetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.FileTargetsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.projectcontext_ != nullptr) {
    delete _impl_.projectcontext_;
  }
  _impl_.projectcontext_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileTargetsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.FileTargetsRequest.path"));
        } else
          goto handle_unusual;
        continue;
      // .testsgen.ProjectContext projectContext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectcontext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileTargetsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.FileTargetsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.FileTargetsRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .testsgen.ProjectContext projectContext = 2;
  if (this->_internal_has_projectcontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::projectcontext(this),
        _Internal::projectcontext(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.FileTargetsRequest)
  return target;
}

size_t FileTargetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.FileTargetsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .testsgen.ProjectContext projectContext = 2;
  if (this->_internal_has_projectcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.projectcontext_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileTargetsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileTargetsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileTargetsRequest::GetClassData() const { return &_class_data_; }


void FileTargetsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileTargetsRequest*>(&to_msg);
  auto& from = static_cast<const FileTargetsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.FileTargetsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_has_projectcontext()) {
    _this->_internal_mutable_projectcontext()->::testsgen::ProjectContext::MergeFrom(
        from._internal_projectcontext());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileTargetsRequest::CopyFrom(const FileTargetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.FileTargetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTargetsRequest::IsInitialized() const {
  return true;
}

void FileTargetsRequest::InternalSwap(FileTargetsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.projectcontext_, other->_impl_.projectcontext_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileTargetsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[33]);
}

// ===================================================================

class FileTargetsResponse::_Internal {
 public:
};

FileTargetsResponse::FileTargetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.FileTargetsResponse)
}
FileTargetsResponse::FileTargetsResponse(const FileTargetsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileTargetsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.targets_){from._impl_.targets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:testsgen.FileTargetsResponse)
}

inline void FileTargetsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.targets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FileTargetsResponse::~FileTargetsResponse() {
  // @@protoc_insertion_point(destructor:testsgen.FileTargetsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileTargetsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.targets_.~RepeatedPtrField();
}

void FileTargetsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileTargetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.FileTargetsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileTargetsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .testsgen.ProjectTarget targets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileTargetsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.FileTargetsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .testsgen.ProjectTarget targets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_targets_size()); i < n; i++) {
    const auto& repfield = this->_internal_targets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.FileTargetsResponse)
  return target;
}

size_t FileTargetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.FileTargetsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .testsgen.ProjectTarget targets = 1;
  total_size += 1UL * this->_internal_targets_size();
  for (const auto& msg : this->_impl_.targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileTargetsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileTargetsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileTargetsResponse::GetClassData() const { return &_class_data_; }


void FileTargetsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileTargetsResponse*>(&to_msg);
  auto& from = static_cast<const FileTargetsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.FileTargetsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.targets_.MergeFrom(from._impl_.targets_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileTargetsResponse::CopyFrom(const FileTargetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.FileTargetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTargetsResponse::IsInitialized() const {
  return true;
}

void FileTargetsResponse::InternalSwap(FileTargetsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.targets_.InternalSwap(&other->_impl_.targets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileTargetsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_testgen_2eproto_getter, &descriptor_table_testgen_2eproto_once,
      file_level_metadata_testgen_2eproto[34]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace testsgen
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::testsgen::DummyRequest*
Arena::CreateMaybeMessage< ::testsgen::DummyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::DummyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::DummyResponse*
Arena::CreateMaybeMessage< ::testsgen::DummyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::DummyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::VersionInfo*
Arena::CreateMaybeMessage< ::testsgen::VersionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::VersionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::RegisterClientRequest*
Arena::CreateMaybeMessage< ::testsgen::RegisterClientRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::RegisterClientRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::RegisterClientResponse*
Arena::CreateMaybeMessage< ::testsgen::RegisterClientResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::RegisterClientResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::FunctionTypeResponse*
Arena::CreateMaybeMessage< ::testsgen::FunctionTypeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::FunctionTypeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::LogChannelRequest*
Arena::CreateMaybeMessage< ::testsgen::LogChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::LogChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::LogEntry*
Arena::CreateMaybeMessage< ::testsgen::LogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::ProjectContext*
Arena::CreateMaybeMessage< ::testsgen::ProjectContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::ProjectContext >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::SettingsContext*
Arena::CreateMaybeMessage< ::testsgen::SettingsContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::SettingsContext >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::SnippetRequest*
Arena::CreateMaybeMessage< ::testsgen::SnippetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::SnippetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::ProjectRequest*
Arena::CreateMaybeMessage< ::testsgen::ProjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::ProjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::FileRequest*
Arena::CreateMaybeMessage< ::testsgen::FileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::FileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::FolderRequest*
Arena::CreateMaybeMessage< ::testsgen::FolderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::FolderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::LineRequest*
Arena::CreateMaybeMessage< ::testsgen::LineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::LineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::FunctionRequest*
Arena::CreateMaybeMessage< ::testsgen::FunctionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::FunctionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::ClassRequest*
Arena::CreateMaybeMessage< ::testsgen::ClassRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::ClassRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::AssertionRequest*
Arena::CreateMaybeMessage< ::testsgen::AssertionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::AssertionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::PredicateRequest*
Arena::CreateMaybeMessage< ::testsgen::PredicateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::PredicateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::StubsResponse*
Arena::CreateMaybeMessage< ::testsgen::StubsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::StubsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::TestsResponse*
Arena::CreateMaybeMessage< ::testsgen::TestsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::TestsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::SourceLine*
Arena::CreateMaybeMessage< ::testsgen::SourceLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::SourceLine >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::FileCoverageSimplified*
Arena::CreateMaybeMessage< ::testsgen::FileCoverageSimplified >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::FileCoverageSimplified >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::TestFilter*
Arena::CreateMaybeMessage< ::testsgen::TestFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::TestFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::CoverageAndResultsRequest*
Arena::CreateMaybeMessage< ::testsgen::CoverageAndResultsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::CoverageAndResultsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::TestResultObject*
Arena::CreateMaybeMessage< ::testsgen::TestResultObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::TestResultObject >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::CoverageAndResultsResponse*
Arena::CreateMaybeMessage< ::testsgen::CoverageAndResultsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::CoverageAndResultsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::HeartbeatResponse*
Arena::CreateMaybeMessage< ::testsgen::HeartbeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::HeartbeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::ProjectConfigRequest*
Arena::CreateMaybeMessage< ::testsgen::ProjectConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::ProjectConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::ProjectConfigResponse*
Arena::CreateMaybeMessage< ::testsgen::ProjectConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::ProjectConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::ProjectTarget*
Arena::CreateMaybeMessage< ::testsgen::ProjectTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::ProjectTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::ProjectTargetsRequest*
Arena::CreateMaybeMessage< ::testsgen::ProjectTargetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::ProjectTargetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::ProjectTargetsResponse*
Arena::CreateMaybeMessage< ::testsgen::ProjectTargetsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::ProjectTargetsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::FileTargetsRequest*
Arena::CreateMaybeMessage< ::testsgen::FileTargetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::FileTargetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::FileTargetsResponse*
Arena::CreateMaybeMessage< ::testsgen::FileTargetsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::FileTargetsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
