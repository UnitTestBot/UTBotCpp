// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: testgen.proto

#include "testgen.pb.h"
#include "testgen.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace testsgen {

static const char* TestsGenService_method_names[] = {
  "/testsgen.TestsGenService/Handshake",
  "/testsgen.TestsGenService/Heartbeat",
  "/testsgen.TestsGenService/OpenLogChannel",
  "/testsgen.TestsGenService/CloseLogChannel",
  "/testsgen.TestsGenService/OpenGTestChannel",
  "/testsgen.TestsGenService/CloseGTestChannel",
  "/testsgen.TestsGenService/RegisterClient",
  "/testsgen.TestsGenService/GetFunctionReturnType",
  "/testsgen.TestsGenService/GenerateSnippetTests",
  "/testsgen.TestsGenService/GenerateProjectTests",
  "/testsgen.TestsGenService/GenerateFileTests",
  "/testsgen.TestsGenService/GenerateFunctionTests",
  "/testsgen.TestsGenService/GenerateClassTests",
  "/testsgen.TestsGenService/GenerateFolderTests",
  "/testsgen.TestsGenService/GenerateLineTests",
  "/testsgen.TestsGenService/GenerateAssertionFailTests",
  "/testsgen.TestsGenService/GeneratePredicateTests",
  "/testsgen.TestsGenService/CreateTestsCoverageAndResult",
  "/testsgen.TestsGenService/GenerateProjectStubs",
  "/testsgen.TestsGenService/PrintModulesContent",
  "/testsgen.TestsGenService/ConfigureProject",
  "/testsgen.TestsGenService/GetSourceCode",
  "/testsgen.TestsGenService/GetProjectTargets",
  "/testsgen.TestsGenService/GetFileTargets",
};

std::unique_ptr< TestsGenService::Stub> TestsGenService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TestsGenService::Stub> stub(new TestsGenService::Stub(channel, options));
  return stub;
}

TestsGenService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Handshake_(TestsGenService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Heartbeat_(TestsGenService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OpenLogChannel_(TestsGenService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CloseLogChannel_(TestsGenService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OpenGTestChannel_(TestsGenService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CloseGTestChannel_(TestsGenService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterClient_(TestsGenService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFunctionReturnType_(TestsGenService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenerateSnippetTests_(TestsGenService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GenerateProjectTests_(TestsGenService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GenerateFileTests_(TestsGenService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GenerateFunctionTests_(TestsGenService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GenerateClassTests_(TestsGenService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GenerateFolderTests_(TestsGenService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GenerateLineTests_(TestsGenService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GenerateAssertionFailTests_(TestsGenService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GeneratePredicateTests_(TestsGenService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CreateTestsCoverageAndResult_(TestsGenService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GenerateProjectStubs_(TestsGenService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_PrintModulesContent_(TestsGenService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfigureProject_(TestsGenService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetSourceCode_(TestsGenService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProjectTargets_(TestsGenService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFileTargets_(TestsGenService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TestsGenService::Stub::Handshake(::grpc::ClientContext* context, const ::testsgen::VersionInfo& request, ::testsgen::VersionInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::testsgen::VersionInfo, ::testsgen::VersionInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Handshake_, context, request, response);
}

void TestsGenService::Stub::async::Handshake(::grpc::ClientContext* context, const ::testsgen::VersionInfo* request, ::testsgen::VersionInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::testsgen::VersionInfo, ::testsgen::VersionInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Handshake_, context, request, response, std::move(f));
}

void TestsGenService::Stub::async::Handshake(::grpc::ClientContext* context, const ::testsgen::VersionInfo* request, ::testsgen::VersionInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Handshake_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::testsgen::VersionInfo>* TestsGenService::Stub::PrepareAsyncHandshakeRaw(::grpc::ClientContext* context, const ::testsgen::VersionInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::testsgen::VersionInfo, ::testsgen::VersionInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Handshake_, context, request);
}

::grpc::ClientAsyncResponseReader< ::testsgen::VersionInfo>* TestsGenService::Stub::AsyncHandshakeRaw(::grpc::ClientContext* context, const ::testsgen::VersionInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHandshakeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestsGenService::Stub::Heartbeat(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::testsgen::HeartbeatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::testsgen::DummyRequest, ::testsgen::HeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Heartbeat_, context, request, response);
}

void TestsGenService::Stub::async::Heartbeat(::grpc::ClientContext* context, const ::testsgen::DummyRequest* request, ::testsgen::HeartbeatResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::testsgen::DummyRequest, ::testsgen::HeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, std::move(f));
}

void TestsGenService::Stub::async::Heartbeat(::grpc::ClientContext* context, const ::testsgen::DummyRequest* request, ::testsgen::HeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::testsgen::HeartbeatResponse>* TestsGenService::Stub::PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::testsgen::HeartbeatResponse, ::testsgen::DummyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Heartbeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::testsgen::HeartbeatResponse>* TestsGenService::Stub::AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHeartbeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::testsgen::LogEntry>* TestsGenService::Stub::OpenLogChannelRaw(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::testsgen::LogEntry>::Create(channel_.get(), rpcmethod_OpenLogChannel_, context, request);
}

void TestsGenService::Stub::async::OpenLogChannel(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest* request, ::grpc::ClientReadReactor< ::testsgen::LogEntry>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::testsgen::LogEntry>::Create(stub_->channel_.get(), stub_->rpcmethod_OpenLogChannel_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::testsgen::LogEntry>* TestsGenService::Stub::AsyncOpenLogChannelRaw(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::LogEntry>::Create(channel_.get(), cq, rpcmethod_OpenLogChannel_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::testsgen::LogEntry>* TestsGenService::Stub::PrepareAsyncOpenLogChannelRaw(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::LogEntry>::Create(channel_.get(), cq, rpcmethod_OpenLogChannel_, context, request, false, nullptr);
}

::grpc::Status TestsGenService::Stub::CloseLogChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::testsgen::DummyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::testsgen::DummyRequest, ::testsgen::DummyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CloseLogChannel_, context, request, response);
}

void TestsGenService::Stub::async::CloseLogChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest* request, ::testsgen::DummyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::testsgen::DummyRequest, ::testsgen::DummyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CloseLogChannel_, context, request, response, std::move(f));
}

void TestsGenService::Stub::async::CloseLogChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest* request, ::testsgen::DummyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CloseLogChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>* TestsGenService::Stub::PrepareAsyncCloseLogChannelRaw(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::testsgen::DummyResponse, ::testsgen::DummyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CloseLogChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>* TestsGenService::Stub::AsyncCloseLogChannelRaw(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCloseLogChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::testsgen::LogEntry>* TestsGenService::Stub::OpenGTestChannelRaw(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::testsgen::LogEntry>::Create(channel_.get(), rpcmethod_OpenGTestChannel_, context, request);
}

void TestsGenService::Stub::async::OpenGTestChannel(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest* request, ::grpc::ClientReadReactor< ::testsgen::LogEntry>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::testsgen::LogEntry>::Create(stub_->channel_.get(), stub_->rpcmethod_OpenGTestChannel_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::testsgen::LogEntry>* TestsGenService::Stub::AsyncOpenGTestChannelRaw(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::LogEntry>::Create(channel_.get(), cq, rpcmethod_OpenGTestChannel_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::testsgen::LogEntry>* TestsGenService::Stub::PrepareAsyncOpenGTestChannelRaw(::grpc::ClientContext* context, const ::testsgen::LogChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::LogEntry>::Create(channel_.get(), cq, rpcmethod_OpenGTestChannel_, context, request, false, nullptr);
}

::grpc::Status TestsGenService::Stub::CloseGTestChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::testsgen::DummyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::testsgen::DummyRequest, ::testsgen::DummyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CloseGTestChannel_, context, request, response);
}

void TestsGenService::Stub::async::CloseGTestChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest* request, ::testsgen::DummyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::testsgen::DummyRequest, ::testsgen::DummyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CloseGTestChannel_, context, request, response, std::move(f));
}

void TestsGenService::Stub::async::CloseGTestChannel(::grpc::ClientContext* context, const ::testsgen::DummyRequest* request, ::testsgen::DummyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CloseGTestChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>* TestsGenService::Stub::PrepareAsyncCloseGTestChannelRaw(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::testsgen::DummyResponse, ::testsgen::DummyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CloseGTestChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>* TestsGenService::Stub::AsyncCloseGTestChannelRaw(::grpc::ClientContext* context, const ::testsgen::DummyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCloseGTestChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestsGenService::Stub::RegisterClient(::grpc::ClientContext* context, const ::testsgen::RegisterClientRequest& request, ::testsgen::DummyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::testsgen::RegisterClientRequest, ::testsgen::DummyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterClient_, context, request, response);
}

void TestsGenService::Stub::async::RegisterClient(::grpc::ClientContext* context, const ::testsgen::RegisterClientRequest* request, ::testsgen::DummyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::testsgen::RegisterClientRequest, ::testsgen::DummyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterClient_, context, request, response, std::move(f));
}

void TestsGenService::Stub::async::RegisterClient(::grpc::ClientContext* context, const ::testsgen::RegisterClientRequest* request, ::testsgen::DummyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>* TestsGenService::Stub::PrepareAsyncRegisterClientRaw(::grpc::ClientContext* context, const ::testsgen::RegisterClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::testsgen::DummyResponse, ::testsgen::RegisterClientRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterClient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>* TestsGenService::Stub::AsyncRegisterClientRaw(::grpc::ClientContext* context, const ::testsgen::RegisterClientRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterClientRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestsGenService::Stub::GetFunctionReturnType(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::testsgen::FunctionTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::testsgen::FunctionRequest, ::testsgen::FunctionTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFunctionReturnType_, context, request, response);
}

void TestsGenService::Stub::async::GetFunctionReturnType(::grpc::ClientContext* context, const ::testsgen::FunctionRequest* request, ::testsgen::FunctionTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::testsgen::FunctionRequest, ::testsgen::FunctionTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFunctionReturnType_, context, request, response, std::move(f));
}

void TestsGenService::Stub::async::GetFunctionReturnType(::grpc::ClientContext* context, const ::testsgen::FunctionRequest* request, ::testsgen::FunctionTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFunctionReturnType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::testsgen::FunctionTypeResponse>* TestsGenService::Stub::PrepareAsyncGetFunctionReturnTypeRaw(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::testsgen::FunctionTypeResponse, ::testsgen::FunctionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFunctionReturnType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::testsgen::FunctionTypeResponse>* TestsGenService::Stub::AsyncGetFunctionReturnTypeRaw(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFunctionReturnTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::testsgen::TestsResponse>* TestsGenService::Stub::GenerateSnippetTestsRaw(::grpc::ClientContext* context, const ::testsgen::SnippetRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), rpcmethod_GenerateSnippetTests_, context, request);
}

void TestsGenService::Stub::async::GenerateSnippetTests(::grpc::ClientContext* context, const ::testsgen::SnippetRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::testsgen::TestsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateSnippetTests_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* TestsGenService::Stub::AsyncGenerateSnippetTestsRaw(::grpc::ClientContext* context, const ::testsgen::SnippetRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), cq, rpcmethod_GenerateSnippetTests_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* TestsGenService::Stub::PrepareAsyncGenerateSnippetTestsRaw(::grpc::ClientContext* context, const ::testsgen::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), cq, rpcmethod_GenerateSnippetTests_, context, request, false, nullptr);
}

::grpc::ClientReader< ::testsgen::TestsResponse>* TestsGenService::Stub::GenerateProjectTestsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), rpcmethod_GenerateProjectTests_, context, request);
}

void TestsGenService::Stub::async::GenerateProjectTests(::grpc::ClientContext* context, const ::testsgen::ProjectRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::testsgen::TestsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateProjectTests_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* TestsGenService::Stub::AsyncGenerateProjectTestsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), cq, rpcmethod_GenerateProjectTests_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* TestsGenService::Stub::PrepareAsyncGenerateProjectTestsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), cq, rpcmethod_GenerateProjectTests_, context, request, false, nullptr);
}

::grpc::ClientReader< ::testsgen::TestsResponse>* TestsGenService::Stub::GenerateFileTestsRaw(::grpc::ClientContext* context, const ::testsgen::FileRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), rpcmethod_GenerateFileTests_, context, request);
}

void TestsGenService::Stub::async::GenerateFileTests(::grpc::ClientContext* context, const ::testsgen::FileRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::testsgen::TestsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateFileTests_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* TestsGenService::Stub::AsyncGenerateFileTestsRaw(::grpc::ClientContext* context, const ::testsgen::FileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), cq, rpcmethod_GenerateFileTests_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* TestsGenService::Stub::PrepareAsyncGenerateFileTestsRaw(::grpc::ClientContext* context, const ::testsgen::FileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), cq, rpcmethod_GenerateFileTests_, context, request, false, nullptr);
}

::grpc::ClientReader< ::testsgen::TestsResponse>* TestsGenService::Stub::GenerateFunctionTestsRaw(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), rpcmethod_GenerateFunctionTests_, context, request);
}

void TestsGenService::Stub::async::GenerateFunctionTests(::grpc::ClientContext* context, const ::testsgen::FunctionRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::testsgen::TestsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateFunctionTests_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* TestsGenService::Stub::AsyncGenerateFunctionTestsRaw(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), cq, rpcmethod_GenerateFunctionTests_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* TestsGenService::Stub::PrepareAsyncGenerateFunctionTestsRaw(::grpc::ClientContext* context, const ::testsgen::FunctionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), cq, rpcmethod_GenerateFunctionTests_, context, request, false, nullptr);
}

::grpc::ClientReader< ::testsgen::TestsResponse>* TestsGenService::Stub::GenerateClassTestsRaw(::grpc::ClientContext* context, const ::testsgen::ClassRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), rpcmethod_GenerateClassTests_, context, request);
}

void TestsGenService::Stub::async::GenerateClassTests(::grpc::ClientContext* context, const ::testsgen::ClassRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::testsgen::TestsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateClassTests_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* TestsGenService::Stub::AsyncGenerateClassTestsRaw(::grpc::ClientContext* context, const ::testsgen::ClassRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), cq, rpcmethod_GenerateClassTests_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* TestsGenService::Stub::PrepareAsyncGenerateClassTestsRaw(::grpc::ClientContext* context, const ::testsgen::ClassRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), cq, rpcmethod_GenerateClassTests_, context, request, false, nullptr);
}

::grpc::ClientReader< ::testsgen::TestsResponse>* TestsGenService::Stub::GenerateFolderTestsRaw(::grpc::ClientContext* context, const ::testsgen::FolderRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), rpcmethod_GenerateFolderTests_, context, request);
}

void TestsGenService::Stub::async::GenerateFolderTests(::grpc::ClientContext* context, const ::testsgen::FolderRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::testsgen::TestsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateFolderTests_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* TestsGenService::Stub::AsyncGenerateFolderTestsRaw(::grpc::ClientContext* context, const ::testsgen::FolderRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), cq, rpcmethod_GenerateFolderTests_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* TestsGenService::Stub::PrepareAsyncGenerateFolderTestsRaw(::grpc::ClientContext* context, const ::testsgen::FolderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), cq, rpcmethod_GenerateFolderTests_, context, request, false, nullptr);
}

::grpc::ClientReader< ::testsgen::TestsResponse>* TestsGenService::Stub::GenerateLineTestsRaw(::grpc::ClientContext* context, const ::testsgen::LineRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), rpcmethod_GenerateLineTests_, context, request);
}

void TestsGenService::Stub::async::GenerateLineTests(::grpc::ClientContext* context, const ::testsgen::LineRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::testsgen::TestsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateLineTests_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* TestsGenService::Stub::AsyncGenerateLineTestsRaw(::grpc::ClientContext* context, const ::testsgen::LineRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), cq, rpcmethod_GenerateLineTests_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* TestsGenService::Stub::PrepareAsyncGenerateLineTestsRaw(::grpc::ClientContext* context, const ::testsgen::LineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), cq, rpcmethod_GenerateLineTests_, context, request, false, nullptr);
}

::grpc::ClientReader< ::testsgen::TestsResponse>* TestsGenService::Stub::GenerateAssertionFailTestsRaw(::grpc::ClientContext* context, const ::testsgen::AssertionRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), rpcmethod_GenerateAssertionFailTests_, context, request);
}

void TestsGenService::Stub::async::GenerateAssertionFailTests(::grpc::ClientContext* context, const ::testsgen::AssertionRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::testsgen::TestsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateAssertionFailTests_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* TestsGenService::Stub::AsyncGenerateAssertionFailTestsRaw(::grpc::ClientContext* context, const ::testsgen::AssertionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), cq, rpcmethod_GenerateAssertionFailTests_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* TestsGenService::Stub::PrepareAsyncGenerateAssertionFailTestsRaw(::grpc::ClientContext* context, const ::testsgen::AssertionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), cq, rpcmethod_GenerateAssertionFailTests_, context, request, false, nullptr);
}

::grpc::ClientReader< ::testsgen::TestsResponse>* TestsGenService::Stub::GeneratePredicateTestsRaw(::grpc::ClientContext* context, const ::testsgen::PredicateRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), rpcmethod_GeneratePredicateTests_, context, request);
}

void TestsGenService::Stub::async::GeneratePredicateTests(::grpc::ClientContext* context, const ::testsgen::PredicateRequest* request, ::grpc::ClientReadReactor< ::testsgen::TestsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::testsgen::TestsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GeneratePredicateTests_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* TestsGenService::Stub::AsyncGeneratePredicateTestsRaw(::grpc::ClientContext* context, const ::testsgen::PredicateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), cq, rpcmethod_GeneratePredicateTests_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::testsgen::TestsResponse>* TestsGenService::Stub::PrepareAsyncGeneratePredicateTestsRaw(::grpc::ClientContext* context, const ::testsgen::PredicateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::TestsResponse>::Create(channel_.get(), cq, rpcmethod_GeneratePredicateTests_, context, request, false, nullptr);
}

::grpc::ClientReader< ::testsgen::CoverageAndResultsResponse>* TestsGenService::Stub::CreateTestsCoverageAndResultRaw(::grpc::ClientContext* context, const ::testsgen::CoverageAndResultsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::testsgen::CoverageAndResultsResponse>::Create(channel_.get(), rpcmethod_CreateTestsCoverageAndResult_, context, request);
}

void TestsGenService::Stub::async::CreateTestsCoverageAndResult(::grpc::ClientContext* context, const ::testsgen::CoverageAndResultsRequest* request, ::grpc::ClientReadReactor< ::testsgen::CoverageAndResultsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::testsgen::CoverageAndResultsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_CreateTestsCoverageAndResult_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::testsgen::CoverageAndResultsResponse>* TestsGenService::Stub::AsyncCreateTestsCoverageAndResultRaw(::grpc::ClientContext* context, const ::testsgen::CoverageAndResultsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::CoverageAndResultsResponse>::Create(channel_.get(), cq, rpcmethod_CreateTestsCoverageAndResult_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::testsgen::CoverageAndResultsResponse>* TestsGenService::Stub::PrepareAsyncCreateTestsCoverageAndResultRaw(::grpc::ClientContext* context, const ::testsgen::CoverageAndResultsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::CoverageAndResultsResponse>::Create(channel_.get(), cq, rpcmethod_CreateTestsCoverageAndResult_, context, request, false, nullptr);
}

::grpc::ClientReader< ::testsgen::StubsResponse>* TestsGenService::Stub::GenerateProjectStubsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::testsgen::StubsResponse>::Create(channel_.get(), rpcmethod_GenerateProjectStubs_, context, request);
}

void TestsGenService::Stub::async::GenerateProjectStubs(::grpc::ClientContext* context, const ::testsgen::ProjectRequest* request, ::grpc::ClientReadReactor< ::testsgen::StubsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::testsgen::StubsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateProjectStubs_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::testsgen::StubsResponse>* TestsGenService::Stub::AsyncGenerateProjectStubsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::StubsResponse>::Create(channel_.get(), cq, rpcmethod_GenerateProjectStubs_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::testsgen::StubsResponse>* TestsGenService::Stub::PrepareAsyncGenerateProjectStubsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::StubsResponse>::Create(channel_.get(), cq, rpcmethod_GenerateProjectStubs_, context, request, false, nullptr);
}

::grpc::Status TestsGenService::Stub::PrintModulesContent(::grpc::ClientContext* context, const ::testsgen::ProjectContext& request, ::testsgen::DummyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::testsgen::ProjectContext, ::testsgen::DummyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrintModulesContent_, context, request, response);
}

void TestsGenService::Stub::async::PrintModulesContent(::grpc::ClientContext* context, const ::testsgen::ProjectContext* request, ::testsgen::DummyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::testsgen::ProjectContext, ::testsgen::DummyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrintModulesContent_, context, request, response, std::move(f));
}

void TestsGenService::Stub::async::PrintModulesContent(::grpc::ClientContext* context, const ::testsgen::ProjectContext* request, ::testsgen::DummyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrintModulesContent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>* TestsGenService::Stub::PrepareAsyncPrintModulesContentRaw(::grpc::ClientContext* context, const ::testsgen::ProjectContext& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::testsgen::DummyResponse, ::testsgen::ProjectContext, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrintModulesContent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::testsgen::DummyResponse>* TestsGenService::Stub::AsyncPrintModulesContentRaw(::grpc::ClientContext* context, const ::testsgen::ProjectContext& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrintModulesContentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::testsgen::ProjectConfigResponse>* TestsGenService::Stub::ConfigureProjectRaw(::grpc::ClientContext* context, const ::testsgen::ProjectConfigRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::testsgen::ProjectConfigResponse>::Create(channel_.get(), rpcmethod_ConfigureProject_, context, request);
}

void TestsGenService::Stub::async::ConfigureProject(::grpc::ClientContext* context, const ::testsgen::ProjectConfigRequest* request, ::grpc::ClientReadReactor< ::testsgen::ProjectConfigResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::testsgen::ProjectConfigResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ConfigureProject_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::testsgen::ProjectConfigResponse>* TestsGenService::Stub::AsyncConfigureProjectRaw(::grpc::ClientContext* context, const ::testsgen::ProjectConfigRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::ProjectConfigResponse>::Create(channel_.get(), cq, rpcmethod_ConfigureProject_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::testsgen::ProjectConfigResponse>* TestsGenService::Stub::PrepareAsyncConfigureProjectRaw(::grpc::ClientContext* context, const ::testsgen::ProjectConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::testsgen::ProjectConfigResponse>::Create(channel_.get(), cq, rpcmethod_ConfigureProject_, context, request, false, nullptr);
}

::grpc::Status TestsGenService::Stub::GetSourceCode(::grpc::ClientContext* context, const ::testsgen::SourceInfo& request, ::testsgen::SourceCode* response) {
  return ::grpc::internal::BlockingUnaryCall< ::testsgen::SourceInfo, ::testsgen::SourceCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSourceCode_, context, request, response);
}

void TestsGenService::Stub::async::GetSourceCode(::grpc::ClientContext* context, const ::testsgen::SourceInfo* request, ::testsgen::SourceCode* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::testsgen::SourceInfo, ::testsgen::SourceCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSourceCode_, context, request, response, std::move(f));
}

void TestsGenService::Stub::async::GetSourceCode(::grpc::ClientContext* context, const ::testsgen::SourceInfo* request, ::testsgen::SourceCode* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSourceCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::testsgen::SourceCode>* TestsGenService::Stub::PrepareAsyncGetSourceCodeRaw(::grpc::ClientContext* context, const ::testsgen::SourceInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::testsgen::SourceCode, ::testsgen::SourceInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSourceCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::testsgen::SourceCode>* TestsGenService::Stub::AsyncGetSourceCodeRaw(::grpc::ClientContext* context, const ::testsgen::SourceInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSourceCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestsGenService::Stub::GetProjectTargets(::grpc::ClientContext* context, const ::testsgen::ProjectTargetsRequest& request, ::testsgen::ProjectTargetsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::testsgen::ProjectTargetsRequest, ::testsgen::ProjectTargetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProjectTargets_, context, request, response);
}

void TestsGenService::Stub::async::GetProjectTargets(::grpc::ClientContext* context, const ::testsgen::ProjectTargetsRequest* request, ::testsgen::ProjectTargetsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::testsgen::ProjectTargetsRequest, ::testsgen::ProjectTargetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProjectTargets_, context, request, response, std::move(f));
}

void TestsGenService::Stub::async::GetProjectTargets(::grpc::ClientContext* context, const ::testsgen::ProjectTargetsRequest* request, ::testsgen::ProjectTargetsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProjectTargets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::testsgen::ProjectTargetsResponse>* TestsGenService::Stub::PrepareAsyncGetProjectTargetsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectTargetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::testsgen::ProjectTargetsResponse, ::testsgen::ProjectTargetsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProjectTargets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::testsgen::ProjectTargetsResponse>* TestsGenService::Stub::AsyncGetProjectTargetsRaw(::grpc::ClientContext* context, const ::testsgen::ProjectTargetsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProjectTargetsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestsGenService::Stub::GetFileTargets(::grpc::ClientContext* context, const ::testsgen::FileTargetsRequest& request, ::testsgen::FileTargetsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::testsgen::FileTargetsRequest, ::testsgen::FileTargetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFileTargets_, context, request, response);
}

void TestsGenService::Stub::async::GetFileTargets(::grpc::ClientContext* context, const ::testsgen::FileTargetsRequest* request, ::testsgen::FileTargetsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::testsgen::FileTargetsRequest, ::testsgen::FileTargetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFileTargets_, context, request, response, std::move(f));
}

void TestsGenService::Stub::async::GetFileTargets(::grpc::ClientContext* context, const ::testsgen::FileTargetsRequest* request, ::testsgen::FileTargetsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFileTargets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::testsgen::FileTargetsResponse>* TestsGenService::Stub::PrepareAsyncGetFileTargetsRaw(::grpc::ClientContext* context, const ::testsgen::FileTargetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::testsgen::FileTargetsResponse, ::testsgen::FileTargetsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFileTargets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::testsgen::FileTargetsResponse>* TestsGenService::Stub::AsyncGetFileTargetsRaw(::grpc::ClientContext* context, const ::testsgen::FileTargetsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFileTargetsRaw(context, request, cq);
  result->StartCall();
  return result;
}

TestsGenService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestsGenService::Service, ::testsgen::VersionInfo, ::testsgen::VersionInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::VersionInfo* req,
             ::testsgen::VersionInfo* resp) {
               return service->Handshake(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestsGenService::Service, ::testsgen::DummyRequest, ::testsgen::HeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::DummyRequest* req,
             ::testsgen::HeartbeatResponse* resp) {
               return service->Heartbeat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TestsGenService::Service, ::testsgen::LogChannelRequest, ::testsgen::LogEntry>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::LogChannelRequest* req,
             ::grpc::ServerWriter<::testsgen::LogEntry>* writer) {
               return service->OpenLogChannel(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestsGenService::Service, ::testsgen::DummyRequest, ::testsgen::DummyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::DummyRequest* req,
             ::testsgen::DummyResponse* resp) {
               return service->CloseLogChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TestsGenService::Service, ::testsgen::LogChannelRequest, ::testsgen::LogEntry>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::LogChannelRequest* req,
             ::grpc::ServerWriter<::testsgen::LogEntry>* writer) {
               return service->OpenGTestChannel(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestsGenService::Service, ::testsgen::DummyRequest, ::testsgen::DummyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::DummyRequest* req,
             ::testsgen::DummyResponse* resp) {
               return service->CloseGTestChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestsGenService::Service, ::testsgen::RegisterClientRequest, ::testsgen::DummyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::RegisterClientRequest* req,
             ::testsgen::DummyResponse* resp) {
               return service->RegisterClient(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestsGenService::Service, ::testsgen::FunctionRequest, ::testsgen::FunctionTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::FunctionRequest* req,
             ::testsgen::FunctionTypeResponse* resp) {
               return service->GetFunctionReturnType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TestsGenService::Service, ::testsgen::SnippetRequest, ::testsgen::TestsResponse>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::SnippetRequest* req,
             ::grpc::ServerWriter<::testsgen::TestsResponse>* writer) {
               return service->GenerateSnippetTests(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TestsGenService::Service, ::testsgen::ProjectRequest, ::testsgen::TestsResponse>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::ProjectRequest* req,
             ::grpc::ServerWriter<::testsgen::TestsResponse>* writer) {
               return service->GenerateProjectTests(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[10],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TestsGenService::Service, ::testsgen::FileRequest, ::testsgen::TestsResponse>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::FileRequest* req,
             ::grpc::ServerWriter<::testsgen::TestsResponse>* writer) {
               return service->GenerateFileTests(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[11],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TestsGenService::Service, ::testsgen::FunctionRequest, ::testsgen::TestsResponse>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::FunctionRequest* req,
             ::grpc::ServerWriter<::testsgen::TestsResponse>* writer) {
               return service->GenerateFunctionTests(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[12],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TestsGenService::Service, ::testsgen::ClassRequest, ::testsgen::TestsResponse>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::ClassRequest* req,
             ::grpc::ServerWriter<::testsgen::TestsResponse>* writer) {
               return service->GenerateClassTests(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[13],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TestsGenService::Service, ::testsgen::FolderRequest, ::testsgen::TestsResponse>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::FolderRequest* req,
             ::grpc::ServerWriter<::testsgen::TestsResponse>* writer) {
               return service->GenerateFolderTests(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[14],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TestsGenService::Service, ::testsgen::LineRequest, ::testsgen::TestsResponse>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::LineRequest* req,
             ::grpc::ServerWriter<::testsgen::TestsResponse>* writer) {
               return service->GenerateLineTests(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[15],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TestsGenService::Service, ::testsgen::AssertionRequest, ::testsgen::TestsResponse>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::AssertionRequest* req,
             ::grpc::ServerWriter<::testsgen::TestsResponse>* writer) {
               return service->GenerateAssertionFailTests(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[16],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TestsGenService::Service, ::testsgen::PredicateRequest, ::testsgen::TestsResponse>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::PredicateRequest* req,
             ::grpc::ServerWriter<::testsgen::TestsResponse>* writer) {
               return service->GeneratePredicateTests(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[17],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TestsGenService::Service, ::testsgen::CoverageAndResultsRequest, ::testsgen::CoverageAndResultsResponse>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::CoverageAndResultsRequest* req,
             ::grpc::ServerWriter<::testsgen::CoverageAndResultsResponse>* writer) {
               return service->CreateTestsCoverageAndResult(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[18],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TestsGenService::Service, ::testsgen::ProjectRequest, ::testsgen::StubsResponse>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::ProjectRequest* req,
             ::grpc::ServerWriter<::testsgen::StubsResponse>* writer) {
               return service->GenerateProjectStubs(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestsGenService::Service, ::testsgen::ProjectContext, ::testsgen::DummyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::ProjectContext* req,
             ::testsgen::DummyResponse* resp) {
               return service->PrintModulesContent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[20],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TestsGenService::Service, ::testsgen::ProjectConfigRequest, ::testsgen::ProjectConfigResponse>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::ProjectConfigRequest* req,
             ::grpc::ServerWriter<::testsgen::ProjectConfigResponse>* writer) {
               return service->ConfigureProject(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestsGenService::Service, ::testsgen::SourceInfo, ::testsgen::SourceCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::SourceInfo* req,
             ::testsgen::SourceCode* resp) {
               return service->GetSourceCode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestsGenService::Service, ::testsgen::ProjectTargetsRequest, ::testsgen::ProjectTargetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::ProjectTargetsRequest* req,
             ::testsgen::ProjectTargetsResponse* resp) {
               return service->GetProjectTargets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestsGenService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestsGenService::Service, ::testsgen::FileTargetsRequest, ::testsgen::FileTargetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestsGenService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::testsgen::FileTargetsRequest* req,
             ::testsgen::FileTargetsResponse* resp) {
               return service->GetFileTargets(ctx, req, resp);
             }, this)));
}

TestsGenService::Service::~Service() {
}

::grpc::Status TestsGenService::Service::Handshake(::grpc::ServerContext* context, const ::testsgen::VersionInfo* request, ::testsgen::VersionInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::Heartbeat(::grpc::ServerContext* context, const ::testsgen::DummyRequest* request, ::testsgen::HeartbeatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::OpenLogChannel(::grpc::ServerContext* context, const ::testsgen::LogChannelRequest* request, ::grpc::ServerWriter< ::testsgen::LogEntry>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::CloseLogChannel(::grpc::ServerContext* context, const ::testsgen::DummyRequest* request, ::testsgen::DummyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::OpenGTestChannel(::grpc::ServerContext* context, const ::testsgen::LogChannelRequest* request, ::grpc::ServerWriter< ::testsgen::LogEntry>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::CloseGTestChannel(::grpc::ServerContext* context, const ::testsgen::DummyRequest* request, ::testsgen::DummyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::RegisterClient(::grpc::ServerContext* context, const ::testsgen::RegisterClientRequest* request, ::testsgen::DummyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::GetFunctionReturnType(::grpc::ServerContext* context, const ::testsgen::FunctionRequest* request, ::testsgen::FunctionTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::GenerateSnippetTests(::grpc::ServerContext* context, const ::testsgen::SnippetRequest* request, ::grpc::ServerWriter< ::testsgen::TestsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::GenerateProjectTests(::grpc::ServerContext* context, const ::testsgen::ProjectRequest* request, ::grpc::ServerWriter< ::testsgen::TestsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::GenerateFileTests(::grpc::ServerContext* context, const ::testsgen::FileRequest* request, ::grpc::ServerWriter< ::testsgen::TestsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::GenerateFunctionTests(::grpc::ServerContext* context, const ::testsgen::FunctionRequest* request, ::grpc::ServerWriter< ::testsgen::TestsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::GenerateClassTests(::grpc::ServerContext* context, const ::testsgen::ClassRequest* request, ::grpc::ServerWriter< ::testsgen::TestsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::GenerateFolderTests(::grpc::ServerContext* context, const ::testsgen::FolderRequest* request, ::grpc::ServerWriter< ::testsgen::TestsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::GenerateLineTests(::grpc::ServerContext* context, const ::testsgen::LineRequest* request, ::grpc::ServerWriter< ::testsgen::TestsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::GenerateAssertionFailTests(::grpc::ServerContext* context, const ::testsgen::AssertionRequest* request, ::grpc::ServerWriter< ::testsgen::TestsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::GeneratePredicateTests(::grpc::ServerContext* context, const ::testsgen::PredicateRequest* request, ::grpc::ServerWriter< ::testsgen::TestsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::CreateTestsCoverageAndResult(::grpc::ServerContext* context, const ::testsgen::CoverageAndResultsRequest* request, ::grpc::ServerWriter< ::testsgen::CoverageAndResultsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::GenerateProjectStubs(::grpc::ServerContext* context, const ::testsgen::ProjectRequest* request, ::grpc::ServerWriter< ::testsgen::StubsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::PrintModulesContent(::grpc::ServerContext* context, const ::testsgen::ProjectContext* request, ::testsgen::DummyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::ConfigureProject(::grpc::ServerContext* context, const ::testsgen::ProjectConfigRequest* request, ::grpc::ServerWriter< ::testsgen::ProjectConfigResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::GetSourceCode(::grpc::ServerContext* context, const ::testsgen::SourceInfo* request, ::testsgen::SourceCode* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::GetProjectTargets(::grpc::ServerContext* context, const ::testsgen::ProjectTargetsRequest* request, ::testsgen::ProjectTargetsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestsGenService::Service::GetFileTargets(::grpc::ServerContext* context, const ::testsgen::FileTargetsRequest* request, ::testsgen::FileTargetsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace testsgen

