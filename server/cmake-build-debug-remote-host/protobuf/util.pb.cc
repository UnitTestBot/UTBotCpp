// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: util.proto

#include "util.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace testsgen {
PROTOBUF_CONSTEXPR Progress::Progress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.percent_)*/0
  , /*decltype(_impl_.completed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProgressDefaultTypeInternal() {}
  union {
    Progress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProgressDefaultTypeInternal _Progress_default_instance_;
PROTOBUF_CONSTEXPR SourceCode::SourceCode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filepath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errormethodsnumber_)*/0u
  , /*decltype(_impl_.regressionmethodsnumber_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SourceCodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SourceCodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SourceCodeDefaultTypeInternal() {}
  union {
    SourceCode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourceCodeDefaultTypeInternal _SourceCode_default_instance_;
PROTOBUF_CONSTEXPR SourceInfo::SourceInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filepath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.line_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SourceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SourceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SourceInfoDefaultTypeInternal() {}
  union {
    SourceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourceInfoDefaultTypeInternal _SourceInfo_default_instance_;
PROTOBUF_CONSTEXPR PredicateInfo::PredicateInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.predicate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.returnvalue_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PredicateInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PredicateInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PredicateInfoDefaultTypeInternal() {}
  union {
    PredicateInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PredicateInfoDefaultTypeInternal _PredicateInfo_default_instance_;
}  // namespace testsgen
static ::_pb::Metadata file_level_metadata_util_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_util_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_util_2eproto = nullptr;

const uint32_t TableStruct_util_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::Progress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::Progress, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::testsgen::Progress, _impl_.percent_),
  PROTOBUF_FIELD_OFFSET(::testsgen::Progress, _impl_.completed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::SourceCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::SourceCode, _impl_.filepath_),
  PROTOBUF_FIELD_OFFSET(::testsgen::SourceCode, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::testsgen::SourceCode, _impl_.errormethodsnumber_),
  PROTOBUF_FIELD_OFFSET(::testsgen::SourceCode, _impl_.regressionmethodsnumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::SourceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::SourceInfo, _impl_.filepath_),
  PROTOBUF_FIELD_OFFSET(::testsgen::SourceInfo, _impl_.line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::PredicateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testsgen::PredicateInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::testsgen::PredicateInfo, _impl_.predicate_),
  PROTOBUF_FIELD_OFFSET(::testsgen::PredicateInfo, _impl_.returnvalue_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::testsgen::Progress)},
  { 9, -1, -1, sizeof(::testsgen::SourceCode)},
  { 19, -1, -1, sizeof(::testsgen::SourceInfo)},
  { 27, -1, -1, sizeof(::testsgen::PredicateInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::testsgen::_Progress_default_instance_._instance,
  &::testsgen::_SourceCode_default_instance_._instance,
  &::testsgen::_SourceInfo_default_instance_._instance,
  &::testsgen::_PredicateInfo_default_instance_._instance,
};

const char descriptor_table_protodef_util_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nutil.proto\022\010testsgen\"\?\n\010Progress\022\017\n\007me"
  "ssage\030\001 \001(\t\022\017\n\007percent\030\002 \001(\001\022\021\n\tcomplete"
  "d\030\003 \001(\010\"i\n\nSourceCode\022\020\n\010filePath\030\001 \001(\t\022"
  "\014\n\004code\030\002 \001(\t\022\032\n\022errorMethodsNumber\030\003 \001("
  "\r\022\037\n\027regressionMethodsNumber\030\004 \001(\r\",\n\nSo"
  "urceInfo\022\020\n\010filePath\030\001 \001(\t\022\014\n\004line\030\002 \001(\r"
  "\"_\n\rPredicateInfo\022&\n\004type\030\001 \001(\0162\030.testsg"
  "en.ValidationType\022\021\n\tpredicate\030\002 \001(\t\022\023\n\013"
  "returnValue\030\003 \001(\t*\266\001\n\016ValidationType\022\017\n\013"
  "UNSUPPORTED\020\000\022\n\n\006INT8_T\020\001\022\013\n\007INT16_T\020\002\022\013"
  "\n\007INT32_T\020\003\022\013\n\007INT64_T\020\004\022\013\n\007UINT8_T\020\005\022\014\n"
  "\010UINT16_T\020\006\022\014\n\010UINT32_T\020\007\022\014\n\010UINT64_T\020\010\022"
  "\010\n\004BOOL\020\t\022\010\n\004CHAR\020\n\022\t\n\005FLOAT\020\013\022\n\n\006STRING"
  "\020\014b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_util_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_util_2eproto = {
    false, false, 530, descriptor_table_protodef_util_2eproto,
    "util.proto",
    &descriptor_table_util_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_util_2eproto::offsets,
    file_level_metadata_util_2eproto, file_level_enum_descriptors_util_2eproto,
    file_level_service_descriptors_util_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_util_2eproto_getter() {
  return &descriptor_table_util_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_util_2eproto(&descriptor_table_util_2eproto);
namespace testsgen {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValidationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_util_2eproto);
  return file_level_enum_descriptors_util_2eproto[0];
}
bool ValidationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Progress::_Internal {
 public:
};

Progress::Progress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.Progress)
}
Progress::Progress(const Progress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Progress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.percent_){}
    , decltype(_impl_.completed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.percent_, &from._impl_.percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.completed_) -
    reinterpret_cast<char*>(&_impl_.percent_)) + sizeof(_impl_.completed_));
  // @@protoc_insertion_point(copy_constructor:testsgen.Progress)
}

inline void Progress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.percent_){0}
    , decltype(_impl_.completed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Progress::~Progress() {
  // @@protoc_insertion_point(destructor:testsgen.Progress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Progress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void Progress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Progress::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.Progress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.completed_) -
      reinterpret_cast<char*>(&_impl_.percent_)) + sizeof(_impl_.completed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Progress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.Progress.message"));
        } else
          goto handle_unusual;
        continue;
      // double percent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool completed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Progress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.Progress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.Progress.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // double percent = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_percent = this->_internal_percent();
  uint64_t raw_percent;
  memcpy(&raw_percent, &tmp_percent, sizeof(tmp_percent));
  if (raw_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_percent(), target);
  }

  // bool completed = 3;
  if (this->_internal_completed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_completed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.Progress)
  return target;
}

size_t Progress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.Progress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // double percent = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_percent = this->_internal_percent();
  uint64_t raw_percent;
  memcpy(&raw_percent, &tmp_percent, sizeof(tmp_percent));
  if (raw_percent != 0) {
    total_size += 1 + 8;
  }

  // bool completed = 3;
  if (this->_internal_completed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Progress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Progress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Progress::GetClassData() const { return &_class_data_; }


void Progress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Progress*>(&to_msg);
  auto& from = static_cast<const Progress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.Progress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_percent = from._internal_percent();
  uint64_t raw_percent;
  memcpy(&raw_percent, &tmp_percent, sizeof(tmp_percent));
  if (raw_percent != 0) {
    _this->_internal_set_percent(from._internal_percent());
  }
  if (from._internal_completed() != 0) {
    _this->_internal_set_completed(from._internal_completed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Progress::CopyFrom(const Progress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Progress::IsInitialized() const {
  return true;
}

void Progress::InternalSwap(Progress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Progress, _impl_.completed_)
      + sizeof(Progress::_impl_.completed_)
      - PROTOBUF_FIELD_OFFSET(Progress, _impl_.percent_)>(
          reinterpret_cast<char*>(&_impl_.percent_),
          reinterpret_cast<char*>(&other->_impl_.percent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Progress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_util_2eproto_getter, &descriptor_table_util_2eproto_once,
      file_level_metadata_util_2eproto[0]);
}

// ===================================================================

class SourceCode::_Internal {
 public:
};

SourceCode::SourceCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.SourceCode)
}
SourceCode::SourceCode(const SourceCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SourceCode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.errormethodsnumber_){}
    , decltype(_impl_.regressionmethodsnumber_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filepath().empty()) {
    _this->_impl_.filepath_.Set(from._internal_filepath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.errormethodsnumber_, &from._impl_.errormethodsnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.regressionmethodsnumber_) -
    reinterpret_cast<char*>(&_impl_.errormethodsnumber_)) + sizeof(_impl_.regressionmethodsnumber_));
  // @@protoc_insertion_point(copy_constructor:testsgen.SourceCode)
}

inline void SourceCode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.errormethodsnumber_){0u}
    , decltype(_impl_.regressionmethodsnumber_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SourceCode::~SourceCode() {
  // @@protoc_insertion_point(destructor:testsgen.SourceCode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SourceCode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filepath_.Destroy();
  _impl_.code_.Destroy();
}

void SourceCode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SourceCode::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.SourceCode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filepath_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  ::memset(&_impl_.errormethodsnumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.regressionmethodsnumber_) -
      reinterpret_cast<char*>(&_impl_.errormethodsnumber_)) + sizeof(_impl_.regressionmethodsnumber_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceCode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.SourceCode.filePath"));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.SourceCode.code"));
        } else
          goto handle_unusual;
        continue;
      // uint32 errorMethodsNumber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.errormethodsnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 regressionMethodsNumber = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.regressionmethodsnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SourceCode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.SourceCode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filePath = 1;
  if (!this->_internal_filepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.SourceCode.filePath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filepath(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.SourceCode.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // uint32 errorMethodsNumber = 3;
  if (this->_internal_errormethodsnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_errormethodsnumber(), target);
  }

  // uint32 regressionMethodsNumber = 4;
  if (this->_internal_regressionmethodsnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_regressionmethodsnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.SourceCode)
  return target;
}

size_t SourceCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.SourceCode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filePath = 1;
  if (!this->_internal_filepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filepath());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // uint32 errorMethodsNumber = 3;
  if (this->_internal_errormethodsnumber() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_errormethodsnumber());
  }

  // uint32 regressionMethodsNumber = 4;
  if (this->_internal_regressionmethodsnumber() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_regressionmethodsnumber());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SourceCode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SourceCode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SourceCode::GetClassData() const { return &_class_data_; }


void SourceCode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SourceCode*>(&to_msg);
  auto& from = static_cast<const SourceCode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.SourceCode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filepath().empty()) {
    _this->_internal_set_filepath(from._internal_filepath());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_errormethodsnumber() != 0) {
    _this->_internal_set_errormethodsnumber(from._internal_errormethodsnumber());
  }
  if (from._internal_regressionmethodsnumber() != 0) {
    _this->_internal_set_regressionmethodsnumber(from._internal_regressionmethodsnumber());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SourceCode::CopyFrom(const SourceCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.SourceCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceCode::IsInitialized() const {
  return true;
}

void SourceCode::InternalSwap(SourceCode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filepath_, lhs_arena,
      &other->_impl_.filepath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SourceCode, _impl_.regressionmethodsnumber_)
      + sizeof(SourceCode::_impl_.regressionmethodsnumber_)
      - PROTOBUF_FIELD_OFFSET(SourceCode, _impl_.errormethodsnumber_)>(
          reinterpret_cast<char*>(&_impl_.errormethodsnumber_),
          reinterpret_cast<char*>(&other->_impl_.errormethodsnumber_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceCode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_util_2eproto_getter, &descriptor_table_util_2eproto_once,
      file_level_metadata_util_2eproto[1]);
}

// ===================================================================

class SourceInfo::_Internal {
 public:
};

SourceInfo::SourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.SourceInfo)
}
SourceInfo::SourceInfo(const SourceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SourceInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , decltype(_impl_.line_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filepath().empty()) {
    _this->_impl_.filepath_.Set(from._internal_filepath(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.line_ = from._impl_.line_;
  // @@protoc_insertion_point(copy_constructor:testsgen.SourceInfo)
}

inline void SourceInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , decltype(_impl_.line_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SourceInfo::~SourceInfo() {
  // @@protoc_insertion_point(destructor:testsgen.SourceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SourceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filepath_.Destroy();
}

void SourceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.SourceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filepath_.ClearToEmpty();
  _impl_.line_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.SourceInfo.filePath"));
        } else
          goto handle_unusual;
        continue;
      // uint32 line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SourceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.SourceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filePath = 1;
  if (!this->_internal_filepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.SourceInfo.filePath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filepath(), target);
  }

  // uint32 line = 2;
  if (this->_internal_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.SourceInfo)
  return target;
}

size_t SourceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.SourceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filePath = 1;
  if (!this->_internal_filepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filepath());
  }

  // uint32 line = 2;
  if (this->_internal_line() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_line());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SourceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SourceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SourceInfo::GetClassData() const { return &_class_data_; }


void SourceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SourceInfo*>(&to_msg);
  auto& from = static_cast<const SourceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.SourceInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filepath().empty()) {
    _this->_internal_set_filepath(from._internal_filepath());
  }
  if (from._internal_line() != 0) {
    _this->_internal_set_line(from._internal_line());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SourceInfo::CopyFrom(const SourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.SourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceInfo::IsInitialized() const {
  return true;
}

void SourceInfo::InternalSwap(SourceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filepath_, lhs_arena,
      &other->_impl_.filepath_, rhs_arena
  );
  swap(_impl_.line_, other->_impl_.line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_util_2eproto_getter, &descriptor_table_util_2eproto_once,
      file_level_metadata_util_2eproto[2]);
}

// ===================================================================

class PredicateInfo::_Internal {
 public:
};

PredicateInfo::PredicateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testsgen.PredicateInfo)
}
PredicateInfo::PredicateInfo(const PredicateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PredicateInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.predicate_){}
    , decltype(_impl_.returnvalue_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.predicate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.predicate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_predicate().empty()) {
    _this->_impl_.predicate_.Set(from._internal_predicate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.returnvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.returnvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_returnvalue().empty()) {
    _this->_impl_.returnvalue_.Set(from._internal_returnvalue(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:testsgen.PredicateInfo)
}

inline void PredicateInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.predicate_){}
    , decltype(_impl_.returnvalue_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.predicate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.predicate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.returnvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.returnvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PredicateInfo::~PredicateInfo() {
  // @@protoc_insertion_point(destructor:testsgen.PredicateInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PredicateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.predicate_.Destroy();
  _impl_.returnvalue_.Destroy();
}

void PredicateInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PredicateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.PredicateInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.predicate_.ClearToEmpty();
  _impl_.returnvalue_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredicateInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .testsgen.ValidationType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::testsgen::ValidationType>(val));
        } else
          goto handle_unusual;
        continue;
      // string predicate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_predicate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.PredicateInfo.predicate"));
        } else
          goto handle_unusual;
        continue;
      // string returnValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_returnvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testsgen.PredicateInfo.returnValue"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PredicateInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.PredicateInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ValidationType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string predicate = 2;
  if (!this->_internal_predicate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_predicate().data(), static_cast<int>(this->_internal_predicate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.PredicateInfo.predicate");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_predicate(), target);
  }

  // string returnValue = 3;
  if (!this->_internal_returnvalue().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_returnvalue().data(), static_cast<int>(this->_internal_returnvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.PredicateInfo.returnValue");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_returnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.PredicateInfo)
  return target;
}

size_t PredicateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.PredicateInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string predicate = 2;
  if (!this->_internal_predicate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_predicate());
  }

  // string returnValue = 3;
  if (!this->_internal_returnvalue().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_returnvalue());
  }

  // .testsgen.ValidationType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PredicateInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PredicateInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PredicateInfo::GetClassData() const { return &_class_data_; }


void PredicateInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PredicateInfo*>(&to_msg);
  auto& from = static_cast<const PredicateInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testsgen.PredicateInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_predicate().empty()) {
    _this->_internal_set_predicate(from._internal_predicate());
  }
  if (!from._internal_returnvalue().empty()) {
    _this->_internal_set_returnvalue(from._internal_returnvalue());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PredicateInfo::CopyFrom(const PredicateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.PredicateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredicateInfo::IsInitialized() const {
  return true;
}

void PredicateInfo::InternalSwap(PredicateInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.predicate_, lhs_arena,
      &other->_impl_.predicate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.returnvalue_, lhs_arena,
      &other->_impl_.returnvalue_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredicateInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_util_2eproto_getter, &descriptor_table_util_2eproto_once,
      file_level_metadata_util_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace testsgen
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::testsgen::Progress*
Arena::CreateMaybeMessage< ::testsgen::Progress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::Progress >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::SourceCode*
Arena::CreateMaybeMessage< ::testsgen::SourceCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::SourceCode >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::SourceInfo*
Arena::CreateMaybeMessage< ::testsgen::SourceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::SourceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::PredicateInfo*
Arena::CreateMaybeMessage< ::testsgen::PredicateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testsgen::PredicateInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
