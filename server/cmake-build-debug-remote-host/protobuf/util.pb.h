// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: util.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_util_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_util_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_util_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_util_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_util_2eproto;
namespace testsgen {
class PredicateInfo;
struct PredicateInfoDefaultTypeInternal;
extern PredicateInfoDefaultTypeInternal _PredicateInfo_default_instance_;
class Progress;
struct ProgressDefaultTypeInternal;
extern ProgressDefaultTypeInternal _Progress_default_instance_;
class SourceCode;
struct SourceCodeDefaultTypeInternal;
extern SourceCodeDefaultTypeInternal _SourceCode_default_instance_;
class SourceInfo;
struct SourceInfoDefaultTypeInternal;
extern SourceInfoDefaultTypeInternal _SourceInfo_default_instance_;
}  // namespace testsgen
PROTOBUF_NAMESPACE_OPEN
template<> ::testsgen::PredicateInfo* Arena::CreateMaybeMessage<::testsgen::PredicateInfo>(Arena*);
template<> ::testsgen::Progress* Arena::CreateMaybeMessage<::testsgen::Progress>(Arena*);
template<> ::testsgen::SourceCode* Arena::CreateMaybeMessage<::testsgen::SourceCode>(Arena*);
template<> ::testsgen::SourceInfo* Arena::CreateMaybeMessage<::testsgen::SourceInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace testsgen {

enum ValidationType : int {
  UNSUPPORTED = 0,
  INT8_T = 1,
  INT16_T = 2,
  INT32_T = 3,
  INT64_T = 4,
  UINT8_T = 5,
  UINT16_T = 6,
  UINT32_T = 7,
  UINT64_T = 8,
  BOOL = 9,
  CHAR = 10,
  FLOAT = 11,
  STRING = 12,
  ValidationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ValidationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ValidationType_IsValid(int value);
constexpr ValidationType ValidationType_MIN = UNSUPPORTED;
constexpr ValidationType ValidationType_MAX = STRING;
constexpr int ValidationType_ARRAYSIZE = ValidationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValidationType_descriptor();
template<typename T>
inline const std::string& ValidationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ValidationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ValidationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ValidationType_descriptor(), enum_t_value);
}
inline bool ValidationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ValidationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ValidationType>(
    ValidationType_descriptor(), name, value);
}
// ===================================================================

class Progress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testsgen.Progress) */ {
 public:
  inline Progress() : Progress(nullptr) {}
  ~Progress() override;
  explicit PROTOBUF_CONSTEXPR Progress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Progress(const Progress& from);
  Progress(Progress&& from) noexcept
    : Progress() {
    *this = ::std::move(from);
  }

  inline Progress& operator=(const Progress& from) {
    CopyFrom(from);
    return *this;
  }
  inline Progress& operator=(Progress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Progress& default_instance() {
    return *internal_default_instance();
  }
  static inline const Progress* internal_default_instance() {
    return reinterpret_cast<const Progress*>(
               &_Progress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Progress& a, Progress& b) {
    a.Swap(&b);
  }
  inline void Swap(Progress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Progress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Progress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Progress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Progress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Progress& from) {
    Progress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Progress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testsgen.Progress";
  }
  protected:
  explicit Progress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kPercentFieldNumber = 2,
    kCompletedFieldNumber = 3,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // double percent = 2;
  void clear_percent();
  double percent() const;
  void set_percent(double value);
  private:
  double _internal_percent() const;
  void _internal_set_percent(double value);
  public:

  // bool completed = 3;
  void clear_completed();
  bool completed() const;
  void set_completed(bool value);
  private:
  bool _internal_completed() const;
  void _internal_set_completed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:testsgen.Progress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    double percent_;
    bool completed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class SourceCode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testsgen.SourceCode) */ {
 public:
  inline SourceCode() : SourceCode(nullptr) {}
  ~SourceCode() override;
  explicit PROTOBUF_CONSTEXPR SourceCode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SourceCode(const SourceCode& from);
  SourceCode(SourceCode&& from) noexcept
    : SourceCode() {
    *this = ::std::move(from);
  }

  inline SourceCode& operator=(const SourceCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceCode& operator=(SourceCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SourceCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const SourceCode* internal_default_instance() {
    return reinterpret_cast<const SourceCode*>(
               &_SourceCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SourceCode& a, SourceCode& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceCode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SourceCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SourceCode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SourceCode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SourceCode& from) {
    SourceCode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceCode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testsgen.SourceCode";
  }
  protected:
  explicit SourceCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 1,
    kCodeFieldNumber = 2,
    kErrorMethodsNumberFieldNumber = 3,
    kRegressionMethodsNumberFieldNumber = 4,
  };
  // string filePath = 1;
  void clear_filepath();
  const std::string& filepath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filepath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filepath();
  PROTOBUF_NODISCARD std::string* release_filepath();
  void set_allocated_filepath(std::string* filepath);
  private:
  const std::string& _internal_filepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filepath(const std::string& value);
  std::string* _internal_mutable_filepath();
  public:

  // string code = 2;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // uint32 errorMethodsNumber = 3;
  void clear_errormethodsnumber();
  uint32_t errormethodsnumber() const;
  void set_errormethodsnumber(uint32_t value);
  private:
  uint32_t _internal_errormethodsnumber() const;
  void _internal_set_errormethodsnumber(uint32_t value);
  public:

  // uint32 regressionMethodsNumber = 4;
  void clear_regressionmethodsnumber();
  uint32_t regressionmethodsnumber() const;
  void set_regressionmethodsnumber(uint32_t value);
  private:
  uint32_t _internal_regressionmethodsnumber() const;
  void _internal_set_regressionmethodsnumber(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:testsgen.SourceCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filepath_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    uint32_t errormethodsnumber_;
    uint32_t regressionmethodsnumber_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class SourceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testsgen.SourceInfo) */ {
 public:
  inline SourceInfo() : SourceInfo(nullptr) {}
  ~SourceInfo() override;
  explicit PROTOBUF_CONSTEXPR SourceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SourceInfo(const SourceInfo& from);
  SourceInfo(SourceInfo&& from) noexcept
    : SourceInfo() {
    *this = ::std::move(from);
  }

  inline SourceInfo& operator=(const SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceInfo& operator=(SourceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SourceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SourceInfo* internal_default_instance() {
    return reinterpret_cast<const SourceInfo*>(
               &_SourceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SourceInfo& a, SourceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SourceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SourceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SourceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SourceInfo& from) {
    SourceInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testsgen.SourceInfo";
  }
  protected:
  explicit SourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 1,
    kLineFieldNumber = 2,
  };
  // string filePath = 1;
  void clear_filepath();
  const std::string& filepath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filepath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filepath();
  PROTOBUF_NODISCARD std::string* release_filepath();
  void set_allocated_filepath(std::string* filepath);
  private:
  const std::string& _internal_filepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filepath(const std::string& value);
  std::string* _internal_mutable_filepath();
  public:

  // uint32 line = 2;
  void clear_line();
  uint32_t line() const;
  void set_line(uint32_t value);
  private:
  uint32_t _internal_line() const;
  void _internal_set_line(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:testsgen.SourceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filepath_;
    uint32_t line_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class PredicateInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testsgen.PredicateInfo) */ {
 public:
  inline PredicateInfo() : PredicateInfo(nullptr) {}
  ~PredicateInfo() override;
  explicit PROTOBUF_CONSTEXPR PredicateInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PredicateInfo(const PredicateInfo& from);
  PredicateInfo(PredicateInfo&& from) noexcept
    : PredicateInfo() {
    *this = ::std::move(from);
  }

  inline PredicateInfo& operator=(const PredicateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredicateInfo& operator=(PredicateInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PredicateInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PredicateInfo* internal_default_instance() {
    return reinterpret_cast<const PredicateInfo*>(
               &_PredicateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PredicateInfo& a, PredicateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PredicateInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredicateInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PredicateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PredicateInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PredicateInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PredicateInfo& from) {
    PredicateInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredicateInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testsgen.PredicateInfo";
  }
  protected:
  explicit PredicateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredicateFieldNumber = 2,
    kReturnValueFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // string predicate = 2;
  void clear_predicate();
  const std::string& predicate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_predicate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_predicate();
  PROTOBUF_NODISCARD std::string* release_predicate();
  void set_allocated_predicate(std::string* predicate);
  private:
  const std::string& _internal_predicate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_predicate(const std::string& value);
  std::string* _internal_mutable_predicate();
  public:

  // string returnValue = 3;
  void clear_returnvalue();
  const std::string& returnvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_returnvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_returnvalue();
  PROTOBUF_NODISCARD std::string* release_returnvalue();
  void set_allocated_returnvalue(std::string* returnvalue);
  private:
  const std::string& _internal_returnvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_returnvalue(const std::string& value);
  std::string* _internal_mutable_returnvalue();
  public:

  // .testsgen.ValidationType type = 1;
  void clear_type();
  ::testsgen::ValidationType type() const;
  void set_type(::testsgen::ValidationType value);
  private:
  ::testsgen::ValidationType _internal_type() const;
  void _internal_set_type(::testsgen::ValidationType value);
  public:

  // @@protoc_insertion_point(class_scope:testsgen.PredicateInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predicate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr returnvalue_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_util_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Progress

// string message = 1;
inline void Progress::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Progress::message() const {
  // @@protoc_insertion_point(field_get:testsgen.Progress.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Progress::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testsgen.Progress.message)
}
inline std::string* Progress::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:testsgen.Progress.message)
  return _s;
}
inline const std::string& Progress::_internal_message() const {
  return _impl_.message_.Get();
}
inline void Progress::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Progress::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* Progress::release_message() {
  // @@protoc_insertion_point(field_release:testsgen.Progress.message)
  return _impl_.message_.Release();
}
inline void Progress::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testsgen.Progress.message)
}

// double percent = 2;
inline void Progress::clear_percent() {
  _impl_.percent_ = 0;
}
inline double Progress::_internal_percent() const {
  return _impl_.percent_;
}
inline double Progress::percent() const {
  // @@protoc_insertion_point(field_get:testsgen.Progress.percent)
  return _internal_percent();
}
inline void Progress::_internal_set_percent(double value) {
  
  _impl_.percent_ = value;
}
inline void Progress::set_percent(double value) {
  _internal_set_percent(value);
  // @@protoc_insertion_point(field_set:testsgen.Progress.percent)
}

// bool completed = 3;
inline void Progress::clear_completed() {
  _impl_.completed_ = false;
}
inline bool Progress::_internal_completed() const {
  return _impl_.completed_;
}
inline bool Progress::completed() const {
  // @@protoc_insertion_point(field_get:testsgen.Progress.completed)
  return _internal_completed();
}
inline void Progress::_internal_set_completed(bool value) {
  
  _impl_.completed_ = value;
}
inline void Progress::set_completed(bool value) {
  _internal_set_completed(value);
  // @@protoc_insertion_point(field_set:testsgen.Progress.completed)
}

// -------------------------------------------------------------------

// SourceCode

// string filePath = 1;
inline void SourceCode::clear_filepath() {
  _impl_.filepath_.ClearToEmpty();
}
inline const std::string& SourceCode::filepath() const {
  // @@protoc_insertion_point(field_get:testsgen.SourceCode.filePath)
  return _internal_filepath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SourceCode::set_filepath(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filepath_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testsgen.SourceCode.filePath)
}
inline std::string* SourceCode::mutable_filepath() {
  std::string* _s = _internal_mutable_filepath();
  // @@protoc_insertion_point(field_mutable:testsgen.SourceCode.filePath)
  return _s;
}
inline const std::string& SourceCode::_internal_filepath() const {
  return _impl_.filepath_.Get();
}
inline void SourceCode::_internal_set_filepath(const std::string& value) {
  
  _impl_.filepath_.Set(value, GetArenaForAllocation());
}
inline std::string* SourceCode::_internal_mutable_filepath() {
  
  return _impl_.filepath_.Mutable(GetArenaForAllocation());
}
inline std::string* SourceCode::release_filepath() {
  // @@protoc_insertion_point(field_release:testsgen.SourceCode.filePath)
  return _impl_.filepath_.Release();
}
inline void SourceCode::set_allocated_filepath(std::string* filepath) {
  if (filepath != nullptr) {
    
  } else {
    
  }
  _impl_.filepath_.SetAllocated(filepath, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filepath_.IsDefault()) {
    _impl_.filepath_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testsgen.SourceCode.filePath)
}

// string code = 2;
inline void SourceCode::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& SourceCode::code() const {
  // @@protoc_insertion_point(field_get:testsgen.SourceCode.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SourceCode::set_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testsgen.SourceCode.code)
}
inline std::string* SourceCode::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:testsgen.SourceCode.code)
  return _s;
}
inline const std::string& SourceCode::_internal_code() const {
  return _impl_.code_.Get();
}
inline void SourceCode::_internal_set_code(const std::string& value) {
  
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* SourceCode::_internal_mutable_code() {
  
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* SourceCode::release_code() {
  // @@protoc_insertion_point(field_release:testsgen.SourceCode.code)
  return _impl_.code_.Release();
}
inline void SourceCode::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testsgen.SourceCode.code)
}

// uint32 errorMethodsNumber = 3;
inline void SourceCode::clear_errormethodsnumber() {
  _impl_.errormethodsnumber_ = 0u;
}
inline uint32_t SourceCode::_internal_errormethodsnumber() const {
  return _impl_.errormethodsnumber_;
}
inline uint32_t SourceCode::errormethodsnumber() const {
  // @@protoc_insertion_point(field_get:testsgen.SourceCode.errorMethodsNumber)
  return _internal_errormethodsnumber();
}
inline void SourceCode::_internal_set_errormethodsnumber(uint32_t value) {
  
  _impl_.errormethodsnumber_ = value;
}
inline void SourceCode::set_errormethodsnumber(uint32_t value) {
  _internal_set_errormethodsnumber(value);
  // @@protoc_insertion_point(field_set:testsgen.SourceCode.errorMethodsNumber)
}

// uint32 regressionMethodsNumber = 4;
inline void SourceCode::clear_regressionmethodsnumber() {
  _impl_.regressionmethodsnumber_ = 0u;
}
inline uint32_t SourceCode::_internal_regressionmethodsnumber() const {
  return _impl_.regressionmethodsnumber_;
}
inline uint32_t SourceCode::regressionmethodsnumber() const {
  // @@protoc_insertion_point(field_get:testsgen.SourceCode.regressionMethodsNumber)
  return _internal_regressionmethodsnumber();
}
inline void SourceCode::_internal_set_regressionmethodsnumber(uint32_t value) {
  
  _impl_.regressionmethodsnumber_ = value;
}
inline void SourceCode::set_regressionmethodsnumber(uint32_t value) {
  _internal_set_regressionmethodsnumber(value);
  // @@protoc_insertion_point(field_set:testsgen.SourceCode.regressionMethodsNumber)
}

// -------------------------------------------------------------------

// SourceInfo

// string filePath = 1;
inline void SourceInfo::clear_filepath() {
  _impl_.filepath_.ClearToEmpty();
}
inline const std::string& SourceInfo::filepath() const {
  // @@protoc_insertion_point(field_get:testsgen.SourceInfo.filePath)
  return _internal_filepath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SourceInfo::set_filepath(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filepath_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testsgen.SourceInfo.filePath)
}
inline std::string* SourceInfo::mutable_filepath() {
  std::string* _s = _internal_mutable_filepath();
  // @@protoc_insertion_point(field_mutable:testsgen.SourceInfo.filePath)
  return _s;
}
inline const std::string& SourceInfo::_internal_filepath() const {
  return _impl_.filepath_.Get();
}
inline void SourceInfo::_internal_set_filepath(const std::string& value) {
  
  _impl_.filepath_.Set(value, GetArenaForAllocation());
}
inline std::string* SourceInfo::_internal_mutable_filepath() {
  
  return _impl_.filepath_.Mutable(GetArenaForAllocation());
}
inline std::string* SourceInfo::release_filepath() {
  // @@protoc_insertion_point(field_release:testsgen.SourceInfo.filePath)
  return _impl_.filepath_.Release();
}
inline void SourceInfo::set_allocated_filepath(std::string* filepath) {
  if (filepath != nullptr) {
    
  } else {
    
  }
  _impl_.filepath_.SetAllocated(filepath, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filepath_.IsDefault()) {
    _impl_.filepath_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testsgen.SourceInfo.filePath)
}

// uint32 line = 2;
inline void SourceInfo::clear_line() {
  _impl_.line_ = 0u;
}
inline uint32_t SourceInfo::_internal_line() const {
  return _impl_.line_;
}
inline uint32_t SourceInfo::line() const {
  // @@protoc_insertion_point(field_get:testsgen.SourceInfo.line)
  return _internal_line();
}
inline void SourceInfo::_internal_set_line(uint32_t value) {
  
  _impl_.line_ = value;
}
inline void SourceInfo::set_line(uint32_t value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:testsgen.SourceInfo.line)
}

// -------------------------------------------------------------------

// PredicateInfo

// .testsgen.ValidationType type = 1;
inline void PredicateInfo::clear_type() {
  _impl_.type_ = 0;
}
inline ::testsgen::ValidationType PredicateInfo::_internal_type() const {
  return static_cast< ::testsgen::ValidationType >(_impl_.type_);
}
inline ::testsgen::ValidationType PredicateInfo::type() const {
  // @@protoc_insertion_point(field_get:testsgen.PredicateInfo.type)
  return _internal_type();
}
inline void PredicateInfo::_internal_set_type(::testsgen::ValidationType value) {
  
  _impl_.type_ = value;
}
inline void PredicateInfo::set_type(::testsgen::ValidationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:testsgen.PredicateInfo.type)
}

// string predicate = 2;
inline void PredicateInfo::clear_predicate() {
  _impl_.predicate_.ClearToEmpty();
}
inline const std::string& PredicateInfo::predicate() const {
  // @@protoc_insertion_point(field_get:testsgen.PredicateInfo.predicate)
  return _internal_predicate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PredicateInfo::set_predicate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.predicate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testsgen.PredicateInfo.predicate)
}
inline std::string* PredicateInfo::mutable_predicate() {
  std::string* _s = _internal_mutable_predicate();
  // @@protoc_insertion_point(field_mutable:testsgen.PredicateInfo.predicate)
  return _s;
}
inline const std::string& PredicateInfo::_internal_predicate() const {
  return _impl_.predicate_.Get();
}
inline void PredicateInfo::_internal_set_predicate(const std::string& value) {
  
  _impl_.predicate_.Set(value, GetArenaForAllocation());
}
inline std::string* PredicateInfo::_internal_mutable_predicate() {
  
  return _impl_.predicate_.Mutable(GetArenaForAllocation());
}
inline std::string* PredicateInfo::release_predicate() {
  // @@protoc_insertion_point(field_release:testsgen.PredicateInfo.predicate)
  return _impl_.predicate_.Release();
}
inline void PredicateInfo::set_allocated_predicate(std::string* predicate) {
  if (predicate != nullptr) {
    
  } else {
    
  }
  _impl_.predicate_.SetAllocated(predicate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.predicate_.IsDefault()) {
    _impl_.predicate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testsgen.PredicateInfo.predicate)
}

// string returnValue = 3;
inline void PredicateInfo::clear_returnvalue() {
  _impl_.returnvalue_.ClearToEmpty();
}
inline const std::string& PredicateInfo::returnvalue() const {
  // @@protoc_insertion_point(field_get:testsgen.PredicateInfo.returnValue)
  return _internal_returnvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PredicateInfo::set_returnvalue(ArgT0&& arg0, ArgT... args) {
 
 _impl_.returnvalue_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testsgen.PredicateInfo.returnValue)
}
inline std::string* PredicateInfo::mutable_returnvalue() {
  std::string* _s = _internal_mutable_returnvalue();
  // @@protoc_insertion_point(field_mutable:testsgen.PredicateInfo.returnValue)
  return _s;
}
inline const std::string& PredicateInfo::_internal_returnvalue() const {
  return _impl_.returnvalue_.Get();
}
inline void PredicateInfo::_internal_set_returnvalue(const std::string& value) {
  
  _impl_.returnvalue_.Set(value, GetArenaForAllocation());
}
inline std::string* PredicateInfo::_internal_mutable_returnvalue() {
  
  return _impl_.returnvalue_.Mutable(GetArenaForAllocation());
}
inline std::string* PredicateInfo::release_returnvalue() {
  // @@protoc_insertion_point(field_release:testsgen.PredicateInfo.returnValue)
  return _impl_.returnvalue_.Release();
}
inline void PredicateInfo::set_allocated_returnvalue(std::string* returnvalue) {
  if (returnvalue != nullptr) {
    
  } else {
    
  }
  _impl_.returnvalue_.SetAllocated(returnvalue, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.returnvalue_.IsDefault()) {
    _impl_.returnvalue_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testsgen.PredicateInfo.returnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace testsgen

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::testsgen::ValidationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::testsgen::ValidationType>() {
  return ::testsgen::ValidationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_util_2eproto
