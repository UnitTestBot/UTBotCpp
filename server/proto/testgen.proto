syntax = "proto3";

package testsgen;

import "util.proto";
import "google/protobuf/duration.proto";

service TestsGenService {
    rpc Handshake(VersionInfo) returns(VersionInfo) {}

    rpc Heartbeat(DummyRequest) returns(HeartbeatResponse) {}

    rpc OpenLogChannel(LogChannelRequest) returns(stream LogEntry) {}

    rpc CloseLogChannel(DummyRequest) returns(DummyResponse) {}

    rpc OpenGTestChannel(LogChannelRequest) returns(stream LogEntry) {}

    rpc CloseGTestChannel(DummyRequest) returns(DummyResponse) {}

    rpc RegisterClient(RegisterClientRequest) returns(DummyResponse) {}

    rpc GetFunctionReturnType(FunctionRequest) returns(FunctionTypeResponse) {}

    rpc GenerateSnippetTests(SnippetRequest) returns(stream TestsResponse) {}

    rpc GenerateProjectTests(ProjectRequest) returns(stream TestsResponse) {}

    rpc GenerateFileTests(FileRequest) returns(stream TestsResponse) {}

    rpc GenerateFunctionTests(FunctionRequest) returns(stream TestsResponse) {}

    rpc GenerateClassTests(ClassRequest) returns(stream TestsResponse) {}

    rpc GenerateFolderTests(FolderRequest) returns(stream TestsResponse) {}

    rpc GenerateLineTests(LineRequest) returns(stream TestsResponse) {}

    rpc GenerateAssertionFailTests(AssertionRequest) returns(stream TestsResponse) {}

    rpc GeneratePredicateTests(PredicateRequest) returns(stream TestsResponse) {}

    rpc CreateTestsCoverageAndResult(CoverageAndResultsRequest) returns(stream CoverageAndResultsResponse) {}

    rpc GenerateProjectStubs(ProjectRequest) returns(stream StubsResponse) {}

    rpc PrintModulesContent(ProjectContext) returns(DummyResponse) {}

    rpc ConfigureProject(ProjectConfigRequest) returns(stream ProjectConfigResponse) {}

    rpc GetSourceCode(SourceInfo) returns(SourceCode) {}

    rpc GetProjectTargets(ProjectTargetsRequest) returns(ProjectTargetsResponse) {}

    rpc GetFileTargets(FileTargetsRequest) returns(FileTargetsResponse) {}
}

message DummyRequest {}

message DummyResponse {}

message VersionInfo {
    string version = 1;
}

message RegisterClientRequest {
    string clientId = 1;
}

message RegisterClientResponse {
    bool isDuplicate = 1;
}

message FunctionTypeResponse {
    ValidationType validationType = 1;
}

message LogChannelRequest {
    string logLevel = 2;
}

message LogEntry {
    string message = 1;
}

message ProjectContext {
    string projectName = 1;
    string projectPath = 2;
    string testDirPath = 3;
    string buildDirRelativePath = 4;
    string clientProjectPath = 5;
}

enum ErrorMode {
    FAILING = 0;
    PASSING_IN_TARGET_ONLY = 1;
    PASSING = 2;
}

message SettingsContext {
    bool generateForStaticFunctions = 1;
    bool verbose = 2;
    int32 timeoutPerFunction = 3;
    int32 timeoutPerTest = 4;
    bool useDeterministicSearcher = 5;
    bool useStubs = 6;
    ErrorMode errorMode = 7;
}

message SnippetRequest {
    ProjectContext projectContext = 1;
    SettingsContext settingsContext = 2;
    string filePath = 3;
}

message ProjectRequest {
    ProjectContext projectContext = 1;
    SettingsContext settingsContext = 2;
    repeated string sourcePaths = 3;
    bool synchronizeCode = 4;
    string targetPath = 5;
}

message FileRequest {
    ProjectRequest projectRequest = 1;
    string filePath = 2;
}

message FolderRequest {
    ProjectRequest projectRequest = 1;
    string folderPath = 2;
}

message LineRequest {
    ProjectRequest projectRequest = 1;
    SourceInfo sourceInfo = 2;
}

message FunctionRequest {
    LineRequest lineRequest = 1;
}

message ClassRequest {
    LineRequest lineRequest = 1;
}

message AssertionRequest {
    LineRequest lineRequest = 1;
}

message PredicateRequest {
    LineRequest lineRequest = 1;
    PredicateInfo predicateInfo = 2;
}

message StubsResponse {
    repeated SourceCode stubSources = 1;
    Progress progress = 2;
}

message TestsResponse {
    repeated SourceCode testSources = 1;
    StubsResponse stubs = 2;
    Progress progress = 3;
}

message SourceLine {
    uint32 line = 1;
}

message FileCoverageSimplified {
    string filePath = 1;
    repeated SourceLine fullCoverageLines = 2;
    repeated SourceLine partialCoverageLines = 3;
    repeated SourceLine noCoverageLines = 4;
}

message TestFilter {
    string testFilePath = 1;
    string testName = 2;
    string testSuite = 3;
}

message CoverageAndResultsRequest {
    ProjectContext projectContext = 1;
    SettingsContext settingsContext = 2;
    TestFilter testFilter = 3;
    bool coverage = 4;
}

enum TestStatus {
    TEST_PASSED = 0;
    TEST_FAILED = 1;
    TEST_DEATH = 2;
    TEST_INTERRUPTED = 3;
}

message TestResultObject {
    string testFilePath = 1;
    string testname = 2;
    TestStatus status = 3;
    string output = 4;
    google.protobuf.Duration executionTime = 5;
}

message CoverageAndResultsResponse {
    repeated TestResultObject testRunResults = 1;
    repeated FileCoverageSimplified coverages = 2;
    Progress progress = 3;
    string errorMessage = 4;
}

message HeartbeatResponse {
    bool linked = 1;
}

enum ConfigMode {
    CHECK = 0;
    CREATE_BUILD_DIR = 1;
    GENERATE_JSON_FILES = 2;
    ALL = 3;
}

enum ProjectConfigStatus {
    IS_OK = 0;
    BUILD_DIR_NOT_FOUND = 1;
    COMPILE_COMMANDS_JSON_NOT_FOUND = 2;
    LINK_COMMANDS_JSON_NOT_FOUND = 3;
    BUILD_DIR_CREATION_FAILED = 4;
    RUN_JSON_GENERATION_FAILED = 5;
    BUILD_DIR_SAME_AS_PROJECT = 6;
}

message ProjectConfigRequest {
    ProjectContext projectContext = 1;
    ConfigMode configMode = 2;
    repeated string cmakeOptions = 3;
}

message ProjectConfigResponse {
    ProjectConfigStatus type = 1;
    string message = 2;
    Progress progress = 3;
}

message ProjectTarget {
    string name = 1;
    string path = 2;
    string description = 3;
}

message ProjectTargetsRequest {
    ProjectContext projectContext = 1;
}

message ProjectTargetsResponse {
    repeated ProjectTarget targets = 1;
    ProjectTarget priorityTarget = 2;
}

message FileTargetsRequest {
    string path = 1;
    ProjectContext projectContext = 2;
}

message FileTargetsResponse {
    repeated ProjectTarget targets = 1;
}
